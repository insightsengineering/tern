[{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others‚Äô private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://insightsengineering.github.io/tern/main/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://insightsengineering.github.io/tern/main/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla‚Äôs code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contribution Guidelines","title":"Contribution Guidelines","text":"üôè Thank taking time contribute! input deeply valued, whether issue, pull request, even feedback, regardless size, content scope.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of contents","title":"Contribution Guidelines","text":"üë∂ Getting started üìî Code Conduct üóÉ License üìú Issues üö© Pull requests üíª Coding guidelines üèÜ Recognition model ‚ùì Questions","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Contribution Guidelines","text":"Please refer project documentation brief introduction. Please also see articles within project documentation additional information.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contribution Guidelines","text":"Code Conduct governs project. Participants contributors expected follow rules outlined therein.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Contribution Guidelines","text":"contributions covered project‚Äôs license.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contribution Guidelines","text":"use GitHub track issues, feature requests, bugs. submitting new issue, please check issue already reported. issue already exists, please upvote existing issue üëç. new feature requests, please elaborate context benefit feature users, developers, relevant personas.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"github-flow","dir":"","previous_headings":"Pull requests","what":"Github Flow","title":"Contribution Guidelines","text":"repository uses Github Flow model collaboration. submit pull request: Create branch Please see branch naming convention . don‚Äôt write access repository, please fork . Make changes Make sure code passes checks imposed GitHub Actions well documented well tested unit tests sufficiently covering changes introduced Create pull request (PR) pull request description, please link relevant issue (), provide detailed description change, include assumptions. Address review comments, Post approval Merge PR write access. Otherwise, reviewer merge PR behalf. Pat back Congratulations! üéâ now official contributor project! grateful contribution.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"branch-naming-convention","dir":"","previous_headings":"Pull requests","what":"Branch naming convention","title":"Contribution Guidelines","text":"Suppose changes related current issue current project; please name branch follows: <issue_id>_<short_description>. Please use underscore (_) delimiter word separation. example, 420_fix_ui_bug suitable branch name change resolving UI-related bug reported issue number 420 current project. change affects multiple repositories, please name branches follows: <issue_id>_<issue_repo>_<short description>. example, 69_awesomeproject_fix_spelling_error reference issue 69 reported project awesomeproject aims resolve one spelling errors multiple (likely related) repositories.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"monorepo-and-stageddependencies","dir":"","previous_headings":"Pull requests","what":"monorepo and staged.dependencies","title":"Contribution Guidelines","text":"Sometimes might need change upstream dependent package(s) able submit meaningful change. using staged.dependencies functionality simulate monorepo behavior. dependency configuration already specified project‚Äôs staged_dependencies.yaml file. need name feature branches appropriately. exception branch naming convention described . Please refer staged.dependencies package documentation details.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"coding-guidelines","dir":"","previous_headings":"","what":"Coding guidelines","title":"Contribution Guidelines","text":"repository follows unified processes standards adopted maintainers ensure software development carried consistently within teams cohesively across repositories.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"style-guide","dir":"","previous_headings":"Coding guidelines","what":"Style guide","title":"Contribution Guidelines","text":"repository follows standard tidyverse style guide uses lintr lint checks. Customized lint configurations available repository‚Äôs .lintr file.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"dependency-management","dir":"","previous_headings":"Coding guidelines","what":"Dependency management","title":"Contribution Guidelines","text":"Lightweight right weight. repository follows tinyverse recommedations limiting dependencies minimum.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"dependency-version-management","dir":"","previous_headings":"Coding guidelines","what":"Dependency version management","title":"Contribution Guidelines","text":"code compatible (!) historical versions given dependenct package, required specify minimal version DESCRIPTION file. particular: development version requires (imports) development version another package - required put abc (>= 1.2.3.9000).","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"r--package-versions","dir":"","previous_headings":"Coding guidelines > Recommended development environment & tools","what":"R & package versions","title":"Contribution Guidelines","text":"continuously test packages newest R version along recent dependencies CRAN BioConductor. recommend working environment also set way. can find details R version packages used R CMD check GitHub Action execution log - step prints R sessionInfo(). discover bugs older R versions older set dependencies, please create relevant bug reports.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"pre-commit","dir":"","previous_headings":"Coding guidelines > Recommended development environment & tools","what":"pre-commit","title":"Contribution Guidelines","text":"highly recommend use pre-commit tool combined R hooks pre-commit execute checks committing pushing changes. Pre-commit hooks already available repository‚Äôs .pre-commit-config.yaml file.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"recognition-model","dir":"","previous_headings":"","what":"Recognition model","title":"Contribution Guidelines","text":"mentioned previously, contributions deeply valued appreciated. contribution data available part repository insights, recognize significant contribution hence add contributor package authors list, following rules enforced: Minimum 5% lines code authored* (determined git blame query) top 5 contributors terms number commits lines added lines removed* *Excluding auto-generated code, including limited roxygen comments renv.lock files. package maintainer also reserves right adjust criteria recognize contributions.","code":""},{"path":"https://insightsengineering.github.io/tern/main/CONTRIBUTING.html","id":"questions","dir":"","previous_headings":"","what":"Questions","title":"Contribution Guidelines","text":"questions regarding contribution guidelines, please contact package/repository maintainer.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/SECURITY.html","id":"reporting-security-issues","dir":"","previous_headings":"","what":"Reporting Security Issues","title":"Security Policy","text":"believe found security vulnerability repositories organization, please report us coordinated disclosure. Please report security vulnerabilities public GitHub issues, discussions, pull requests. Instead, please send email vulnerability.management[@]roche.com. Please include much information listed can help us better understand resolve issue: type issue (e.g., buffer overflow, SQL injection, cross-site scripting) Full paths source file(s) related manifestation issue location affected source code (tag/branch/commit direct URL) special configuration required reproduce issue Step--step instructions reproduce issue Proof--concept exploit code (possible) Impact issue, including attacker might exploit issue information help us triage report quickly.","code":""},{"path":"https://insightsengineering.github.io/tern/main/SECURITY.html","id":"data-security-standards-dss","dir":"","previous_headings":"","what":"Data Security Standards (DSS)","title":"Security Policy","text":"Please make sure reporting issues form bug, feature, pull request, sensitive information PII, PHI, PCI completely removed text attachments, including pictures videos.","code":""},{"path":"https://insightsengineering.github.io/tern/main/articles/missing_values.html","id":"variable-class-conversion","dir":"Articles","previous_headings":"","what":"Variable Class Conversion","title":"Missing Values in Tern","text":"rtables requires split variables factors. try split variable isn‚Äôt, warning message appear. purposefully convert SEX variable character demonstrate happens try splitting rows variable. fix , df_explict_na convert factor resulting table generated.","code":"adsl <- tern_ex_adsl adsl$SEX <- as.character(adsl$SEX)  vars <- c(\"AGE\", \"SEX\", \"RACE\", \"BMRKR1\") var_labels <- c(   \"Age (yr)\",   \"Sex\",   \"Race\",   \"Continous Level Biomarker 1\" )  result <- basic_table(show_colcounts = TRUE) %>%   split_cols_by(var = \"ARM\") %>%   add_overall_col(\"All Patients\") %>%   summarize_vars(     vars = vars,     var_labels = var_labels   ) %>%   build_table(adsl) #> Warning in as_factor_keep_attributes(x, x_name = .var, na_level = na_level, : #> automatically converting character variable SEX to factor, better manually #> convert to factor to avoid failures  #> Warning in as_factor_keep_attributes(x, x_name = .var, na_level = na_level, : #> automatically converting character variable SEX to factor, better manually #> convert to factor to avoid failures  #> Warning in as_factor_keep_attributes(x, x_name = .var, na_level = na_level, : #> automatically converting character variable SEX to factor, better manually #> convert to factor to avoid failures  #> Warning in as_factor_keep_attributes(x, x_name = .var, na_level = na_level, : #> automatically converting character variable SEX to factor, better manually #> convert to factor to avoid failures result #>                                                A: Drug X    B: Placebo    C: Combination   All Patients #>                                                 (N=69)        (N=73)          (N=58)         (N=200)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Age (yr)                                                                                                #>   n                                               69            73              58             200      #>   Mean (SD)                                   34.1 (6.8)    35.8 (7.1)      36.1 (7.4)      35.3 (7.1)  #>   Median                                         32.8          35.4            36.2            34.8     #>   Min - Max                                   22.4 - 48.0   23.3 - 57.5    23.0 - 58.3     22.4 - 58.3  #> Sex                                                                                                     #>   n                                               69            73              58             200      #>   F                                           38 (55.1%)    40 (54.8%)      32 (55.2%)      110 (55%)   #>   M                                           31 (44.9%)    33 (45.2%)      26 (44.8%)       90 (45%)   #> Race                                                                                                    #>   n                                               69            73              58             200      #>   ASIAN                                       38 (55.1%)    43 (58.9%)       29 (50%)       110 (55%)   #>   BLACK OR AFRICAN AMERICAN                   15 (21.7%)    13 (17.8%)      12 (20.7%)       40 (20%)   #>   WHITE                                       11 (15.9%)    12 (16.4%)       11 (19%)        34 (17%)   #>   AMERICAN INDIAN OR ALASKA NATIVE             4 (5.8%)      3 (4.1%)       6 (10.3%)       13 (6.5%)   #>   MULTIPLE                                     1 (1.4%)      1 (1.4%)           0             2 (1%)    #>   NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER        0         1 (1.4%)           0            1 (0.5%)   #>   OTHER                                            0             0              0               0       #>   UNKNOWN                                          0             0              0               0       #> Continous Level Biomarker 1                                                                             #>   n                                               69            73              58             200      #>   Mean (SD)                                    6.3 (3.6)     6.7 (3.5)      6.2 (3.3)       6.4 (3.5)   #>   Median                                          5.4           6.3            5.4             5.6      #>   Min - Max                                   0.4 - 17.8    1.0 - 18.5      2.4 - 19.1      0.4 - 19.1"},{"path":"https://insightsengineering.github.io/tern/main/articles/missing_values.html","id":"including-missing-values-in-rtables","dir":"Articles","previous_headings":"","what":"Including Missing Values in rtables","title":"Missing Values in Tern","text":"purposefully convert M values NA SEX variable. running df_explicit_na NA values encoded <Missing> included table. well, missing values included n count included denominator value calculating percent values. want Na values displayed table included n count denominator calculating percent values, use na_level argument.","code":"adsl <- tern_ex_adsl adsl$SEX[adsl$SEX == \"M\"] <- NA adsl <- df_explicit_na(adsl)  vars <- c(\"AGE\", \"SEX\") var_labels <- c(   \"Age (yr)\",   \"Sex\" )  result <- basic_table(show_colcounts = TRUE) %>%   split_cols_by(var = \"ARM\") %>%   add_overall_col(\"All Patients\") %>%   summarize_vars(     vars = vars,     var_labels = var_labels   ) %>%   build_table(adsl) result #>                A: Drug X    B: Placebo    C: Combination   All Patients #>                 (N=69)        (N=73)          (N=58)         (N=200)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Age (yr)                                                                #>   n               69            73              58             200      #>   Mean (SD)   34.1 (6.8)    35.8 (7.1)      36.1 (7.4)      35.3 (7.1)  #>   Median         32.8          35.4            36.2            34.8     #>   Min - Max   22.4 - 48.0   23.3 - 57.5    23.0 - 58.3     22.4 - 58.3  #> Sex                                                                     #>   n               38            40              32             110      #>   F            38 (100%)     40 (100%)      32 (100%)       110 (100%)  #>   M                0             0              0               0 adsl <- tern_ex_adsl adsl$SEX[adsl$SEX == \"M\"] <- NA adsl <- df_explicit_na(adsl, na_level = \"Missing Values\")  result <- basic_table(show_colcounts = TRUE) %>%   split_cols_by(var = \"ARM\") %>%   add_overall_col(\"All Patients\") %>%   summarize_vars(     vars = vars,     var_labels = var_labels   ) %>%   build_table(adsl) result #>                     A: Drug X    B: Placebo    C: Combination   All Patients #>                      (N=69)        (N=73)          (N=58)         (N=200)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Age (yr)                                                                     #>   n                    69            73              58             200      #>   Mean (SD)        34.1 (6.8)    35.8 (7.1)      36.1 (7.4)      35.3 (7.1)  #>   Median              32.8          35.4            36.2            34.8     #>   Min - Max        22.4 - 48.0   23.3 - 57.5    23.0 - 58.3     22.4 - 58.3  #> Sex                                                                          #>   n                    69            73              58             200      #>   F                38 (55.1%)    40 (54.8%)      32 (55.2%)      110 (55%)   #>   M                     0             0              0               0       #>   Missing Values   31 (44.9%)    33 (45.2%)      26 (44.8%)       90 (45%)"},{"path":"https://insightsengineering.github.io/tern/main/articles/missing_values.html","id":"missing-values-in-numeric-variables","dir":"Articles","previous_headings":"","what":"Missing Values in Numeric Variables","title":"Missing Values in Tern","text":"Numeric variables missing values altered. means NA value numeric variable included summary statistics, included denominator value calculating percent values. make value less 30 missing AGE variable valued greater 30 included table .","code":"adsl <- tern_ex_adsl adsl$AGE[adsl$AGE < 30] <- NA adsl <- df_explicit_na(adsl)  vars <- c(\"AGE\", \"SEX\") var_labels <- c(   \"Age (yr)\",   \"Sex\" )  result <- basic_table(show_colcounts = TRUE) %>%   split_cols_by(var = \"ARM\") %>%   add_overall_col(\"All Patients\") %>%   summarize_vars(     vars = vars,     var_labels = var_labels   ) %>%   build_table(adsl) result #>                A: Drug X    B: Placebo    C: Combination   All Patients #>                 (N=69)        (N=73)          (N=58)         (N=200)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Age (yr)                                                                #>   n               46            56              44             146      #>   Mean (SD)   37.8 (5.2)    38.3 (6.3)      39.1 (5.9)      38.3 (5.8)  #>   Median         37.2          37.3            37.5            37.5     #>   Min - Max   30.3 - 48.0   30.0 - 57.5    30.5 - 58.3     30.0 - 58.3  #> Sex                                                                     #>   n               69            73              58             200      #>   F           38 (55.1%)    40 (54.8%)      32 (55.2%)      110 (55%)   #>   M           31 (44.9%)    33 (45.2%)      26 (44.8%)       90 (45%)"},{"path":"https://insightsengineering.github.io/tern/main/articles/tables.html","id":"tern-tabulation","dir":"Articles","previous_headings":"","what":"tern Tabulation","title":"Tabulation","text":"tern R package provides functions create common analyses clinical trials R. core functionality tabulation built general purpose rtables package. New users first begin reading ‚ÄúIntroduction tern‚Äù ‚ÄúIntroduction rtables‚Äù vignettes. packages used vignette : datasets used vignette :","code":"library(rtables) library(tern) library(dplyr) adsl <- ex_adsl adae <- ex_adae adrs <- ex_adrs"},{"path":"https://insightsengineering.github.io/tern/main/articles/tables.html","id":"tern-analyze-functions","dir":"Articles","previous_headings":"","what":"tern Analyze Functions","title":"Tabulation","text":"Analyze functions used combination rtables layout functions, pipeline creates rtables table. apply statistical logic layout rtables table. table layout materialized rtables::build_table function data. tern analyze functions wrappers around rtables::analyze function, offer various methods useful perspective clinical trials statistical projects. Examples tern analyze functions tern::count_occurrences, tern::summarize_ancova tern::summarize_vars. one prefix identify tern analyze functions recommended use tern website functions reference.","code":""},{"path":"https://insightsengineering.github.io/tern/main/articles/tables.html","id":"internals-of-tern-analyze-functions","dir":"Articles","previous_headings":"tern Analyze Functions","what":"Internals of tern Analyze Functions","title":"Tabulation","text":"Please skip subsection interested internals tern analyze functions. Internally tern analyze functions like tern::summarize_ancova mainly built 4 elements chain: descriptions function type: analysis helper functions h_*. functions useful help define analysis. statistics function s_*. Statistics functions computation numbers tabulated later. order separate computation formatting, take care rcell type formatting . formatted analysis functions a_*. arguments corresponding statistics functions, can customized calling rtables::make_afun() . used afun rtables::analyze(). analyze functions rtables::analyze(..., afun = make_afun(tern::a_*)). Analyze functions used combination rtables layout functions, pipeline creates table. last element chain. use native rtables::analyze function tern formatted analysis functions afun parameter. rtables::make_afun function helpful somebody wants attach format formatted analysis function.","code":"h_ancova() -> tern:::s_ancova() -> tern:::a_ancova() -> summarize_ancova() l <- basic_table() %>%     split_cols_by(var = \"ARM\") %>%     split_rows_by(var = \"AVISIT\") %>%     analyze(vars = \"AVAL\", afun = a_summary)  build_table(l, df = adrs) afun <- make_afun(     a_summary,     .stats = NULL,     .formats = c(median = \"xx.\"),     .labels = c(median = \"My median\"),     .indent_mods = c(median = 1L) )  l2 <- basic_table() %>%     split_cols_by(var = \"ARM\") %>%     split_rows_by(var = \"AVISIT\") %>%     analyze(vars = \"AVAL\", afun = afun)  build_table(l2, df = adrs)"},{"path":"https://insightsengineering.github.io/tern/main/articles/tables.html","id":"tabulation-examples","dir":"Articles","previous_headings":"","what":"Tabulation Examples","title":"Tabulation","text":"going create 3 different tables using tern analyze functions rtables interface.","code":""},{"path":"https://insightsengineering.github.io/tern/main/articles/tables.html","id":"demographic-table","dir":"Articles","previous_headings":"Tabulation Examples","what":"Demographic Table","title":"Tabulation","text":"Demographic tables provide summary characteristics patients enrolled clinical trial. Typically table columns represent treatment arms variables summarized table demographic properties age, sex, race, etc. example function tern summarize_vars() remaining layout functions rtables. change display order categorical variables table use factor variables explicitly set order levels. case display order columns rows. Note forcats package many useful functions help types data processing steps (used ). tern package includes many functions similar summarize_vars(). functions called layout creating functions used combination rtables layout functions just like examples . Layout creating functions wrapping calls rtables analyze(), analyze_colvars() summarize_row_groups() provide options easy formatting analysis modifications. customize display demographics table, can via arguments summarize_vars(). layout creating functions tern include standard arguments .stats, .formats, .labels .indent_mods control statistics displayed numbers formatted. Refer package help help(\"summarize_vars\") ?summarize_vars see full set options. example change default summary numeric variables include number records, mean standard deviation (single statistic, .e.¬†within single cell). categorical variables modify summary include number records counts categories. also modify display format mean standard deviation print two decimal places instead just one. One feature layout can used different datasets create different summaries. example, can easily create summary demographics Brazil China subgroups, respectively:","code":"# Select variables to include in table. vars <- c(\"AGE\", \"SEX\") var_labels <- c(\"Age (yr)\", \"Sex\")  basic_table() %>%   split_cols_by(var = \"ARM\") %>%   add_overall_col(\"All Patients\") %>%   add_colcounts() %>%   summarize_vars(     vars = vars,     var_labels = var_labels   ) %>%   build_table(adsl) #>                       A: Drug X    B: Placebo    C: Combination   All Patients #>                        (N=134)       (N=134)        (N=132)         (N=400)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Age (yr)                                                                       #>   n                      134           134            132             400      #>   Mean (SD)          33.8 (6.6)    35.4 (7.9)      35.4 (7.7)      34.9 (7.4)  #>   Median                33.0          35.0            35.0            34.0     #>   Min - Max          21.0 - 50.0   21.0 - 62.0    20.0 - 69.0     20.0 - 69.0  #> Sex                                                                            #>   n                      134           134            132             400      #>   F                   79 (59%)     77 (57.5%)       66 (50%)      222 (55.5%)  #>   M                  51 (38.1%)     55 (41%)       60 (45.5%)     166 (41.5%)  #>   U                   3 (2.2%)      2 (1.5%)         4 (3%)         9 (2.2%)   #>   UNDIFFERENTIATED    1 (0.7%)          0           2 (1.5%)        3 (0.8%) # Reorder the levels in the ARM variable. adsl$ARM <- factor(adsl$ARM, levels = c(\"B: Placebo\", \"A: Drug X\", \"C: Combination\")) # nolint  # Reorder the levels in the SEX variable. adsl$SEX <- factor(adsl$SEX, levels = c(\"M\", \"F\", \"U\", \"UNDIFFERENTIATED\")) # nolint  basic_table() %>%   split_cols_by(var = \"ARM\") %>%   add_overall_col(\"All Patients\") %>%   add_colcounts() %>%   summarize_vars(     vars = vars,     var_labels = var_labels   ) %>%   build_table(adsl) #>                      B: Placebo     A: Drug X    C: Combination   All Patients #>                        (N=134)       (N=134)        (N=132)         (N=400)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Age (yr)                                                                       #>   n                      134           134            132             400      #>   Mean (SD)          35.4 (7.9)    33.8 (6.6)      35.4 (7.7)      34.9 (7.4)  #>   Median                35.0          33.0            35.0            34.0     #>   Min - Max          21.0 - 62.0   21.0 - 50.0    20.0 - 69.0     20.0 - 69.0  #> Sex                                                                            #>   n                      134           134            132             400      #>   M                   55 (41%)     51 (38.1%)      60 (45.5%)     166 (41.5%)  #>   F                  77 (57.5%)     79 (59%)        66 (50%)      222 (55.5%)  #>   U                   2 (1.5%)      3 (2.2%)         4 (3%)         9 (2.2%)   #>   UNDIFFERENTIATED        0         1 (0.7%)        2 (1.5%)        3 (0.8%) # Select statistics and modify default formats. basic_table() %>%   split_cols_by(var = \"ARM\") %>%   add_overall_col(\"All Patients\") %>%   add_colcounts() %>%   summarize_vars(     vars = vars,     var_labels = var_labels,     .stats = c(\"n\", \"mean_sd\", \"count\"),     .formats = c(mean_sd = \"xx.xx (xx.xx)\")   ) %>%   build_table(adsl) #>                       B: Placebo     A: Drug X     C: Combination   All Patients #>                        (N=134)        (N=134)         (N=132)         (N=400)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Age (yr)                                                                         #>   n                      134            134             132             400      #>   Mean (SD)          35.43 (7.90)   33.77 (6.55)    35.43 (7.72)    34.88 (7.44) #> Sex                                                                              #>   n                      134            134             132             400      #>   M                       55             51              60             166      #>   F                       77             79              66             222      #>   U                       2              3               4               9       #>   UNDIFFERENTIATED        0              1               2               3 lyt <- basic_table() %>%   split_cols_by(var = \"ARM\") %>%   add_overall_col(\"All Patients\") %>%   add_colcounts() %>%   summarize_vars(     vars = vars,     var_labels = var_labels   )  build_table(lyt, df = adsl %>% dplyr::filter(COUNTRY == \"BRA\")) #>                      B: Placebo     A: Drug X    C: Combination   All Patients #>                         (N=7)        (N=13)          (N=10)          (N=30)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Age (yr)                                                                       #>   n                       7            13              10              30      #>   Mean (SD)          32.0 (6.1)    36.7 (6.4)     38.3 (10.6)      36.1 (8.1)  #>   Median                32.0          37.0            35.0            35.5     #>   Min - Max          25.0 - 42.0   24.0 - 47.0    25.0 - 64.0     24.0 - 64.0  #> Sex                                                                            #>   n                       7            13              10              30      #>   M                   4 (57.1%)     8 (61.5%)       5 (50%)        17 (56.7%)  #>   F                   3 (42.9%)     5 (38.5%)       5 (50%)        13 (43.3%)  #>   U                       0             0              0               0       #>   UNDIFFERENTIATED        0             0              0               0  build_table(lyt, df = adsl %>% dplyr::filter(COUNTRY == \"CHN\")) #>                      B: Placebo     A: Drug X    C: Combination   All Patients #>                        (N=81)        (N=74)          (N=64)         (N=219)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Age (yr)                                                                       #>   n                      81            74              64             219      #>   Mean (SD)          35.7 (7.3)    33.0 (6.4)      35.2 (6.4)      34.6 (6.8)  #>   Median                36.0          32.0            35.0            34.0     #>   Min - Max          21.0 - 58.0   23.0 - 48.0    21.0 - 49.0     21.0 - 58.0  #> Sex                                                                            #>   n                      81            74              64             219      #>   M                  35 (43.2%)    27 (36.5%)      30 (46.9%)       92 (42%)   #>   F                  45 (55.6%)    44 (59.5%)      29 (45.3%)     118 (53.9%)  #>   U                   1 (1.2%)      2 (2.7%)        3 (4.7%)        6 (2.7%)   #>   UNDIFFERENTIATED        0         1 (1.4%)        2 (3.1%)        3 (1.4%)"},{"path":"https://insightsengineering.github.io/tern/main/articles/tables.html","id":"adverse-event-table","dir":"Articles","previous_headings":"Tabulation Examples","what":"Adverse Event Table","title":"Tabulation","text":"standard table adverse events summary system organ class preferred term. frequency counts preferred term, multiple occurrences AE individual count . create table need use combination several layout creating functions tabulation pipeline. start creating high-level summary. layout creating function tern can summarize_num_patients(): Note table, denominator used percentages shown header table (N = xx) defined based subject-level dataset adsl. done using alt_df_counts argument build_table(), provides alternative data set deriving counts header. often required work data sets include multiple records per patient df, adae .","code":"basic_table() %>%   split_cols_by(var = \"ACTARM\") %>%   add_colcounts() %>%   add_overall_col(label = \"All Patients\") %>%   summarize_num_patients(     var = \"USUBJID\",     .stats = c(\"unique\", \"nonunique\"),     .labels = c(       unique = \"Total number of patients with at least one AE\",       nonunique = \"Overall total number of events\"     )   ) %>%   build_table(     df = adae,     alt_counts_df = adsl   ) #>                                                  A: Drug X    B: Placebo    C: Combination   All Patients #>                                                   (N=134)       (N=134)        (N=132)         (N=400)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Total number of patients with at least one AE   122 (91.0%)   123 (91.8%)    120 (90.9%)     365 (91.2%)  #> Overall total number of events                      609           622            703             1934"},{"path":"https://insightsengineering.github.io/tern/main/articles/tables.html","id":"statistics-functions","dir":"Articles","previous_headings":"Tabulation Examples > Adverse Event Table","what":"Statistics Functions","title":"Tabulation","text":"building rest AE table helpful introduce tern package design conventions. layout creating function tern wrapper Statistics function. Statistics functions ones actual computation numbers table. functions always return named lists whose elements statistics available include layout via .stats argument layout creating function level. Statistics functions follow naming convention always begin s_* ease use documented page layout creating function counterpart. helpful review Statistic function understand logic used calculate numbers table see options may available modify analysis. example, Statistics function calculating numbers summarize_num_patients() s_num_patients(). results Statistics function list elements unique, nonunique unique_count: results can see unique nonunique statistics displayed ‚ÄúPatients‚Äù column initial AE table output . Also can see raw numbers formatted way. formatting functionality handled layout creating function level .formats argument. Now know types statistics can derived s_num_patients(), can try modifying default layout returned summarize_num_patients(). Instead reporting unique nonqunie statistics, specify analysis include unique_count statistic. result show counts unique patients. Note make update .stats .labels argument summarize_num_patients(). Let‚Äôs now continue building layout adverse event table. top-level summary, can repeat summary system organ class level. split analysis data split_rows_by() calling summarize_num_patients(). table looks almost ready. final step, need layout creating function can produce count table event frequencies. layout creating function count_occurrences(). Let‚Äôs first try using function simpler layout without row splits: Putting everything together, final AE table looks like :","code":"s_num_patients(x = adae$USUBJID, labelstr = \"\", .N_col = nrow(adae)) #> $unique #> [1] 365.000000   0.188728 #> attr(,\"label\") #> [1] \"\" #>  #> $nonunique #> [1] 1934 #> attr(,\"label\") #> [1] \"\" #>  #> $unique_count #> [1] 365 #> attr(,\"label\") #> [1] \" (n)\" basic_table() %>%   split_cols_by(var = \"ACTARM\") %>%   add_colcounts() %>%   add_overall_col(label = \"All Patients\") %>%   summarize_num_patients(     var = \"USUBJID\",     .stats = \"unique_count\",     .labels = c(unique_count = \"Total number of patients with at least one AE\")   ) %>%   build_table(     df = adae,     alt_counts_df = adsl   ) #>                                                 A: Drug X   B: Placebo   C: Combination   All Patients #>                                                  (N=134)     (N=134)        (N=132)         (N=400)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Total number of patients with at least one AE      122         123            120             365 basic_table() %>%   split_cols_by(var = \"ACTARM\") %>%   add_colcounts() %>%   add_overall_col(label = \"All Patients\") %>%   summarize_num_patients(     var = \"USUBJID\",     .stats = c(\"unique\", \"nonunique\"),     .labels = c(       unique = \"Total number of patients with at least one AE\",       nonunique = \"Overall total number of events\"     )   ) %>%   split_rows_by(     \"AEBODSYS\",     child_labels = \"visible\",     nested = FALSE,     indent_mod = -1L,     split_fun = drop_split_levels   ) %>%   summarize_num_patients(     var = \"USUBJID\",     .stats = c(\"unique\", \"nonunique\"),     .labels = c(       unique = \"Total number of patients with at least one AE\",       nonunique = \"Overall total number of events\"     )   ) %>%   build_table(     df = adae,     alt_counts_df = adsl   ) #>                                                    A: Drug X    B: Placebo    C: Combination   All Patients #>                                                     (N=134)       (N=134)        (N=132)         (N=400)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Total number of patients with at least one AE     122 (91.0%)   123 (91.8%)    120 (90.9%)     365 (91.2%)  #> Overall total number of events                        609           622            703             1934     #> cl A.1                                                                                                      #>   Total number of patients with at least one AE   78 (58.2%)    75 (56.0%)      89 (67.4%)     242 (60.5%)  #>   Overall total number of events                      132           130            160             422      #> cl B.1                                                                                                      #>   Total number of patients with at least one AE   47 (35.1%)    49 (36.6%)      43 (32.6%)     139 (34.8%)  #>   Overall total number of events                      56            60              62             178      #> cl B.2                                                                                                      #>   Total number of patients with at least one AE   79 (59.0%)    74 (55.2%)      85 (64.4%)     238 (59.5%)  #>   Overall total number of events                      129           138            143             410      #> cl C.1                                                                                                      #>   Total number of patients with at least one AE   43 (32.1%)    46 (34.3%)      43 (32.6%)     132 (33.0%)  #>   Overall total number of events                      55            63              64             182      #> cl C.2                                                                                                      #>   Total number of patients with at least one AE   35 (26.1%)    48 (35.8%)      55 (41.7%)     138 (34.5%)  #>   Overall total number of events                      48            53              65             166      #> cl D.1                                                                                                      #>   Total number of patients with at least one AE   79 (59.0%)    67 (50.0%)      80 (60.6%)     226 (56.5%)  #>   Overall total number of events                      127           106            135             368      #> cl D.2                                                                                                      #>   Total number of patients with at least one AE   47 (35.1%)    58 (43.3%)      57 (43.2%)     162 (40.5%)  #>   Overall total number of events                      62            72              74             208 basic_table() %>%   split_cols_by(var = \"ACTARM\") %>%   add_colcounts() %>%   add_overall_col(label = \"All Patients\") %>%   count_occurrences(vars = \"AEDECOD\") %>%   build_table(     df = adae,     alt_counts_df = adsl   ) #>                 A: Drug X    B: Placebo   C: Combination   All Patients #>                  (N=134)      (N=134)        (N=132)         (N=400)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> dcd A.1.1.1.1   50 (37.3%)   45 (33.6%)     63 (47.7%)     158 (39.5%)  #> dcd A.1.1.1.2   48 (35.8%)   48 (35.8%)     50 (37.9%)     146 (36.5%)  #> dcd B.1.1.1.1   47 (35.1%)   49 (36.6%)     43 (32.6%)     139 (34.8%)  #> dcd B.2.1.2.1   49 (36.6%)   44 (32.8%)     52 (39.4%)     145 (36.2%)  #> dcd B.2.2.3.1   48 (35.8%)   54 (40.3%)     51 (38.6%)     153 (38.2%)  #> dcd C.1.1.1.3   43 (32.1%)   46 (34.3%)     43 (32.6%)     132 (33.0%)  #> dcd C.2.1.2.1   35 (26.1%)   48 (35.8%)     55 (41.7%)     138 (34.5%)  #> dcd D.1.1.1.1   50 (37.3%)   42 (31.3%)     51 (38.6%)     143 (35.8%)  #> dcd D.1.1.4.2   48 (35.8%)   42 (31.3%)     50 (37.9%)     140 (35.0%)  #> dcd D.2.1.5.3   47 (35.1%)   58 (43.3%)     57 (43.2%)     162 (40.5%) basic_table() %>%   split_cols_by(var = \"ACTARM\") %>%   add_colcounts() %>%   add_overall_col(label = \"All Patients\") %>%   summarize_num_patients(     var = \"USUBJID\",     .stats = c(\"unique\", \"nonunique\"),     .labels = c(       unique = \"Total number of patients with at least one AE\",       nonunique = \"Overall total number of events\"     )   ) %>%   split_rows_by(     \"AEBODSYS\",     child_labels = \"visible\",     nested = FALSE,     indent_mod = -1L,     split_fun = drop_split_levels   ) %>%   summarize_num_patients(     var = \"USUBJID\",     .stats = c(\"unique\", \"nonunique\"),     .labels = c(       unique = \"Total number of patients with at least one AE\",       nonunique = \"Overall total number of events\"     )   ) %>%   count_occurrences(vars = \"AEDECOD\") %>%   build_table(     df = adae,     alt_counts_df = adsl   ) #>                                                    A: Drug X    B: Placebo    C: Combination   All Patients #>                                                     (N=134)       (N=134)        (N=132)         (N=400)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Total number of patients with at least one AE     122 (91.0%)   123 (91.8%)    120 (90.9%)     365 (91.2%)  #> Overall total number of events                        609           622            703             1934     #> cl A.1                                                                                                      #>   Total number of patients with at least one AE   78 (58.2%)    75 (56.0%)      89 (67.4%)     242 (60.5%)  #>   Overall total number of events                      132           130            160             422      #>     dcd A.1.1.1.1                                 50 (37.3%)    45 (33.6%)      63 (47.7%)     158 (39.5%)  #>     dcd A.1.1.1.2                                 48 (35.8%)    48 (35.8%)      50 (37.9%)     146 (36.5%)  #> cl B.1                                                                                                      #>   Total number of patients with at least one AE   47 (35.1%)    49 (36.6%)      43 (32.6%)     139 (34.8%)  #>   Overall total number of events                      56            60              62             178      #>     dcd B.1.1.1.1                                 47 (35.1%)    49 (36.6%)      43 (32.6%)     139 (34.8%)  #> cl B.2                                                                                                      #>   Total number of patients with at least one AE   79 (59.0%)    74 (55.2%)      85 (64.4%)     238 (59.5%)  #>   Overall total number of events                      129           138            143             410      #>     dcd B.2.1.2.1                                 49 (36.6%)    44 (32.8%)      52 (39.4%)     145 (36.2%)  #>     dcd B.2.2.3.1                                 48 (35.8%)    54 (40.3%)      51 (38.6%)     153 (38.2%)  #> cl C.1                                                                                                      #>   Total number of patients with at least one AE   43 (32.1%)    46 (34.3%)      43 (32.6%)     132 (33.0%)  #>   Overall total number of events                      55            63              64             182      #>     dcd C.1.1.1.3                                 43 (32.1%)    46 (34.3%)      43 (32.6%)     132 (33.0%)  #> cl C.2                                                                                                      #>   Total number of patients with at least one AE   35 (26.1%)    48 (35.8%)      55 (41.7%)     138 (34.5%)  #>   Overall total number of events                      48            53              65             166      #>     dcd C.2.1.2.1                                 35 (26.1%)    48 (35.8%)      55 (41.7%)     138 (34.5%)  #> cl D.1                                                                                                      #>   Total number of patients with at least one AE   79 (59.0%)    67 (50.0%)      80 (60.6%)     226 (56.5%)  #>   Overall total number of events                      127           106            135             368      #>     dcd D.1.1.1.1                                 50 (37.3%)    42 (31.3%)      51 (38.6%)     143 (35.8%)  #>     dcd D.1.1.4.2                                 48 (35.8%)    42 (31.3%)      50 (37.9%)     140 (35.0%)  #> cl D.2                                                                                                      #>   Total number of patients with at least one AE   47 (35.1%)    58 (43.3%)      57 (43.2%)     162 (40.5%)  #>   Overall total number of events                      62            72              74             208      #>     dcd D.2.1.5.3                                 47 (35.1%)    58 (43.3%)      57 (43.2%)     162 (40.5%)"},{"path":"https://insightsengineering.github.io/tern/main/articles/tables.html","id":"response-table","dir":"Articles","previous_headings":"Tabulation Examples","what":"Response Table","title":"Tabulation","text":"typical response table binary clinical trial endpoint may composed several different analyses: Proportion responders treatment group Difference proportion responders comparison groups vs.¬†control group Chi-Square test difference response rates comparison groups vs.¬†control group can build table layout like following approach used AE table: table section produced using different layout creating function tern. First start data preparation steps set analysis dataset. select endpoint analyze PARAMCD define logical variable is_rsp indicates whether patient classified responder . create summary proportion responders treatment group, use estimate_proportion() layout creating function: specify arm table used reference, use argument ref_group split_cols_by(). change reference arm ‚ÄúB: Placebo‚Äù arm displayed first column: customize analysis, can use method conf_level arguments modify type confidence interval calculated: next table section needed summarize difference response rates reference arm comparison arm. Use estimate_proportion_diff() layout creating function : final section needed complete table includes statistical test difference response rates. Use test_proportion_diff() layout creating function : customize output, use method argument select Chi-Squared test Schouten correction. Now can put table sections together one layout pipeline. Note one small change needed. Since primary analysis variable table sections (is_rsp), need give sub-table unique name. done adding table_names argument providing unique names :","code":"# Preprocessing to select an analysis endpoint. anl <- adrs %>%   dplyr::filter(PARAMCD == \"BESRSPI\") %>%   dplyr::mutate(is_rsp = AVALC %in% c(\"CR\", \"PR\")) basic_table() %>%   split_cols_by(var = \"ARM\") %>%   add_colcounts() %>%   estimate_proportion(     vars = \"is_rsp\",     table_names = \"est_prop\"   ) %>%   build_table(anl) #>                                   A: Drug X      B: Placebo    C: Combination #>                                    (N=134)        (N=134)         (N=132)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Responders                       114 (85.1%)     90 (67.2%)     120 (90.9%)   #> 95% CI (Wald, with correction)   (78.7, 91.5)   (58.8, 75.5)    (85.6, 96.2) basic_table() %>%   split_cols_by(var = \"ARM\", ref_group = \"B: Placebo\") %>%   add_colcounts() %>%   estimate_proportion(     vars = \"is_rsp\"   ) %>%   build_table(anl) #>                                   B: Placebo     A: Drug X     C: Combination #>                                    (N=134)        (N=134)         (N=132)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Responders                        90 (67.2%)    114 (85.1%)     120 (90.9%)   #> 95% CI (Wald, with correction)   (58.8, 75.5)   (78.7, 91.5)    (85.6, 96.2) basic_table() %>%   split_cols_by(var = \"ARM\", ref_group = \"B: Placebo\") %>%   add_colcounts() %>%   estimate_proportion(     vars = \"is_rsp\",     method = \"clopper-pearson\",     conf_level = 0.9   ) %>%   build_table(anl) #>                             B: Placebo     A: Drug X     C: Combination #>                              (N=134)        (N=134)         (N=132)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Responders                  90 (67.2%)    114 (85.1%)     120 (90.9%)   #> 90% CI (Clopper-Pearson)   (59.9, 73.9)   (79.1, 89.9)    (85.7, 94.7) basic_table() %>%   split_cols_by(var = \"ARM\", ref_group = \"B: Placebo\") %>%   add_colcounts() %>%   estimate_proportion_diff(     vars = \"is_rsp\",     show_labels = \"visible\",     var_labels = \"Unstratified Analysis\"   ) %>%   build_table(anl) #>                                      B: Placebo    A: Drug X    C: Combination #>                                       (N=134)       (N=134)        (N=132)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Unstratified Analysis                                                          #>   Difference in Response rate (%)                    17.9            23.7      #>     95% CI (Wald, with correction)                (7.2, 28.6)    (13.7, 33.8) basic_table() %>%   split_cols_by(var = \"ARM\", ref_group = \"B: Placebo\") %>%   add_colcounts() %>%   test_proportion_diff(vars = \"is_rsp\") %>%   build_table(anl) #>                                B: Placebo   A: Drug X   C: Combination #>                                 (N=134)      (N=134)       (N=132)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #>   p-value (Chi-Squared Test)                 0.0006        <0.0001 basic_table() %>%   split_cols_by(var = \"ARM\", ref_group = \"B: Placebo\") %>%   add_colcounts() %>%   test_proportion_diff(     vars = \"is_rsp\",     method = \"schouten\"   ) %>%   build_table(anl) #>                                                         B: Placebo   A: Drug X   C: Combination #>                                                          (N=134)      (N=134)       (N=132)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #>   p-value (Chi-Squared Test with Schouten Correction)                 0.0008        <0.0001 basic_table() %>%   split_cols_by(var = \"ARM\", ref_group = \"B: Placebo\") %>%   add_colcounts() %>%   estimate_proportion(     vars = \"is_rsp\",     method = \"clopper-pearson\",     conf_level = 0.9,     table_names = \"est_prop\"   ) %>%   estimate_proportion_diff(     vars = \"is_rsp\",     show_labels = \"visible\",     var_labels = \"Unstratified Analysis\",     table_names = \"est_prop_diff\"   ) %>%   test_proportion_diff(     vars = \"is_rsp\",     method = \"schouten\",     table_names = \"test_prop_diff\"   ) %>%   build_table(anl) #>                                                          B: Placebo     A: Drug X     C: Combination #>                                                           (N=134)        (N=134)         (N=132)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Responders                                               90 (67.2%)    114 (85.1%)     120 (90.9%)   #> 90% CI (Clopper-Pearson)                                (59.9, 73.9)   (79.1, 89.9)    (85.7, 94.7)  #> Unstratified Analysis                                                                                #>   Difference in Response rate (%)                                          17.9            23.7      #>     95% CI (Wald, with correction)                                     (7.2, 28.6)     (13.7, 33.8)  #>   p-value (Chi-Squared Test with Schouten Correction)                     0.0008         <0.0001"},{"path":"https://insightsengineering.github.io/tern/main/articles/tables.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Tabulation","text":"Tabulation tern builds top layout tabulation framework rtables. Complex tables built step step pipeline combining layout creating functions perform specific type analysis. tern analyze functions introduced vignette : summarize_vars() summarize_num_patients() count_occurrences() estimate_proportion() estimate_proportion_diff() test_proportion_diff() Layout creating functions build formatted layout controlling features labels, numerical display formats indentation. functions wrappers Statistics functions calculate raw summaries analysis. can easily spot Statistics functions documentation always begin prefix s_. can helpful inspect run Statistics functions understand ways analysis can customized.","code":""},{"path":"https://insightsengineering.github.io/tern/main/articles/tern.html","id":"introduction-to-tern","dir":"Articles","previous_headings":"","what":"Introduction to tern","title":"Introduction to tern","text":"vignette shows general purpose syntax tern R package. tern R package contains analytical functions creating tables graphs useful clinical trials statistical analysis. main focus clinical trial reporting tables graphs related clinical trials also valuable. core functionality tabulation built top general purpose rtables package. strongly recommended start reading ‚ÄúIntroduction rtables‚Äù vignette get familiar concept rtables.","code":""},{"path":"https://insightsengineering.github.io/tern/main/articles/tern.html","id":"common-clinical-trials-analyses","dir":"Articles","previous_headings":"","what":"Common Clinical Trials Analyses","title":"Introduction to tern","text":"package provides large range functionality create tables graphs used clinical trial statistical analysis. rtables tabulation extended clinical trials specific functions: demographics unique patients exposure across patients change baseline parameters statistical model fits: MMRM, logistic regression, Cox regression, ‚Ä¶ ‚Ä¶ rtables tabulation helper functions: pre-processing conversions transformations ‚Ä¶ data visualizations connected clinical trials: Kaplan-Meier plots forest plots line plots ‚Ä¶ data visualizations helper functions: arrange/stack multiple graphs embellishing graphs/tables metadata details, adding titles, footnotes, page number, etc. ‚Ä¶ reference tern functions available tern website functions reference.","code":""},{"path":"https://insightsengineering.github.io/tern/main/articles/tern.html","id":"analytical-functions-for-rtables","dir":"Articles","previous_headings":"","what":"Analytical Functions for rtables","title":"Introduction to tern","text":"Analytical functions used combination rtables layout functions, pipeline creates rtables table. apply statistical logic layout rtables table. table layout materialized rtables::build_table function data. tern analytical functions wrappers around rtables::analyze function; offer various methods useful perspective clinical trials statistical projects. Examples tern analytical functions tern::count_occurrences, tern::summarize_ancova tern::summarize_vars. one prefix identify tern analytical functions recommended use reference subsection tern website. rtables code first describe two tables assign descriptions variables lyt lyt2. built tables using actual data rtables::build_table. description table called table layout. analyze instruction adds layout ARM variable analyzed mean analysis function result rounded 1 decimal place. Hence, layout ‚Äúpre-data‚Äù; , ‚Äôs description build table get data. Defining table layout pure rtables code. tern function summarize_vars replaces rtables::analyze function . see tern offers advanced analysis extending rtables function calls one additional function call. examples tabulation analyze functions presented Tabulation vignette.","code":"library(tern) library(dplyr) # Create table layout pure rtables lyt <- rtables::basic_table() %>%   rtables::split_cols_by(var = \"ARM\") %>%   rtables::split_rows_by(var = \"AVISIT\") %>%   rtables::analyze(vars = \"AVAL\", mean, format = \"xx.x\") # Create table layout with tern summarize_vars analyze function lyt2 <- rtables::basic_table() %>%   rtables::split_cols_by(var = \"ARM\") %>%   rtables::split_rows_by(var = \"AVISIT\") %>%   tern::summarize_vars(vars = \"AVAL\", .formats = c(\"mean_sd\" = \"(xx.xx, xx.xx)\")) # Apply table layout to data and produce `rtables` object  adrs <- formatters::ex_adrs  rtables::build_table(lyt, df = adrs) #>                    A: Drug X   B: Placebo   C: Combination #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> SCREENING                                                  #>   mean                3.0         3.0            3.0       #> BASELINE                                                   #>   mean                2.5         2.8            2.5       #> END OF INDUCTION                                           #>   mean                1.7         2.1            1.6       #> FOLLOW UP                                                  #>   mean                2.2         2.9            2.0 rtables::build_table(lyt2, df = adrs) #>                     A: Drug X      B: Placebo    C: Combination #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> SCREENING                                                       #>   n                    154            178             144       #>   Mean (SD)        (3.00, 0.00)   (3.00, 0.00)    (3.00, 0.00)  #>   Median               3.0            3.0             3.0       #>   Min - Max         3.0 - 3.0      3.0 - 3.0       3.0 - 3.0    #> BASELINE                                                        #>   n                    136            146             124       #>   Mean (SD)        (2.46, 0.88)   (2.77, 1.00)    (2.46, 1.08)  #>   Median               3.0            3.0             3.0       #>   Min - Max         1.0 - 4.0      1.0 - 5.0       1.0 - 5.0    #> END OF INDUCTION                                                #>   n                    218            205             217       #>   Mean (SD)        (1.75, 0.90)   (2.14, 1.28)    (1.65, 1.06)  #>   Median               2.0            2.0             1.0       #>   Min - Max         1.0 - 4.0      1.0 - 5.0       1.0 - 5.0    #> FOLLOW UP                                                       #>   n                    164            153             167       #>   Mean (SD)        (2.23, 1.26)   (2.89, 1.29)    (1.97, 1.01)  #>   Median               2.0            4.0             2.0       #>   Min - Max         1.0 - 4.0      1.0 - 4.0       1.0 - 4.0"},{"path":"https://insightsengineering.github.io/tern/main/articles/tern.html","id":"clinical-trials-visualizations","dir":"Articles","previous_headings":"","what":"Clinical Trials Visualizations","title":"Introduction to tern","text":"Clinical trial related plots complement rich palette tern tabulation analysis functions. Thus tern package delivers full-featured tool clinical trial reporting. tern plot functions return ggplot2 gTree objects, latter returned table attached plot. optional nestcolor package can loaded apply standardized NEST color palette tern plots. Line plot without table generated tern::g_lineplot function.  Line plot table generated tern::g_lineplot function.  first plot ggplot2 object second plot gTree object, latter contains table. second plot properly resized get clear readable table content. tern functions used plot generation mostly g_ prefixed. tern plot functions listed tern website functions reference.","code":"adsl <- formatters::ex_adsl adlb <- formatters::ex_adlb adlb <- dplyr::filter(adlb, PARAMCD == \"ALT\", AVISIT != \"SCREENING\") library(nestcolor) # Mean with CI tern::g_lineplot(adlb, adsl, subtitle = \"Laboratory Test:\") # Mean with CI, table and customized confidence level tern::g_lineplot(   adlb,   adsl,   table = c(\"n\", \"mean\", \"mean_ci\"),   title = \"Plot of Mean and 80% Confidence Limits by Visit\" )"},{"path":"https://insightsengineering.github.io/tern/main/articles/tern.html","id":"interactive-apps","dir":"Articles","previous_headings":"","what":"Interactive Apps","title":"Introduction to tern","text":"tern outputs easily accommodated shiny apps. recommend applying tern outputs teal apps. teal package shiny-based interactive exploration framework analyzing data. teal shiny apps tern outputs available teal.modules.clinical package.","code":""},{"path":"https://insightsengineering.github.io/tern/main/articles/tern.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Introduction to tern","text":"summary, tern contains many additional functions creating tables, listing graphs used clinical trials statistical analyses. design package gives users lot flexibility meet analysis needs regulatory exploratory reporting context. information please explore tern website.","code":""},{"path":"https://insightsengineering.github.io/tern/main/articles/tern_formats.html","id":"tern-formatting-functions-overview","dir":"Articles","previous_headings":"","what":"tern Formatting Functions Overview","title":"Formatting Functions","text":"tern R package provides functions create common analyses clinical trials R functions default formatting arguments displaying values output specific way. tern formatting differs compared formatting available formatters package tern formats capable handling logical statements, allowing fine-tuning output displayed. Depending type value displayed, value , format output change. Whereas using formatters package, specified format applied regardless value. see available formatting functions available tern see ?formatting_functions. see available format strings available formatters see formatters::list_valid_format_labels().","code":""},{"path":"https://insightsengineering.github.io/tern/main/articles/tern_formats.html","id":"comparing-tern-formatters-formats","dir":"Articles","previous_headings":"","what":"Comparing tern & formatters Formats","title":"Formatting Functions","text":"packages used vignette : example demonstrates use tern formatting count_abnormal() function. example ‚Äúlow‚Äù category non-zero numerator value fraction percentage value displayed, ‚Äúhigh‚Äù value numerator value zero fraction value displayed without also displaying redundant zero percentage value. following example count_abnormal() function utilized . time ‚Äúlow‚Äù values ‚Äúhigh‚Äù values non-zero numerator show percentage. following example demonstrates difference formatters used instead format output. choose use \"xx / xx\" value format. ‚Äúhigh‚Äù value zero numerator value ‚Äúlow‚Äù value non-zero numerator, yet displayed format. concept occurs using available formats formatters package. following example displays result using \"xx.x / xx.x\" format instead. Use formatters::list_valid_format_labels() see full list available formats formatters.","code":"library(rtables) library(formatters) library(tern) library(dplyr) df2 <- data.frame(   ID = as.character(c(1, 1, 2, 2)),   RANGE = factor(c(\"NORMAL\", \"LOW\", \"HIGH\", \"LOW\")),   BL_RANGE = factor(c(\"NORMAL\", \"NORMAL\", \"HIGH\", \"HIGH\")),   ONTRTFL = c(\"\", \"Y\", \"\", \"Y\"),   stringsAsFactors = FALSE )  df2 <- df2 %>%   filter(ONTRTFL == \"Y\")  basic_table() %>%   count_abnormal(     var = \"RANGE\",     abnormal = list(low = \"LOW\", high = \"HIGH\"),     variables = list(id = \"ID\", baseline = \"BL_RANGE\"),     exclude_base_abn = FALSE,     .formats = list(fraction = format_fraction)   ) %>%   build_table(df2) #>         all obs   #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> low    2/2 (100%) #> high      0/2 df2 <- data.frame(   ID = as.character(c(1, 1, 2, 2)),   RANGE = factor(c(\"NORMAL\", \"LOW\", \"HIGH\", \"HIGH\")),   BL_RANGE = factor(c(\"NORMAL\", \"NORMAL\", \"HIGH\", \"HIGH\")),   ONTRTFL = c(\"\", \"Y\", \"\", \"Y\"),   stringsAsFactors = FALSE )  df2 <- df2 %>%   filter(ONTRTFL == \"Y\")  basic_table() %>%   count_abnormal(     var = \"RANGE\",     abnormal = list(low = \"LOW\", high = \"HIGH\"),     variables = list(id = \"ID\", baseline = \"BL_RANGE\"),     exclude_base_abn = FALSE,     .formats = list(fraction = format_fraction)   ) %>%   build_table(df2) #>         all obs  #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> low    1/2 (50%) #> high   1/2 (50%) df2 <- data.frame(   ID = as.character(c(1, 1, 2, 2)),   RANGE = factor(c(\"NORMAL\", \"LOW\", \"HIGH\", \"LOW\")),   BL_RANGE = factor(c(\"NORMAL\", \"NORMAL\", \"HIGH\", \"HIGH\")),   ONTRTFL = c(\"\", \"Y\", \"\", \"Y\"),   stringsAsFactors = FALSE ) df2 <- df2 %>%   filter(ONTRTFL == \"Y\")  basic_table() %>%   count_abnormal(     var = \"RANGE\",     abnormal = list(low = \"LOW\", high = \"HIGH\"),     variables = list(id = \"ID\", baseline = \"BL_RANGE\"),     exclude_base_abn = FALSE,     .formats = list(fraction = \"xx / xx\")   ) %>%   build_table(df2) #>        all obs #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> low     2 / 2  #> high    0 / 2 df2 <- data.frame(   ID = as.character(c(1, 1, 2, 2)),   RANGE = factor(c(\"NORMAL\", \"LOW\", \"HIGH\", \"LOW\")),   BL_RANGE = factor(c(\"NORMAL\", \"NORMAL\", \"HIGH\", \"HIGH\")),   ONTRTFL = c(\"\", \"Y\", \"\", \"Y\"),   stringsAsFactors = FALSE ) df2 <- df2 %>%   filter(ONTRTFL == \"Y\")  basic_table() %>%   count_abnormal(     var = \"RANGE\",     abnormal = list(low = \"LOW\", high = \"HIGH\"),     variables = list(id = \"ID\", baseline = \"BL_RANGE\"),     exclude_base_abn = FALSE,     .formats = list(fraction = \"xx.x / xx.x\")   ) %>%   build_table(df2) #>         all obs  #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> low    2.0 / 2.0 #> high   0.0 / 2.0"},{"path":"https://insightsengineering.github.io/tern/main/articles/tern_formats.html","id":"formatting-function-basics","dir":"Articles","previous_headings":"","what":"Formatting Function Basics","title":"Formatting Functions","text":"Current tern formatting functions consider following aspects setting custom behaviors: Missing values - custom value string can set display missing values instead NA. 0‚Äôs - cell value zero, tern fraction formatting functions exclude accompanying percentage value. Number decimal places display - number decimal places can fixed needed. Value thresholds - different format value can displayed depending whether value within certain threshold.","code":""},{"path":"https://insightsengineering.github.io/tern/main/articles/tern_formats.html","id":"number-of-decimal-places-to-display","dir":"Articles","previous_headings":"Formatting Function Basics","what":"Number of Decimal Places to Display","title":"Formatting Functions","text":"Two functions set fixed number decimal places (specifically 1) format_fraction_fixed_dp() format_count_fraction_fixed_dp(). default, formatting functions remove trailing zeros, two functions always one decimal place percentage, even digit zero. See following example:","code":"format_fraction_fixed_dp(x = c(num = 1L, denom = 3L)) #> [1] \"1/3 (33.3%)\" format_fraction_fixed_dp(x = c(num = 1L, denom = 2L)) #> [1] \"1/2 (50.0%)\"  format_count_fraction_fixed_dp(x = c(2, 0.6667)) #> [1] \"2 (66.7%)\" format_count_fraction_fixed_dp(x = c(2, 0.25)) #> [1] \"2 (25.0%)\""},{"path":"https://insightsengineering.github.io/tern/main/articles/tern_formats.html","id":"value-thresholds","dir":"Articles","previous_headings":"Formatting Function Basics","what":"Value Thresholds","title":"Formatting Functions","text":"Functions set custom values according certain threshold include format_extreme_values(), format_extreme_values_ci(), format_fraction_threshold(). extreme value formats work similarly allow user specify maximum number digits include, large small values given special string value. example: format_fraction_threshold() function allows user specify lower percentage threshold, values instead assigned special string value. example: See documentation function specific details behavior customize .","code":"extreme_format <- format_extreme_values(digits = 2) extreme_format(0.235) #> [1] \"0.23\" extreme_format(0.001) #> [1] \"<0.01\" extreme_format(Inf) #> [1] \">999.99\" fraction_format <- format_fraction_threshold(0.05) fraction_format(x = c(20, 0.1)) #> [1] 10 fraction_format(x = c(2, 0.01)) #> [1] \"<5\""},{"path":"https://insightsengineering.github.io/tern/main/articles/tern_formats.html","id":"creating-custom-formatting-functions","dir":"Articles","previous_headings":"","what":"Creating Custom Formatting Functions","title":"Formatting Functions","text":"table requires customized output displayed using one pre-existing tern formatting functions, may want consider creating new formatting function. creating formatting function important consider aspects listed Formatting Function Customization section . section create custom formatting function derived format_fraction_fixed_dp() function. First take look function detail customize . see numerator value greater 0, fraction percentage displayed. numerator 0, fraction shown. Percent values always display 1 decimal place. create dummy dataset observe output value behavior formatting function applied. Now modify function make custom formatting function, custom_format. want display 3 decimal places percent value, numerator value 0 want display 0 value (without denominator).","code":"# First we will see how the format_fraction_fixed_dp code works and displays the outputs format_fraction_fixed_dp <- function(x, ...) {   attr(x, \"label\") <- NULL   checkmate::assert_vector(x)   checkmate::assert_count(x[\"num\"])   checkmate::assert_count(x[\"denom\"])    result <- if (x[\"num\"] == 0) {     paste0(x[\"num\"], \"/\", x[\"denom\"])   } else {     paste0(       x[\"num\"], \"/\", x[\"denom\"],       \" (\", sprintf(\"%.1f\", round(x[\"num\"] / x[\"denom\"] * 100, 1)), \"%)\"     )   }   return(result) } df2 <- data.frame(   ID = as.character(c(1, 1, 2, 2)),   RANGE = factor(c(\"NORMAL\", \"LOW\", \"HIGH\", \"LOW\")),   BL_RANGE = factor(c(\"NORMAL\", \"NORMAL\", \"HIGH\", \"HIGH\")),   ONTRTFL = c(\"\", \"Y\", \"\", \"Y\"),   stringsAsFactors = FALSE ) %>%   filter(ONTRTFL == \"Y\")  basic_table() %>%   count_abnormal(     var = \"RANGE\",     abnormal = list(low = \"LOW\", high = \"HIGH\"),     variables = list(id = \"ID\", baseline = \"BL_RANGE\"),     exclude_base_abn = FALSE,     .formats = list(fraction = format_fraction_fixed_dp)   ) %>%   build_table(df2) #>          all obs    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> low    2/2 (100.0%) #> high       0/2 custom_format <- function(x, ...) {   attr(x, \"label\") <- NULL   checkmate::assert_vector(x)   checkmate::assert_count(x[\"num\"])   checkmate::assert_count(x[\"denom\"])    result <- if (x[\"num\"] == 0) {     paste0(x[\"num\"]) # We remove the denominator on this line so that only a 0 is displayed   } else {     paste0(       x[\"num\"], \"/\", x[\"denom\"],       \" (\", sprintf(\"%.3f\", round(x[\"num\"] / x[\"denom\"] * 100, 1)), \"%)\" # We include 3 decimal places with %.3f     )   }   return(result) }  basic_table() %>%   count_abnormal(     var = \"RANGE\",     abnormal = list(low = \"LOW\", high = \"HIGH\"),     variables = list(id = \"ID\", baseline = \"BL_RANGE\"),     exclude_base_abn = FALSE,     .formats = list(fraction = custom_format) # Here we implement our new custom_format function   ) %>%   build_table(df2) #>           all obs     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> low    2/2 (100.000%) #> high         0"},{"path":"https://insightsengineering.github.io/tern/main/articles/tern_formats.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Formatting Functions","text":"tern analysis function pre-specified default format functions implement generating output, taken formatters package custom formatting functions stored tern. tern functions differ compared formatters logical statements can used set value-dependent customized formats. like create custom formatting function use tern, sure carefully consider rules want implement handle different input values.","code":""},{"path":"https://insightsengineering.github.io/tern/main/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joe Zhu. Author, maintainer. Daniel Saban√©s Bov√©. Author. Jana Stoilova. Author. Heng Wang. Author. Francois Collin. Author. Adrian Waddell. Author. Pawel Rucki. Author. Chendi Liao. Author. Jennifer Li. Author. F. Hoffmann-La Roche AG. Copyright holder, funder.","code":""},{"path":"https://insightsengineering.github.io/tern/main/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhu J, Saban√©s Bov√© D, Stoilova J, Wang H, Collin F, Waddell , Rucki P, Liao C, Li J (2023). tern: Create Common TLGs Used Clinical Trials. R package version 0.8.1.9011, https://github.com/insightsengineering/tern.","code":"@Manual{,   title = {tern: Create Common TLGs Used in Clinical Trials},   author = {Joe Zhu and Daniel {Saban√©s Bov√©} and Jana Stoilova and Heng Wang and Francois Collin and Adrian Waddell and Pawel Rucki and Chendi Liao and Jennifer Li},   year = {2023},   note = {R package version 0.8.1.9011},   url = {https://github.com/insightsengineering/tern}, }"},{"path":"https://insightsengineering.github.io/tern/main/index.html","id":"tern-","dir":"","previous_headings":"","what":"Create Common TLGs Used in Clinical Trials","title":"Create Common TLGs Used in Clinical Trials","text":"tern R package contains analysis functions create tables graphs used clinical trial reporting. package provides large range functionality, example: forest plots line plots Kaplan-Meier plots ‚Ä¶ logistic regression Cox regression ‚Ä¶ unique patients exposure across patients change baseline parameters ‚Ä¶ Many outputs available added teal applications interactive exploration data. teal modules available teal.modules.clinical package.","code":""},{"path":"https://insightsengineering.github.io/tern/main/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Common TLGs Used in Clinical Trials","text":"recommended create use Github PAT install latest version package. PAT, run following: stable release NEST packages October 2022 also available . See package vignettes browseVignettes(package = \"tern\") usage package.","code":"Sys.setenv(GITHUB_PAT = \"your_access_token_here\") if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"insightsengineering/tern@*release\")"},{"path":"https://insightsengineering.github.io/tern/main/index.html","id":"related","dir":"","previous_headings":"","what":"Related","title":"Create Common TLGs Used in Clinical Trials","text":"rtables - table engine used TLG Catalog - examples clinical trials tables graphs teal.modules.clinical - teal modules interactive data analysis","code":""},{"path":"https://insightsengineering.github.io/tern/main/index.html","id":"acknowledgment","dir":"","previous_headings":"","what":"Acknowledgment","title":"Create Common TLGs Used in Clinical Trials","text":"package result joint efforts many developers stakeholders. like thank everyone contributed far!","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/pull_request_template.html","id":null,"dir":"","previous_headings":"","what":"Pull Request","title":"Pull Request","text":"Fixes #nnn","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Patient Counts with Abnormal Range Values ‚Äî abnormal","title":"Patient Counts with Abnormal Range Values ‚Äî abnormal","text":"Primary analysis variable .var indicates abnormal range result (character factor) additional analysis variables id (character factor) baseline (character factor). direction specified abnormal (e.g. high low) count patients numerator denominator follows: num number patients abnormality recorded treatment. denom number patients least one post-baseline assessment. Note, denominator includes patients might abnormal levels baseline, patients missing baseline. Note, optionally patients abnormality baseline can excluded numerator denominator.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Patient Counts with Abnormal Range Values ‚Äî abnormal","text":"","code":"s_count_abnormal(   df,   .var,   abnormal = list(Low = \"LOW\", High = \"HIGH\"),   variables = list(id = \"USUBJID\", baseline = \"BNRIND\"),   exclude_base_abn = FALSE )  a_count_abnormal(   df,   .var,   abnormal = list(Low = \"LOW\", High = \"HIGH\"),   variables = list(id = \"USUBJID\", baseline = \"BNRIND\"),   exclude_base_abn = FALSE )  count_abnormal(   lyt,   var,   ...,   table_names = var,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Patient Counts with Abnormal Range Values ‚Äî abnormal","text":"df (data.frame) data set containing analysis variables. .var, var (string) single variable name passed rtables requested statistics function. abnormal (named list) identifying abnormal range level(s) var. Default list(Low = \"LOW\", High = \"HIGH\") can also group different levels name list, example, abnormal = list(Low = c(\"LOW\", \"LOW LOW\"), High = c(\"HIGH\", \"HIGH HIGH\")) variables (named list string) list additional analysis variables. exclude_base_abn (flag) whether exclude subjects baseline abnormality numerator denominator. lyt (layout) input layout analyses added . ... additional arguments lower level functions. table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Patient Counts with Abnormal Range Values ‚Äî abnormal","text":"s_count_abnormal() returns statistic fraction vector num denom counts patients. a_count_abnormal() returns corresponding list formatted rtables::CellValue(). count_abnormal() can used multiple abnormal levels modifies layout.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Patient Counts with Abnormal Range Values ‚Äî abnormal","text":"Note df filtered include post-baseline records.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Patient Counts with Abnormal Range Values ‚Äî abnormal","text":"s_count_abnormal(): Statistics function counts patients abnormal range values single abnormal level. a_count_abnormal(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). count_abnormal(): Layout creating function can used creating tables, can take statistics function arguments additional format arguments (see ). Note works single variable multiple abnormal levels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Patient Counts with Abnormal Range Values ‚Äî abnormal","text":"","code":"library(dplyr) #>  #> Attaching package: ‚Äòdplyr‚Äô #> The following objects are masked from ‚Äòpackage:stats‚Äô: #>  #>     filter, lag #> The following objects are masked from ‚Äòpackage:base‚Äô: #>  #>     intersect, setdiff, setequal, union  df <- data.frame(   USUBJID = as.character(c(1, 1, 2, 2)),   ANRIND = factor(c(\"NORMAL\", \"LOW\", \"HIGH\", \"HIGH\")),   BNRIND = factor(c(\"NORMAL\", \"NORMAL\", \"HIGH\", \"HIGH\")),   ONTRTFL = c(\"\", \"Y\", \"\", \"Y\"),   stringsAsFactors = FALSE )  # Select only post-baseline records. df <- df %>%   filter(ONTRTFL == \"Y\")  # Internal function - s_count_abnormal if (FALSE) { # For abnormal level \"HIGH\" we get the following counts. s_count_abnormal(df, .var = \"ANRIND\", abnormal = list(high = \"HIGH\", low = \"LOW\"))  # Optionally exclude patients with abnormality at baseline. s_count_abnormal(   df,   .var = \"ANRIND\",   abnormal = list(high = \"HIGH\", low = \"LOW\"),   exclude_base_abn = TRUE ) }  # Internal function - a_count_abnormal if (FALSE) { # Use the Formatted Analysis function for `analyze()`. a_fun <- make_afun(a_count_abnormal, .ungroup_stats = \"fraction\") a_fun(df, .var = \"ANRIND\", abnormal = list(low = \"LOW\", high = \"HIGH\")) }  # Layout creating function. basic_table() %>%   count_abnormal(var = \"ANRIND\", abnormal = list(high = \"HIGH\", low = \"LOW\")) %>%   build_table(df) #>         all obs  #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> high   1/2 (50%) #> low    1/2 (50%)  # Passing of statistics function and formatting arguments. df2 <- data.frame(   ID = as.character(c(1, 1, 2, 2)),   RANGE = factor(c(\"NORMAL\", \"LOW\", \"HIGH\", \"HIGH\")),   BL_RANGE = factor(c(\"NORMAL\", \"NORMAL\", \"HIGH\", \"HIGH\")),   ONTRTFL = c(\"\", \"Y\", \"\", \"Y\"),   stringsAsFactors = FALSE )  # Select only post-baseline records. df2 <- df2 %>%   filter(ONTRTFL == \"Y\")  basic_table() %>%   count_abnormal(     var = \"RANGE\",     abnormal = list(low = \"LOW\", high = \"HIGH\"),     variables = list(id = \"ID\", baseline = \"BL_RANGE\")   ) %>%   build_table(df2) #>         all obs  #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> low    1/2 (50%) #> high   1/2 (50%)"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_baseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Patient Counts with Abnormal Range Values by Baseline Status ‚Äî abnormal_by_baseline","text":"","code":"s_count_abnormal_by_baseline(   df,   .var,   abnormal,   na_level = \"<Missing>\",   variables = list(id = \"USUBJID\", baseline = \"BNRIND\") )  a_count_abnormal_by_baseline(   df,   .var,   abnormal,   na_level = \"<Missing>\",   variables = list(id = \"USUBJID\", baseline = \"BNRIND\") )  count_abnormal_by_baseline(   lyt,   var,   abnormal,   ...,   table_names = abnormal,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_baseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Patient Counts with Abnormal Range Values by Baseline Status ‚Äî abnormal_by_baseline","text":"df (data.frame) data set containing analysis variables. .var, var (string) single variable name passed rtables requested statistics function. abnormal (character) identifying abnormal range level(s) .var. na_level (string) explicit na_level argument used pre-processing steps (maybe df_explicit_na()). default \"<Missing>\". variables (named list string) list additional analysis variables. lyt (layout) input layout analyses added . ... additional arguments lower level functions. table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_baseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Patient Counts with Abnormal Range Values by Baseline Status ‚Äî abnormal_by_baseline","text":"a_count_abnormal_by_baseline() returns corresponding list formatted rtables::CellValue().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_baseline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Patient Counts with Abnormal Range Values by Baseline Status ‚Äî abnormal_by_baseline","text":"Note df filtered include post-baseline records. Primary analysis variable .var indicates abnormal range result (character factor), additional analysis variables id (character factor) baseline (character factor). direction specified abnormal (e.g. high low) condition baseline range result count patients numerator denominator follows: <Abnormal> denom: number patients without abnormality baseline (excluding missing baseline) num:  number patients denom also least one abnormality post-baseline <Abnormal> denom: number patients abnormality baseline num: number patients denom also least one abnormality post-baseline Total denom: number patients least one valid measurement post-baseline num: number patients denom also least one abnormality post-baseline","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_baseline.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Patient Counts with Abnormal Range Values by Baseline Status ‚Äî abnormal_by_baseline","text":"s_count_abnormal_by_baseline(): single abnormal level, produce statistic fraction named list 3 elements: not_abnormal, abnormal total. element contains vector num denom counts patients. Please note baseline variable analysis variable contains NA, expected NA conveyed na_level appropriately beforehand df_explicit_na() explicit_na(). a_count_abnormal_by_baseline(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). count_abnormal_by_baseline(): Layout creating function can used creating tables, can take statistics function arguments additional format arguments (see ).","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_baseline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Patient Counts with Abnormal Range Values by Baseline Status ‚Äî abnormal_by_baseline","text":"","code":"df <- data.frame(   USUBJID = as.character(c(1:6)),   ANRIND = factor(c(rep(\"LOW\", 4), \"NORMAL\", \"HIGH\")),   BNRIND = factor(c(\"LOW\", \"NORMAL\", \"HIGH\", NA, \"LOW\", \"NORMAL\")) ) df <- df_explicit_na(df)  # Internal function - s_count_abnormal_by_baseline if (FALSE) { # Just for one abnormal level. s_count_abnormal_by_baseline(df, .var = \"ANRIND\", abnormal = \"HIGH\") }  # Internal function - a_count_abnormal_by_baseline if (FALSE) { # Use the Formatted Analysis function for `analyze()`. We need to ungroup `fraction` first # so that the `rtables` formatting function `format_fraction()` can be applied correctly. afun <- make_afun(a_count_abnormal_by_baseline, .ungroup_stats = \"fraction\") afun(df, .var = \"ANRIND\", abnormal = \"LOW\") }  # Layout creating function. basic_table() %>%   count_abnormal_by_baseline(var = \"ANRIND\", abnormal = c(High = \"HIGH\")) %>%   build_table(df) #>                                all obs   #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> High                                     #>   Not high baseline status    1/4 (25%)  #>   High baseline status           0/1     #>   Total                      1/6 (16.7%)  # Passing of statistics function and formatting arguments. df2 <- data.frame(   ID = as.character(c(1, 2, 3, 4)),   RANGE = factor(c(\"NORMAL\", \"LOW\", \"HIGH\", \"HIGH\")),   BLRANGE = factor(c(\"LOW\", \"HIGH\", \"HIGH\", \"NORMAL\")) )  basic_table() %>%   count_abnormal_by_baseline(     var = \"RANGE\",     abnormal = c(Low = \"LOW\"),     variables = list(id = \"ID\", baseline = \"BLRANGE\"),     .formats = c(fraction = \"xx / xx\"),     .indent_mods = c(fraction = 2L)   ) %>%   build_table(df2) #>                                 all obs #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Low                                     #>       Not low baseline status    1 / 3  #>       Low baseline status        0 / 1  #>       Total                      1 / 4"},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_marked.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Patients with Marked Laboratory Abnormalities ‚Äî abnormal_by_marked","title":"Count Patients with Marked Laboratory Abnormalities ‚Äî abnormal_by_marked","text":"Primary analysis variable .var indicates whether single, replicated last marked laboratory abnormality observed (factor). Additional analysis variables id (character factor) direction indicating direction abnormality (factor). Denominator number patients least one valid measurement Single, last Last replicated: Numerator number patients Single, last Last replicated levels, respectively. : Numerator number patients either single replicated marked abnormalities.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_marked.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Patients with Marked Laboratory Abnormalities ‚Äî abnormal_by_marked","text":"","code":"s_count_abnormal_by_marked(   df,   .var = \"AVALCAT1\",   .spl_context,   category = list(single = \"SINGLE\", last_replicated = c(\"LAST\", \"REPLICATED\")),   variables = list(id = \"USUBJID\", param = \"PARAM\", direction = \"abn_dir\") )  a_count_abnormal_by_marked(   df,   .var = \"AVALCAT1\",   .spl_context,   category = list(single = \"SINGLE\", last_replicated = c(\"LAST\", \"REPLICATED\")),   variables = list(id = \"USUBJID\", param = \"PARAM\", direction = \"abn_dir\") )  count_abnormal_by_marked(   lyt,   var,   ...,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_marked.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Patients with Marked Laboratory Abnormalities ‚Äî abnormal_by_marked","text":"df (data.frame) data set containing analysis variables. .var, var (string) single variable name passed rtables requested statistics function. .spl_context (data.frame) gives information ancestor split states passed rtables. category (list) different marked category names single last replicated. variables (named list string) list additional analysis variables. lyt (layout) input layout analyses added . ... additional arguments lower level functions. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_marked.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Patients with Marked Laboratory Abnormalities ‚Äî abnormal_by_marked","text":"s_count_abnormal_by_marked() single statistic count_fraction Single, last, Last replicated results. a_count_abnormal_by_marked() returns corresponding list formatted rtables::CellValue().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_marked.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count Patients with Marked Laboratory Abnormalities ‚Äî abnormal_by_marked","text":"Note Single, last Last replicated levels mutually exclusive. patient abnormalities meet Single, last Last replicated criteria, patient counted Last replicated category.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_marked.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Count Patients with Marked Laboratory Abnormalities ‚Äî abnormal_by_marked","text":"s_count_abnormal_by_marked(): Statistics function returns counts fractions patients Single, last, Last replicated marked laboratory abnormalities single abnormal level. a_count_abnormal_by_marked(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). count_abnormal_by_marked(): Layout creating function can used creating tables, can take statistics function arguments additional format arguments (see ).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_marked.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Patients with Marked Laboratory Abnormalities ‚Äî abnormal_by_marked","text":"","code":"library(dplyr)  df <- data.frame(   USUBJID = as.character(c(rep(1, 5), rep(2, 5), rep(1, 5), rep(2, 5))),   ARMCD = factor(c(rep(\"ARM A\", 5), rep(\"ARM B\", 5), rep(\"ARM A\", 5), rep(\"ARM B\", 5))),   ANRIND = factor(c(     \"NORMAL\", \"HIGH\", \"HIGH\", \"HIGH HIGH\", \"HIGH\",     \"HIGH\", \"HIGH\", \"HIGH HIGH\", \"NORMAL\", \"HIGH HIGH\", \"NORMAL\", \"LOW\", \"LOW\", \"LOW LOW\", \"LOW\",     \"LOW\", \"LOW\", \"LOW LOW\", \"NORMAL\", \"LOW LOW\"   )),   ONTRTFL = rep(c(\"\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\"), 2),   PARAMCD = factor(c(rep(\"CRP\", 10), rep(\"ALT\", 10))),   AVALCAT1 = factor(rep(c(\"\", \"\", \"\", \"SINGLE\", \"REPLICATED\", \"\", \"\", \"LAST\", \"\", \"SINGLE\"), 2)),   stringsAsFactors = FALSE )  df <- df %>%   mutate(abn_dir = factor(     case_when(       ANRIND == \"LOW LOW\" ~ \"Low\",       ANRIND == \"HIGH HIGH\" ~ \"High\",       TRUE ~ \"\"     ),     levels = c(\"Low\", \"High\")   ))  # Select only post-baseline records. df <- df %>% filter(ONTRTFL == \"Y\") df_crp <- df %>%   filter(PARAMCD == \"CRP\") %>%   droplevels() full_parent_df <- list(df_crp, \"not_needed\") cur_col_subset <- list(rep(TRUE, nrow(df_crp)), \"not_needed\") spl_context <- data.frame(   split = c(\"PARAMCD\", \"GRADE_DIR\"),   full_parent_df = I(full_parent_df),   cur_col_subset = I(cur_col_subset) ) # Internal function - s_count_abnormal_by_marked if (FALSE) { s_count_abnormal_by_marked(   df = df_crp %>% filter(abn_dir == \"High\"),   .spl_context = spl_context,   .var = \"AVALCAT1\",   variables = list(id = \"USUBJID\", param = \"PARAMCD\", direction = \"abn_dir\") ) }  # Internal function - a_count_abnormal_by_marked if (FALSE) { # Use the Formatted Analysis function for `analyze()`. We need to ungroup `count_fraction` first # so that the `rtables` formatting function `format_count_fraction()` can be applied correctly. afun <- make_afun(a_count_abnormal_by_marked, .ungroup_stats = \"count_fraction\") afun(   df = df_crp %>% filter(abn_dir == \"High\"),   .spl_context = spl_context,   variables = list(id = \"USUBJID\", param = \"PARAMCD\", direction = \"abn_dir\") ) }  map <- unique(   df[df$abn_dir %in% c(\"Low\", \"High\") & df$AVALCAT1 != \"\", c(\"PARAMCD\", \"abn_dir\")] ) %>%   lapply(as.character) %>%   as.data.frame() %>%   arrange(PARAMCD, abn_dir)  basic_table() %>%   split_cols_by(\"ARMCD\") %>%   split_rows_by(\"PARAMCD\") %>%   summarize_num_patients(     var = \"USUBJID\",     .stats = \"unique_count\"   ) %>%   split_rows_by(     \"abn_dir\",     split_fun = trim_levels_to_map(map)   ) %>%   count_abnormal_by_marked(     var = \"AVALCAT1\",     variables = list(       id = \"USUBJID\",       param = \"PARAMCD\",       direction = \"abn_dir\"     )   ) %>%   build_table(df = df) #>                           ARM A      ARM B   #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> ALT (n)                     1          1     #>   Low                                        #>     Single, not last     1 (100%)      0     #>     Last or replicated      0       1 (100%) #>     Any Abnormality      1 (100%)   1 (100%) #> CRP (n)                     1          1     #>   High                                       #>     Single, not last     1 (100%)      0     #>     Last or replicated      0       1 (100%) #>     Any Abnormality      1 (100%)   1 (100%)   basic_table() %>%   split_cols_by(\"ARMCD\") %>%   split_rows_by(\"PARAMCD\") %>%   summarize_num_patients(     var = \"USUBJID\",     .stats = \"unique_count\"   ) %>%   split_rows_by(     \"abn_dir\",     split_fun = trim_levels_in_group(\"abn_dir\")   ) %>%   count_abnormal_by_marked(     var = \"AVALCAT1\",     variables = list(       id = \"USUBJID\",       param = \"PARAMCD\",       direction = \"abn_dir\"     )   ) %>%   build_table(df = df) #>                           ARM A      ARM B   #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> ALT (n)                     1          1     #>   Low                                        #>     Single, not last     1 (100%)      0     #>     Last or replicated      0       1 (100%) #>     Any Abnormality      1 (100%)   1 (100%) #> CRP (n)                     1          1     #>   High                                       #>     Single, not last     1 (100%)      0     #>     Last or replicated      0       1 (100%) #>     Any Abnormality      1 (100%)   1 (100%)"},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_worst_grade.html","id":null,"dir":"Reference","previous_headings":"","what":"Patient Counts with the Most Extreme Post-baseline Toxicity Grade per Direction of Abnormality ‚Äî abnormal_by_worst_grade","title":"Patient Counts with the Most Extreme Post-baseline Toxicity Grade per Direction of Abnormality ‚Äî abnormal_by_worst_grade","text":"Primary analysis variable .var indicates toxicity grade (factor), additional analysis variables id (character factor), param (factor) grade_dir (factor). pre-processing steps crucial using function. certain direction (e.g. high low) function counts patients denominator number patients least one valid measurement treatment, patients numerator follows: 1 4: Numerator number patients worst grades 1-4 respectively; : Numerator number patients least one abnormality, means grade different 0.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_worst_grade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Patient Counts with the Most Extreme Post-baseline Toxicity Grade per Direction of Abnormality ‚Äî abnormal_by_worst_grade","text":"","code":"s_count_abnormal_by_worst_grade(   df,   .var = \"GRADE_ANL\",   .spl_context,   variables = list(id = \"USUBJID\", param = \"PARAM\", grade_dir = \"GRADE_DIR\") )  a_count_abnormal_by_worst_grade(   df,   .var = \"GRADE_ANL\",   .spl_context,   variables = list(id = \"USUBJID\", param = \"PARAM\", grade_dir = \"GRADE_DIR\") )  count_abnormal_by_worst_grade(   lyt,   var,   ...,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_worst_grade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Patient Counts with the Most Extreme Post-baseline Toxicity Grade per Direction of Abnormality ‚Äî abnormal_by_worst_grade","text":"df (data.frame) data set containing analysis variables. .var, var (string) single variable name passed rtables requested statistics function. .spl_context (data.frame) gives information ancestor split states passed rtables. variables (named list string) list additional analysis variables. lyt (layout) input layout analyses added . ... additional arguments lower level functions. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_worst_grade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Patient Counts with the Most Extreme Post-baseline Toxicity Grade per Direction of Abnormality ‚Äî abnormal_by_worst_grade","text":"s_count_abnormal_by_worst_grade() single statistic count_fraction grade 1 4 \"\" results. a_count_abnormal_by_worst_grade() returns corresponding list formatted rtables::CellValue().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_worst_grade.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Patient Counts with the Most Extreme Post-baseline Toxicity Grade per Direction of Abnormality ‚Äî abnormal_by_worst_grade","text":"pre-processing steps crucial using function. standard lab grade variable ATOXGR, derive following two variables: grade direction variable (e.g. GRADE_DIR) required order obtain correct denominators building layout used define row splitting. toxicity grade variable (e.g. GRADE_ANL) negative values ATOXGR replaced absolute values. Prior tabulation, df must filtered include post-baseline records worst grade flags.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_worst_grade.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Patient Counts with the Most Extreme Post-baseline Toxicity Grade per Direction of Abnormality ‚Äî abnormal_by_worst_grade","text":"s_count_abnormal_by_worst_grade(): Statistics function counts patients worst grade, consisting counts percentages patients worst grade 1 4, non-zero grade. a_count_abnormal_by_worst_grade(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). count_abnormal_by_worst_grade(): Layout creating function can used creating tables, can take statistics function arguments additional format arguments (see ).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_worst_grade.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Patient Counts with the Most Extreme Post-baseline Toxicity Grade per Direction of Abnormality ‚Äî abnormal_by_worst_grade","text":"","code":"library(dplyr) library(forcats) adlb <- tern_ex_adlb  # Data is modified in order to have some parameters with grades only in one direction # and simulate the real data. adlb$ATOXGR[adlb$PARAMCD == \"ALT\" & adlb$ATOXGR %in% c(\"1\", \"2\", \"3\", \"4\")] <- \"-1\" adlb$ANRIND[adlb$PARAMCD == \"ALT\" & adlb$ANRIND == \"HIGH\"] <- \"LOW\" adlb$WGRHIFL[adlb$PARAMCD == \"ALT\"] <- \"\"  adlb$ATOXGR[adlb$PARAMCD == \"IGA\" & adlb$ATOXGR %in% c(\"-1\", \"-2\", \"-3\", \"-4\")] <- \"1\" adlb$ANRIND[adlb$PARAMCD == \"IGA\" & adlb$ANRIND == \"LOW\"] <- \"HIGH\" adlb$WGRLOFL[adlb$PARAMCD == \"IGA\"] <- \"\"  # Here starts the real pre-processing. adlb_f <- adlb %>%   filter(!AVISIT %in% c(\"SCREENING\", \"BASELINE\")) %>%   mutate(     GRADE_DIR = factor(       case_when(         ATOXGR %in% c(\"-1\", \"-2\", \"-3\", \"-4\") ~ \"LOW\",         ATOXGR == \"0\" ~ \"ZERO\",         ATOXGR %in% c(\"1\", \"2\", \"3\", \"4\") ~ \"HIGH\"       ),       levels = c(\"LOW\", \"ZERO\", \"HIGH\")     ),     GRADE_ANL = fct_relevel(       fct_recode(ATOXGR, `1` = \"-1\", `2` = \"-2\", `3` = \"-3\", `4` = \"-4\"),       c(\"0\", \"1\", \"2\", \"3\", \"4\")     )   ) %>%   filter(WGRLOFL == \"Y\" | WGRHIFL == \"Y\") %>%   droplevels()  adlb_f_alt <- adlb_f %>%   filter(PARAMCD == \"ALT\") %>%   droplevels() full_parent_df <- list(adlb_f_alt, \"not_needed\") cur_col_subset <- list(rep(TRUE, nrow(adlb_f_alt)), \"not_needed\")  # This mimics a split structure on PARAM and GRADE_DIR for a total column spl_context <- data.frame(   split = c(\"PARAM\", \"GRADE_DIR\"),   full_parent_df = I(full_parent_df),   cur_col_subset = I(cur_col_subset) )  # Internal function - s_count_abnormal_by_worst_grade if (FALSE) { s_count_abnormal_by_worst_grade(   df = adlb_f_alt,   .spl_context = spl_context,   .var = \"GRADE_ANL\" ) }  # Internal function - a_count_abnormal_by_worst_grade if (FALSE) { # Use the Formatted Analysis function for `analyze()`. We need to ungroup `count_fraction` first # so that the `rtables` formatting function `format_count_fraction()` can be applied correctly. afun <- make_afun(a_count_abnormal_by_worst_grade, .ungroup_stats = \"count_fraction\") afun(df = adlb_f_alt, .spl_context = spl_context) }  # Map excludes records without abnormal grade since they should not be displayed # in the table. map <- unique(adlb_f[adlb_f$GRADE_DIR != \"ZERO\", c(\"PARAM\", \"GRADE_DIR\", \"GRADE_ANL\")]) %>%   lapply(as.character) %>%   as.data.frame() %>%   arrange(PARAM, desc(GRADE_DIR), GRADE_ANL)  basic_table() %>%   split_cols_by(\"ARMCD\") %>%   split_rows_by(\"PARAM\") %>%   split_rows_by(\"GRADE_DIR\", split_fun = trim_levels_to_map(map)) %>%   count_abnormal_by_worst_grade(     var = \"GRADE_ANL\",     variables = list(id = \"USUBJID\", param = \"PARAM\", grade_dir = \"GRADE_DIR\")   ) %>%   build_table(df = adlb_f) #>                                          ARM A        ARM B        ARM C    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Alanine Aminotransferase Measurement                                        #>   LOW                                                                       #>     1                                  12 (17.4%)    5 (6.8%)    8 (13.8%)  #>     2                                   9 (13%)     13 (17.8%)   6 (10.3%)  #>     3                                   6 (8.7%)     4 (5.5%)    6 (10.3%)  #>     4                                  7 (10.1%)     7 (9.6%)    6 (10.3%)  #>     Any                                34 (49.3%)   29 (39.7%)   26 (44.8%) #> C-Reactive Protein Measurement                                              #>   LOW                                                                       #>     1                                  11 (15.9%)   12 (16.4%)   7 (12.1%)  #>     2                                  8 (11.6%)     2 (2.7%)    6 (10.3%)  #>     3                                   4 (5.8%)    9 (12.3%)    6 (10.3%)  #>     4                                  7 (10.1%)     6 (8.2%)     4 (6.9%)  #>     Any                                30 (43.5%)   29 (39.7%)   23 (39.7%) #>   HIGH                                                                      #>     1                                  8 (11.6%)    11 (15.1%)    2 (3.4%)  #>     2                                   9 (13%)     11 (15.1%)    11 (19%)  #>     3                                  14 (20.3%)   10 (13.7%)    5 (8.6%)  #>     4                                   2 (2.9%)     4 (5.5%)    6 (10.3%)  #>     Any                                33 (47.8%)   36 (49.3%)   24 (41.4%) #> Immunoglobulin A Measurement                                                #>   HIGH                                                                      #>     1                                  7 (10.1%)     7 (9.6%)    6 (10.3%)  #>     2                                  8 (11.6%)     6 (8.2%)    8 (13.8%)  #>     3                                  7 (10.1%)     5 (6.8%)    9 (15.5%)  #>     4                                   6 (8.7%)     2 (2.7%)     3 (5.2%)  #>     Any                                28 (40.6%)   20 (27.4%)   26 (44.8%)"},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_worst_grade_worsen.html","id":null,"dir":"Reference","previous_headings":"","what":"Patient Counts for Laboratory Events (Worsen From Baseline) by Highest Grade Post-Baseline ‚Äî abnormal_by_worst_grade_worsen","title":"Patient Counts for Laboratory Events (Worsen From Baseline) by Highest Grade Post-Baseline ‚Äî abnormal_by_worst_grade_worsen","text":"Patient count fraction laboratory events (worsen baseline) shift table.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_worst_grade_worsen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Patient Counts for Laboratory Events (Worsen From Baseline) by Highest Grade Post-Baseline ‚Äî abnormal_by_worst_grade_worsen","text":"","code":"s_count_abnormal_lab_worsen_by_baseline(   df,   .var = \"ATOXGR\",   variables = list(id = \"USUBJID\", baseline_var = \"BTOXGR\", direction_var = \"GRADDR\") )  a_count_abnormal_lab_worsen_by_baseline(   df,   .var = \"ATOXGR\",   variables = list(id = \"USUBJID\", baseline_var = \"BTOXGR\", direction_var = \"GRADDR\") )  count_abnormal_lab_worsen_by_baseline(   lyt,   var,   ...,   table_names = NULL,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_worst_grade_worsen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Patient Counts for Laboratory Events (Worsen From Baseline) by Highest Grade Post-Baseline ‚Äî abnormal_by_worst_grade_worsen","text":"df (data.frame) data set containing analysis variables. .var, var (string) single variable name passed rtables requested statistics function. variables (named list string) list additional analysis variables including: id (string) subject variable name. baseline_var (string) name data column containing baseline toxicity variable. direction_var (string) see direction_var details. lyt (layout) input layout analyses added . ... additional arguments lower level functions. table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_worst_grade_worsen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Patient Counts for Laboratory Events (Worsen From Baseline) by Highest Grade Post-Baseline ‚Äî abnormal_by_worst_grade_worsen","text":"s_count_abnormal_lab_worsen_by_baseline() returns counts fraction patients whose worst post-baseline lab grades worse baseline grades, post-baseline worst grades \"1\", \"2\", \"3\", \"4\" \"\". a_count_abnormal_lab_worsen_by_baseline() returns corresponding list formatted rtables::CellValue().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_worst_grade_worsen.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Patient Counts for Laboratory Events (Worsen From Baseline) by Highest Grade Post-Baseline ‚Äî abnormal_by_worst_grade_worsen","text":"s_count_abnormal_lab_worsen_by_baseline(): Statistics function calculates counts fraction patients whose worst post-baseline lab grades worse baseline grades, post-baseline worst grades \"1\", \"2\", \"3\", \"4\" \"\". a_count_abnormal_lab_worsen_by_baseline(): count_abnormal_lab_worsen_by_baseline(): Layout creating function can used creating tables, can take statistics function arguments additional format arguments (see ).","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/abnormal_by_worst_grade_worsen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Patient Counts for Laboratory Events (Worsen From Baseline) by Highest Grade Post-Baseline ‚Äî abnormal_by_worst_grade_worsen","text":"","code":"library(dplyr)  # The direction variable, GRADDR, is based on metadata adlb <- tern_ex_adlb %>%   mutate(     GRADDR = case_when(       PARAMCD == \"ALT\" ~ \"B\",       PARAMCD == \"CRP\" ~ \"L\",       PARAMCD == \"IGA\" ~ \"H\"     )   ) %>%   filter(SAFFL == \"Y\" & ONTRTFL == \"Y\" & GRADDR != \"\")  df <- h_adlb_worsen(   adlb,   worst_flag_low = c(\"WGRLOFL\" = \"Y\"),   worst_flag_high = c(\"WGRHIFL\" = \"Y\"),   direction_var = \"GRADDR\" ) # Internal function - s_count_abnormal_lab_worsen_by_baseline if (FALSE) { # Patients with worsening lab grade for CRP in the direction of low s_count_abnormal_lab_worsen_by_baseline(   df = df %>% filter(ARMCD == \"ARM A\" & PARAMCD == \"CRP\"),   .var = \"ATOXGR\",   variables = list(     id = \"USUBJID\",     baseline_var = \"BTOXGR\",     direction_var = \"GRADDR\"   ) ) }  # Internal function - a_count_abnormal_lab_worsen_by_baseline if (FALSE) { a_count_abnormal_lab_worsen_by_baseline(   df = df %>% filter(ARMCD == \"ARM A\" & PARAMCD == \"CRP\"),   .var = \"ATOXGR\",   variables = list(id = \"USUBJID\", baseline_var = \"BTOXGR\", direction_var = \"GRADDR\") ) }  basic_table() %>%   split_cols_by(\"ARMCD\") %>%   add_colcounts() %>%   split_rows_by(\"PARAMCD\") %>%   split_rows_by(\"GRADDR\") %>%   count_abnormal_lab_worsen_by_baseline(     var = \"ATOXGR\",     variables = list(       id = \"USUBJID\",       baseline_var = \"BTOXGR\",       direction_var = \"GRADDR\"     )   ) %>%   append_topleft(\"Direction of Abnormality\") %>%   build_table(df = df, alt_counts_df = tern_ex_adsl) #> Direction of Abnormality       ARM A           ARM B           ARM C     #>                               (N=69)          (N=73)          (N=58)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> IGA                                                                      #>   High                                                                   #>     1                       6/63 (9.5%)     6/64 (9.4%)      4/50 (8%)   #>     2                      8/64 (12.5%)     5/67 (7.5%)    8/53 (15.1%)  #>     3                      7/66 (10.6%)     5/68 (7.4%)    9/57 (15.8%)  #>     4                       6/68 (8.8%)     2/72 (2.8%)     3/58 (5.2%)  #>     Any                    27/68 (39.7%)    18/72 (25%)    24/58 (41.4%) #> ALT                                                                      #>   High                                                                   #>     1                      7/63 (11.1%)     6/62 (9.7%)     2/48 (4.2%)  #>     2                       12/63 (19%)      4/67 (6%)      11/50 (22%)  #>     3                       4/65 (6.2%)    11/71 (15.5%)   7/56 (12.5%)  #>     4                       1/67 (1.5%)    8/71 (11.3%)      4/57 (7%)   #>     Any                    24/67 (35.8%)   29/71 (40.8%)   24/57 (42.1%) #>   Low                                                                    #>     1                      12/67 (17.9%)    4/66 (6.1%)    7/52 (13.5%)  #>     2                      9/68 (13.2%)    12/69 (17.4%)   6/55 (10.9%)  #>     3                       6/69 (8.7%)     4/71 (5.6%)     5/56 (8.9%)  #>     4                      7/69 (10.1%)     7/73 (9.6%)    6/58 (10.3%)  #>     Any                    34/69 (49.3%)    27/73 (37%)    24/58 (41.4%) #> CRP                                                                      #>   Low                                                                    #>     1                      11/66 (16.7%)   10/67 (14.9%)    4/47 (8.5%)  #>     2                      8/66 (12.1%)     1/70 (1.4%)     6/50 (12%)   #>     3                       4/68 (5.9%)    9/70 (12.9%)     5/53 (9.4%)  #>     4                      7/69 (10.1%)     6/72 (8.3%)     4/55 (7.3%)  #>     Any                    30/69 (43.5%)   26/72 (36.1%)   19/55 (34.5%)"},{"path":"https://insightsengineering.github.io/tern/main/reference/add_rowcounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout Creating Function to Add Row Total Counts ‚Äî add_rowcounts","title":"Layout Creating Function to Add Row Total Counts ‚Äî add_rowcounts","text":"works analogously rtables::add_colcounts() rows.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/add_rowcounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout Creating Function to Add Row Total Counts ‚Äî add_rowcounts","text":"","code":"add_rowcounts(lyt)"},{"path":"https://insightsengineering.github.io/tern/main/reference/add_rowcounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout Creating Function to Add Row Total Counts ‚Äî add_rowcounts","text":"lyt (layout) input layout analyses added .","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/add_rowcounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layout Creating Function to Add Row Total Counts ‚Äî add_rowcounts","text":"modified layout latest row split labels now row-wise total counts (.e. without column based subsetting) attached parentheses. Row count values contained row count rows displayed considered zero rows default pruning.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/add_rowcounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layout Creating Function to Add Row Total Counts ‚Äî add_rowcounts","text":"","code":"basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   split_rows_by(\"RACE\", split_fun = drop_split_levels) %>%   add_rowcounts() %>%   analyze(\"AGE\", afun = list_wrap_x(summary), format = \"xx.xx\") %>%   build_table(DM) #>                                    A: Drug X   B: Placebo   C: Combination #>                                     (N=121)     (N=106)        (N=129)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> ASIAN (N=231)                                                              #>   Min.                               20.00       21.00          22.00      #>   1st Qu.                            29.00       28.00          30.00      #>   Median                             33.00       32.50          33.50      #>   Mean                               34.20       32.68          34.63      #>   3rd Qu.                            38.50       36.00          38.00      #>   Max.                               58.00       55.00          53.00      #> BLACK OR AFRICAN AMERICAN (N=79)                                           #>   Min.                               23.00       21.00          24.00      #>   1st Qu.                            29.00       28.75          29.00      #>   Median                             33.00       30.00          32.00      #>   Mean                               34.68       31.71          34.00      #>   3rd Qu.                            37.25       36.25          39.00      #>   Max.                               60.00       42.00          51.00      #> WHITE (N=46)                                                               #>   Min.                               30.00       25.00          28.00      #>   1st Qu.                            38.00       31.00          30.25      #>   Median                             40.50       37.50          35.00      #>   Mean                               39.36       36.93          35.11      #>   3rd Qu.                            43.50       40.00          37.50      #>   Max.                               47.00       55.00          47.00"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/aesi_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Labels for Adverse Event Baskets ‚Äî aesi_label","text":"","code":"aesi_label(aesi, scope = NULL)"},{"path":"https://insightsengineering.github.io/tern/main/reference/aesi_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Labels for Adverse Event Baskets ‚Äî aesi_label","text":"aesi (character) standardized MedDRA query name (e.g. SMQzzNAM) customized query name (e.g. CQzzNAM). scope (character) scope query (e.g. SMQzzSC).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/aesi_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Labels for Adverse Event Baskets ‚Äî aesi_label","text":"string standard label AE basket.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/aesi_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Labels for Adverse Event Baskets ‚Äî aesi_label","text":"","code":"adae <- tern_ex_adae  # Standardized query label includes scope. aesi_label(adae$SMQ01NAM, scope = adae$SMQ01SC) #> [1] \"C.1.1.1.3/B.2.2.3.1 aesi (BROAD)\"  # Customized query label. aesi_label(adae$CQ01NAM) #> [1] \"D.2.1.5.3/A.1.1.1.1 aesi\""},{"path":"https://insightsengineering.github.io/tern/main/reference/afun_selected_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Selected Statistics Names ‚Äî afun_selected_stats","title":"Get Selected Statistics Names ‚Äî afun_selected_stats","text":"Helper function used creating afun.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/afun_selected_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Selected Statistics Names ‚Äî afun_selected_stats","text":"","code":"afun_selected_stats(.stats, all_stats)"},{"path":"https://insightsengineering.github.io/tern/main/reference/afun_selected_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Selected Statistics Names ‚Äî afun_selected_stats","text":".stats (vector NULL) input layout creating function. Note NULL means context default statistics used. all_stats (character) statistics can selected potentially.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/afun_selected_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Selected Statistics Names ‚Äî afun_selected_stats","text":"Character vector selected statistics.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/analyze_vars_in_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary numeric variables in columns ‚Äî analyze_vars_in_cols","title":"Summary numeric variables in columns ‚Äî analyze_vars_in_cols","text":"function can used produce summary tables PK datasets relevant statistic columns instead rows.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/analyze_vars_in_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary numeric variables in columns ‚Äî analyze_vars_in_cols","text":"","code":"analyze_vars_in_cols(   lyt,   vars,   ...,   .stats = c(\"n\", \"mean\", \"sd\", \"se\", \"cv\", \"geom_cv\"),   .labels = c(n = \"n\", mean = \"Mean\", sd = \"SD\", se = \"SE\", cv = \"CV (%)\", geom_cv =     \"CV % Geometric Mean\"),   labelstr = \" \",   nested = TRUE,   na_level = NULL,   .formats = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/analyze_vars_in_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary numeric variables in columns ‚Äî analyze_vars_in_cols","text":"lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . ... additional arguments lower level functions. .stats (character) statistics select table. .labels (named character) labels statistics (without indent). labelstr (character) label level parent split currently summarized (must present second argument Content Row Functions). nested (flag) whether layout instruction applied within existing layout structure possible (TRUE, default) new top-level element (FALSE). Ignored nest split underneath analyses, allowed. na_level (string) used replace NA empty values factors custom string. .formats (named character list) formats statistics.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/analyze_vars_in_cols.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Summary numeric variables in columns ‚Äî analyze_vars_in_cols","text":"analyze_vars_in_cols(): Layout creating function can used creating summary tables columns, primarily used PK data sets.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/analyze_vars_in_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary numeric variables in columns ‚Äî analyze_vars_in_cols","text":"","code":"library(dplyr)  adpp <- tern_ex_adpp %>% h_pkparam_sort() lyt <- basic_table() %>%   split_rows_by(var = \"ARM\", label_pos = \"topleft\") %>%   split_rows_by(var = \"SEX\", label_pos = \"topleft\") %>%   analyze_vars_in_cols(vars = \"AGE\") result <- build_table(lyt = lyt, df = adpp) result #> ARM                                                                    #>   SEX             n    Mean   SD    SE    CV (%)   CV % Geometric Mean #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> A: Drug X                                                              #>   F                                                                    #>                   0     NA    NA    NA      NA             NA          #>   M                                                                    #>                   0     NA    NA    NA      NA             NA          #> B: Placebo                                                             #>   F                                                                    #>                   0     NA    NA    NA      NA             NA          #>   M                                                                    #>                   0     NA    NA    NA      NA             NA          #> C: Combination                                                         #>   F                                                                    #>                  288   36.0   6.3   0.4    17.6           18.0         #>   M                                                                    #>                  234   36.3   8.5   0.6    23.4           23.5          # By selecting just some statistics and ad-hoc labels lyt <- basic_table() %>%   split_rows_by(var = \"ARM\", label_pos = \"topleft\") %>%   split_rows_by(var = \"SEX\", label_pos = \"topleft\") %>%   analyze_vars_in_cols(     vars = \"AGE\",     .stats = c(\"n\", \"cv\", \"geom_mean\", \"mean_ci\", \"median\", \"min\", \"max\"),     .labels = c(       n = \"myN\",       cv = \"myCV\",       geom_mean = \"myGeomMean\",       mean_ci = \"Mean (95%CI)\",       median = \"Median\",       min = \"Minimum\",       max = \"Maximum\"     )   ) result <- build_table(lyt = lyt, df = adpp) result #> ARM                                                                                    #>   SEX            myN   myCV   myGeomMean    Mean (95%CI)    Median   Minimum   Maximum #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> A: Drug X                                                                              #>   F                                                                                    #>                   0     NA        NA             NA           NA       NA        NA    #>   M                                                                                    #>                   0     NA        NA             NA           NA       NA        NA    #> B: Placebo                                                                             #>   F                                                                                    #>                   0     NA        NA             NA           NA       NA        NA    #>   M                                                                                    #>                   0     NA        NA             NA           NA       NA        NA    #> C: Combination                                                                         #>   F                                                                                    #>                  288   17.6      35.5      (35.29, 36.76)    36.8     25.4      49.6   #>   M                                                                                    #>                  234   23.4      35.3      (35.19, 37.37)    35.3     23.0      58.3    lyt <- basic_table() %>%   analyze_vars_in_cols(     vars = \"AGE\",     labelstr = \"some custom label\"   ) result <- build_table(lyt, df = adpp) result #>                      n    Mean   SD    SE    CV (%)   CV % Geometric Mean #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> some custom label   522   36.1   7.4   0.3    20.4           20.6          # PKPT03 lyt <- basic_table() %>%   split_rows_by(var = \"TLG_DISPLAY\", split_label = \"PK Parameter\", label_pos = \"topleft\") %>%   analyze_vars_in_cols(     vars = \"AVAL\",     .stats = c(\"n\", \"mean\", \"sd\", \"cv\", \"geom_mean\", \"geom_cv\", \"median\", \"min\", \"max\"),     .labels = c(       n = \"n\",       mean = \"Mean\",       sd = \"SD\",       cv = \"CV (%)\",       geom_mean = \"Geometric Mean\",       geom_cv = \"CV % Geometric Mean\",       median = \"Median\",       min = \"Minimum\",       max = \"Maximum\"     )   ) result <- build_table(lyt, df = adpp) result #> PK Parameter   n    Mean     SD    CV (%)   Geometric Mean   CV % Geometric Mean   Median   Minimum   Maximum #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Cmax                                                                                                          #>                58   29.7    5.6     19.0         29.2               19.3            29.0     17.2      45.9   #> AUCinf obs                                                                                                    #>                58   207.5   34.9    16.8        204.5               17.3           202.7     123.4     286.9  #> CL obs                                                                                                        #>                58    5.1    1.0     20.6         5.0                22.7            5.1       2.5       7.4   #> Ae                                                                                                            #>                58    1.5    0.3     21.3         1.5                24.1            1.5       0.6       2.2   #> Fe                                                                                                            #>                58   15.7    3.6     22.7         15.3               24.0            15.8      9.0      22.6   #> CLR                                                                                                           #>                58    0.0    0.0     19.9         0.0                22.2            0.0       0.0       0.1   #> Rmax                                                                                                          #>                58    9.6    2.0     21.1         9.4                21.6            9.3       5.5      14.4   #> Tonset                                                                                                        #>                58    3.0    0.7     22.4         2.9                23.3            3.0       1.7       4.8   #> RENALCLD                                                                                                      #>                58    0.0    0.0     19.0         0.0                19.4            0.0       0.0       0.0"},{"path":"https://insightsengineering.github.io/tern/main/reference/append_varlabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Variable Labels to Top Left Corner in Table ‚Äî append_varlabels","title":"Add Variable Labels to Top Left Corner in Table ‚Äî append_varlabels","text":"Helper layout creating function just append variable labels given variables vector given dataset top left corner. variable label found variable name used instead. Multiple variable labels concatenated slashes.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/append_varlabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Variable Labels to Top Left Corner in Table ‚Äî append_varlabels","text":"","code":"append_varlabels(lyt, df, vars, indent = 0L)"},{"path":"https://insightsengineering.github.io/tern/main/reference/append_varlabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Variable Labels to Top Left Corner in Table ‚Äî append_varlabels","text":"lyt (layout) input layout analyses added . df (data.frame) data set containing analysis variables. vars (character) variable names labels looked df. indent (integer) non-negative number nested indent space, default 0L means indent. 1L means two spaces indent, 2L means four spaces indent .","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/append_varlabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Variable Labels to Top Left Corner in Table ‚Äî append_varlabels","text":"modified layout.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/append_varlabels.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add Variable Labels to Top Left Corner in Table ‚Äî append_varlabels","text":"optimal implementation course, since using data set layout creation. mature rtables implementation also improved necessary anymore.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/append_varlabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Variable Labels to Top Left Corner in Table ‚Äî append_varlabels","text":"","code":"lyt <- basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   split_rows_by(\"SEX\") %>%   append_varlabels(DM, \"SEX\") %>%   analyze(\"AGE\", afun = mean) %>%   append_varlabels(DM, \"AGE\", indent = 1) build_table(lyt, DM) #> SEX                   A: Drug X          B: Placebo       C: Combination  #>   Age                  (N=121)            (N=106)            (N=129)      #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> F                                                                         #>   mean             33.7142857142857   33.8392857142857   34.8852459016393 #> M                                                                         #>   mean             36.5490196078431         32.1         34.2794117647059 #> U                                                                         #>   mean                    NA                 NA                 NA        #> UNDIFFERENTIATED                                                          #>   mean                    NA                 NA                 NA         lyt <- basic_table() %>%   split_cols_by(\"ARM\") %>%   split_rows_by(\"SEX\") %>%   analyze(\"AGE\", afun = mean) %>%   append_varlabels(DM, c(\"SEX\", \"AGE\")) build_table(lyt, DM) #> SEX / Age             A: Drug X          B: Placebo       C: Combination  #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> F                                                                         #>   mean             33.7142857142857   33.8392857142857   34.8852459016393 #> M                                                                         #>   mean             36.5490196078431         32.1         34.2794117647059 #> U                                                                         #>   mean                    NA                 NA                 NA        #> UNDIFFERENTIATED                                                          #>   mean                    NA                 NA                 NA"},{"path":"https://insightsengineering.github.io/tern/main/reference/argument_convention.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard Arguments ‚Äî argument_convention","title":"Standard Arguments ‚Äî argument_convention","text":"documentation function lists arguments tern used repeatedly express analysis.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/argument_convention.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard Arguments ‚Äî argument_convention","text":"... additional arguments lower level functions. .df_row (data.frame) data frame across columns given row split. .in_ref_col (logical)TRUE working reference level, FALSE otherwise. .N_col (count) row-wise N (row group count) group observations analyzed (.e. column-based subsetting) passed rtables. .N_row (count) column-wise N (column count) full column passed rtables. .ref_group (data.frame vector) data corresponding reference group. .stats (character) statistics select table. .indent_mods (named integer) indent modifiers labels. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .var (string) single variable name passed rtables requested statistics function. .spl_context (data.frame) gives information ancestor split states passed rtables. col_by (factor) defining column groups. conf_level (proportion) confidence level interval. data (data.frame) dataset containing variables summarize. df (data.frame) data set containing analysis variables. draw (flag) whether plot drawn. drop (flag) non appearing occurrence levels dropped resulting table. Note case remaining occurrence levels table sorted alphabetically. id (string) subject variable name. is_event (logical)TRUE event, FALSE time event censored. indent_mod (count) can negative. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. labelstr (character) label level parent split currently summarized (must present second argument Content Row Functions). lyt (layout) input layout analyses added . na.rm (flag) whether NA values removed x prior analysis. na_level (string) used replace NA empty values factors custom string. nested (flag) whether layout instruction applied within existing layout structure possible (TRUE, default) new top-level element (FALSE). Ignored nest split underneath analyses, allowed. newpage (flag) whether plot drawn new page. considered draw = TRUE used. prune_zero_rows (flag) whether prune zero rows. rsp (logical) whether subject responder . show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". section_div (string) string repeated section divider group defined split instruction, NA_character_ (default) section divider. table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. tte (numeric) contains time--event duration values. var_labels (character) character label. variables (named list string) list additional analysis variables. vars (character) variable names primary analysis variable iterated . var (string) single variable name primary analysis variable. x (numeric) vector numbers want analyze.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/argument_convention.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standard Arguments ‚Äî argument_convention","text":"Although function just returns NULL two uses, tern users provides documentation arguments commonly consistently used framework. developer adds single reference point import roxygen argument description : @inheritParams argument_convention","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/arrange_grobs.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange Multiple Grobs ‚Äî arrange_grobs","title":"Arrange Multiple Grobs ‚Äî arrange_grobs","text":"Arrange grobs new grob n*m (rows*cols) layout.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/arrange_grobs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange Multiple Grobs ‚Äî arrange_grobs","text":"","code":"arrange_grobs(   ...,   grobs = list(...),   ncol = NULL,   nrow = NULL,   padding_ht = grid::unit(2, \"line\"),   padding_wt = grid::unit(2, \"line\"),   vp = NULL,   gp = NULL,   name = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/arrange_grobs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange Multiple Grobs ‚Äî arrange_grobs","text":"... grobs. grobs list grobs. ncol number columns layout. nrow number rows layout. padding_ht unit length 1, vertical space grob. padding_wt unit length 1, horizontal space grob. vp viewport object (NULL). gp gpar object. name character identifier grob.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/arrange_grobs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange Multiple Grobs ‚Äî arrange_grobs","text":"","code":"library(grid)  # Internal function - arrange_grobs if (FALSE) { num <- lapply(1:9, textGrob) grid::grid.newpage() grid.draw(arrange_grobs(grobs = num, ncol = 2))  showViewport()  g1 <- circleGrob(gp = gpar(col = \"blue\")) g2 <- circleGrob(gp = gpar(col = \"red\")) g3 <- textGrob(\"TEST TEXT\") grid::grid.newpage() grid.draw(arrange_grobs(g1, g2, g3, nrow = 2))  showViewport()  grid::grid.newpage() grid.draw(arrange_grobs(g1, g2, g3, ncol = 3))  grid::grid.newpage() grid::pushViewport(grid::viewport(layout = grid::grid.layout(1, 2))) vp1 <- grid::viewport(layout.pos.row = 1, layout.pos.col = 2) grid.draw(arrange_grobs(g1, g2, g3, ncol = 2, vp = vp1))  showViewport() }"},{"path":"https://insightsengineering.github.io/tern/main/reference/as.rtable.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to rtable ‚Äî as.rtable","title":"Convert to rtable ‚Äî as.rtable","text":"new generic function convert objects rtable tables.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/as.rtable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to rtable ‚Äî as.rtable","text":"","code":"as.rtable(x, ...)  # S3 method for data.frame as.rtable(x, format = \"xx.xx\", ...)"},{"path":"https://insightsengineering.github.io/tern/main/reference/as.rtable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to rtable ‚Äî as.rtable","text":"x object converted rtable. ... additional arguments methods. format format used columns.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/as.rtable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to rtable ‚Äî as.rtable","text":"rtable object. Note concrete class depend method used.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/as.rtable.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Convert to rtable ‚Äî as.rtable","text":".rtable(data.frame): method converting data.frame contain numeric columns rtable.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/as.rtable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to rtable ‚Äî as.rtable","text":"","code":"x <- data.frame(   a = 1:10,   b = rnorm(10) ) as.rtable(x) #>        a       b   #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> 1    1.00    0.58  #> 2    2.00    -0.86 #> 3    3.00    0.93  #> 4    4.00    0.11  #> 5    5.00    0.02  #> 6    6.00    0.66  #> 7    7.00    0.92  #> 8    8.00    0.34  #> 9    9.00    1.68  #> 10   10.00   -0.03"},{"path":"https://insightsengineering.github.io/tern/main/reference/as_factor_keep_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion of a Vector to a Factor ‚Äî as_factor_keep_attributes","title":"Conversion of a Vector to a Factor ‚Äî as_factor_keep_attributes","text":"Converts x factor keeps attributes. Warns appropriately user can decide whether prefer converting factor manually (e.g. full control factor levels).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/as_factor_keep_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion of a Vector to a Factor ‚Äî as_factor_keep_attributes","text":"","code":"as_factor_keep_attributes(   x,   x_name = deparse(substitute(x)),   na_level = \"<Missing>\",   verbose = TRUE )"},{"path":"https://insightsengineering.github.io/tern/main/reference/as_factor_keep_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion of a Vector to a Factor ‚Äî as_factor_keep_attributes","text":"x (atomic) object convert. x_name (string) name x. na_level (string) explicit missing level used converting character vector. verbose defaults TRUE. prints warnings messages.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/as_factor_keep_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion of a Vector to a Factor ‚Äî as_factor_keep_attributes","text":"factor attributes (except class) x. modifications x already factor.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/as_factor_keep_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion of a Vector to a Factor ‚Äî as_factor_keep_attributes","text":"","code":"# Internal function - as_factor_keep_attributes if (FALSE) { as_factor_keep_attributes(formatters::with_label(c(1, 1, 2, 3), \"id\"), verbose = FALSE) as_factor_keep_attributes(c(\"a\", \"b\", \"\"), \"id\", verbose = FALSE) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/assertions.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional Assertions for checkmate ‚Äî assertions","title":"Additional Assertions for checkmate ‚Äî assertions","text":"Additional assertion functions can used together checkmate package.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/assertions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional Assertions for checkmate ‚Äî assertions","text":"","code":"assert_list_of_variables(x, .var.name = checkmate::vname(x), add = NULL)  assert_df_with_variables(   df,   variables,   na_level = NULL,   .var.name = checkmate::vname(df),   add = NULL )  assert_valid_factor(   x,   min.levels = 1,   max.levels = NULL,   null.ok = TRUE,   any.missing = TRUE,   n.levels = NULL,   len = NULL,   .var.name = checkmate::vname(x),   add = NULL )  assert_df_with_factors(   df,   variables,   min.levels = 1,   max.levels = NULL,   any.missing = TRUE,   na_level = NULL,   .var.name = checkmate::vname(df),   add = NULL )  assert_proportion_value(x, include_boundaries = FALSE)"},{"path":"https://insightsengineering.github.io/tern/main/reference/assertions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional Assertions for checkmate ‚Äî assertions","text":"x () object test. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. df (data.frame) data set test. variables (named list character) list variables test. na_level (character) string using represent NA missing data. NA values please consider using directly base::.na similar approaches. min.levels [integer(1)] Minimum number factor levels. Default NULL (check). max.levels [integer(1)] Maximum number factor levels. Default NULL (check). null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .missing [logical(1)] vectors missing values allowed? Default TRUE. n.levels [integer(1)] Exact number factor levels. Default NULL (check). len [integer(1)] Exact expected length x. include_boundaries (logical) whether include boundaries testing proportions. (`integer`) minimum number factor levels. Default 1. ... collection objects test.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/assertions.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Additional Assertions for checkmate ‚Äî assertions","text":"assert_list_of_variables(): Check whether x valid list variable names. NULL elements list x dropped Filter(Negate(.null), x). assert_df_with_variables(): Check whether df data frame analysis variables. Please notice produces error variables present data.frame opposite required. assert_valid_factor(): Check whether x valid factor (levels empty string levels). Note NULL NA elements allowed. assert_df_with_factors(): Check whether df data frame analysis variables factors. Note creation NA direct call factor() trim NA levels vector list . assert_proportion_value(): Check whether x proportion: number 0 1.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/assertions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional Assertions for checkmate ‚Äî assertions","text":"","code":"# Check whether `x` is a valid list of variable names.  # Internal function - assert_list_of_variables if (FALSE) { assert_list_of_variables(list(val = \"a\")) assert_list_of_variables(list(val = c(\"a\", \"b\"))) assert_list_of_variables(list(val = c(\"a\", \"b\"), val2 = NULL))  # The following calls fail assert_list_of_variables(list(1, 2)) assert_list_of_variables(list(\"bla\" = 2)) }  # Check whether `df` contains the analysis `variables`.  # Internal function - assert_df_with_variables if (FALSE) { assert_df_with_variables(   df = data.frame(a = 5, b = 3),   variables = list(val = \"a\") ) assert_df_with_variables(   df = data.frame(a = 5, b = 3),   variables = list(val = c(\"a\", \"b\")) ) assert_df_with_variables(   df = data.frame(a = 5, b = 3),   variables = list(val = c(\"a\", \"b\")) ) assert_df_with_variables(   df = data.frame(a = 5, b = 3, e = \"<Missing>\"),   variables = list(val = c(\"a\", \"b\")), na_level = \"<Missing>\" )  # The following calls fail assert_df_with_variables(   df = matrix(1:5, ncol = 2, nrow = 3),   variables = list(val = \"a\") ) assert_df_with_variables(   df = data.frame(a = 5, b = 3),   variables = list(val = c(\"a\", \"b\", \"c\")) ) assert_df_with_variables(   df = data.frame(a = 5, b = 3, e = \"<Missing>\"),   variables = list(val = c(\"a\", \"b\", \"e\")), na_level = \"<Missing>\" ) }  # Check whether `x` is a valid factor.  # Internal function - assert_valid_factor if (FALSE) { assert_valid_factor(factor(c(\"a\", NULL))) assert_valid_factor(factor(c(\"a\", \"b\"))) assert_valid_factor(factor(c(\"a\", \"b\")), len = 2) assert_valid_factor(factor(c(\"a\", NA)), any.missing = TRUE) assert_valid_factor(factor(\"A\", levels = c(\"A\", \"B\")))  # The following calls fail assert_valid_factor(-1) assert_valid_factor(factor(c(\"a\", \"\"))) assert_valid_factor(factor(c(\"a\", NA)), any.missing = FALSE) assert_valid_factor(factor(NULL)) assert_valid_factor(factor(c(NULL, \"\"))) assert_valid_factor(factor()) }  # Check whether `df` contains all factor analysis `variables`. adf <- data.frame(a = factor(c(\"A\", \"B\")), b = 3) bdf <- data.frame(a = factor(letters[1:3]), b = factor(c(1, 2, 3)), d = 3)  # Internal function - assert_df_with_factors if (FALSE) { assert_df_with_factors(df = adf, variables = list(val = \"a\")) assert_df_with_factors(df = adf, variables = list(val = \"a\"), min.levels = 1) assert_df_with_factors(df = adf, variables = list(val = \"a\"), min.levels = 2, max.levels = 2) assert_df_with_factors(   df = data.frame(a = factor(c(\"A\", NA, \"B\")), b = 3),   variable = list(val = \"a\"),   min.levels = 2,   max.levels = 2 )  # The following calls fail assert_df_with_factors(df = adf, variables = list(val = \"a\"), min.levels = 1, max.levels = 1) assert_df_with_factors(df = adf, variables = list(val = \"a\"), min.levels = 1, max.levels = 1) assert_df_with_factors(df = adf, variables = list(val = \"a\", val = \"b\", val = \"\")) assert_df_with_factors(df = adf, variables = list(val = \"a\", val = \"b\", val = \"d\")) assert_df_with_factors(   df = bdf,   variables = list(val = \"a\", val = \"b\"),   min.levels = 1,   max.levels = 1 ) }  # Check whether `x` is between 0 and 1. # Internal function - assert_proportion_value if (FALSE) { assert_proportion_value(x = 0, include_boundaries = TRUE) assert_proportion_value(x = 0.3)  # These fail assert_proportion_value(x = 1.3) assert_proportion_value(x = 1) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/bins_percent_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Labels for Bins in Percent ‚Äî bins_percent_labels","title":"Labels for Bins in Percent ‚Äî bins_percent_labels","text":"creates labels quantile based bins percent. assumes right-closed intervals produced cut_quantile_bins().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/bins_percent_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Labels for Bins in Percent ‚Äî bins_percent_labels","text":"","code":"bins_percent_labels(probs, digits = 0)"},{"path":"https://insightsengineering.github.io/tern/main/reference/bins_percent_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Labels for Bins in Percent ‚Äî bins_percent_labels","text":"probs (proportion vector) probabilities identifying quantiles. sorted vector unique proportion values, .e. 0 1, boundaries 0 1 must included. digits (integer) number decimal places round percent numbers.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/bins_percent_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Labels for Bins in Percent ‚Äî bins_percent_labels","text":"Character vector labels format [0%,20%], (20%,50%], etc.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/bins_percent_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Labels for Bins in Percent ‚Äî bins_percent_labels","text":"","code":"# Internal function - bins_percent_labels if (FALSE) { # Just pass the internal probability bounds, then 0 and 100% will be added automatically. bins_percent_labels(c(0.2, 0.5))  # Determine how to round. bins_percent_labels(0.35224, digits = 1)  # Passing an empty vector just gives a single bin 0-100%. bins_percent_labels(c(0, 1)) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/c_label_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Content Row Function to Add Row Total to Labels ‚Äî c_label_n","title":"Content Row Function to Add Row Total to Labels ‚Äî c_label_n","text":"takes label latest row split level adds row total parentheses.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/c_label_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Content Row Function to Add Row Total to Labels ‚Äî c_label_n","text":"","code":"c_label_n(df, labelstr, .N_row)"},{"path":"https://insightsengineering.github.io/tern/main/reference/c_label_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Content Row Function to Add Row Total to Labels ‚Äî c_label_n","text":"df (data.frame) data set containing analysis variables. labelstr (character) label level parent split currently summarized (must present second argument Content Row Functions). .N_row (count) column-wise N (column count) full column passed rtables.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/c_label_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Content Row Function to Add Row Total to Labels ‚Äî c_label_n","text":"list containing \"row_count\" row count value correct label.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/c_label_n.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Content Row Function to Add Row Total to Labels ‚Äî c_label_n","text":"Important use df .N_row implementation, former already split columns refer first column data .","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/cfun_by_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for Content Functions given Data Frame with Flag Input ‚Äî cfun_by_flag","title":"Constructor for Content Functions given Data Frame with Flag Input ‚Äî cfun_by_flag","text":"can useful tabulating model results.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/cfun_by_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for Content Functions given Data Frame with Flag Input ‚Äî cfun_by_flag","text":"","code":"cfun_by_flag(analysis_var, flag_var, format = \"xx\")"},{"path":"https://insightsengineering.github.io/tern/main/reference/cfun_by_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for Content Functions given Data Frame with Flag Input ‚Äî cfun_by_flag","text":"analysis_var (string) variable name column containing values returned content function. flag_var (string) variable name logical column identifying row returned. format (string)rtables format use.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/cfun_by_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for Content Functions given Data Frame with Flag Input ‚Äî cfun_by_flag","text":"Content function just gives df$analysis_var row identified .df_row$flag given format.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/check_diff_prop_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Check: Proportion Difference Arguments ‚Äî check_diff_prop_ci","title":"Check: Proportion Difference Arguments ‚Äî check_diff_prop_ci","text":"Verifies /convert arguments valid values used estimation difference responder proportions.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/check_diff_prop_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check: Proportion Difference Arguments ‚Äî check_diff_prop_ci","text":"","code":"check_diff_prop_ci(rsp, grp, strata = NULL, conf_level, correct = NULL)"},{"path":"https://insightsengineering.github.io/tern/main/reference/check_diff_prop_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check: Proportion Difference Arguments ‚Äî check_diff_prop_ci","text":"rsp (logical) whether subject responder . grp (factor) vector assigning observations one two groups (e.g. reference treatment group). strata (factor) variable one level per stratum length rsp. conf_level (proportion) confidence level interval. correct logical include continuity correction. information, see stats::prop.test().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/check_same_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Element Dimension ‚Äî check_same_n","title":"Check Element Dimension ‚Äî check_same_n","text":"Checks elements ... dimension.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/check_same_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Element Dimension ‚Äî check_same_n","text":"","code":"check_same_n(..., omit_null = TRUE)"},{"path":"https://insightsengineering.github.io/tern/main/reference/check_same_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Element Dimension ‚Äî check_same_n","text":"... data.frames vectors omit_null NULL elements ... omitted check?","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/combination_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Combination Functions Class ‚Äî combination_function","title":"Combination Functions Class ‚Äî combination_function","text":"CombinationFunction S4 class extends standard functions. special functions can combined negated logical operators.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/combination_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combination Functions Class ‚Äî combination_function","text":"","code":"# S4 method for CombinationFunction,CombinationFunction &amp;(e1, e2)  # S4 method for CombinationFunction,CombinationFunction |(e1, e2)  # S4 method for CombinationFunction !(x)"},{"path":"https://insightsengineering.github.io/tern/main/reference/combination_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combination Functions Class ‚Äî combination_function","text":"e1 (CombinationFunction) left hand side logical operator. e2 (CombinationFunction) right hand side logical operator. x (CombinationFunction) function negated.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/combination_function.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Combination Functions Class ‚Äî combination_function","text":"e1 & e2: Logical \"\" combination CombinationFunction functions. resulting object class, evaluates two argument functions. result \"\" two individual results. e1 | e2: Logical \"\" combination CombinationFunction functions. resulting object class, evaluates two argument functions. result \"\" two individual results. `!`(CombinationFunction): Logical negation CombinationFunction functions. resulting object class, evaluates original function. result opposite results.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/combination_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combination Functions Class ‚Äî combination_function","text":"","code":"higher <- function(a) {   force(a)   CombinationFunction(     function(x) {       x > a     }   ) }  lower <- function(b) {   force(b)   CombinationFunction(     function(x) {       x < b     }   ) }  c1 <- higher(5) c2 <- lower(10) c3 <- higher(5) & lower(10) c3(7) #> [1] TRUE"},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Counts ‚Äî combine_counts","title":"Combine Counts ‚Äî combine_counts","text":"Simplifies estimation column counts, especially group combination required.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Counts ‚Äî combine_counts","text":"","code":"combine_counts(fct, groups_list = NULL)"},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Counts ‚Äî combine_counts","text":"fct (factor) variable levels needs grouped. groups_list (named list character) specifies new group levels via names levels belong character vectors elements list.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine Counts ‚Äî combine_counts","text":"","code":"ref <- c(\"A: Drug X\", \"B: Placebo\") groups <- combine_groups(fct = DM$ARM, ref = ref)  # Internal function - combine_counts if (FALSE) { col_counts <- combine_counts(   fct = DM$ARM,   groups_list = groups )  basic_table() %>%   split_cols_by_groups(\"ARM\", groups) %>%   add_colcounts() %>%   summarize_vars(\"AGE\") %>%   build_table(DM, col_counts = col_counts)  ref <- \"A: Drug X\" groups <- combine_groups(fct = DM$ARM, ref = ref) col_counts <- combine_counts(   fct = DM$ARM,   groups_list = groups )  basic_table() %>%   split_cols_by_groups(\"ARM\", groups) %>%   add_colcounts() %>%   summarize_vars(\"AGE\") %>%   build_table(DM, col_counts = col_counts) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference and Treatment Group Combination ‚Äî combine_groups","title":"Reference and Treatment Group Combination ‚Äî combine_groups","text":"Facilitate re-combination groups divided reference treatment groups; helps arranging groups columns rtables framework teal modules.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference and Treatment Group Combination ‚Äî combine_groups","text":"","code":"combine_groups(fct, ref = NULL, collapse = \"/\")"},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reference and Treatment Group Combination ‚Äî combine_groups","text":"fct (factor) variable levels needs grouped. ref (string) reference level(s). collapse (string) character string separate fct ref.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reference and Treatment Group Combination ‚Äî combine_groups","text":"list first item ref (reference) second item trt (treatment).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reference and Treatment Group Combination ‚Äî combine_groups","text":"","code":"groups <- combine_groups(   fct = DM$ARM,   ref = c(\"B: Placebo\") )  basic_table() %>%   split_cols_by_groups(\"ARM\", groups) %>%   add_colcounts() %>%   summarize_vars(\"AGE\") %>%   build_table(DM) #>             B: Placebo    A: Drug X/C: Combination #>               (N=106)             (N=250)          #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> n               106                 250            #> Mean (SD)   33.0 (6.3)           34.7 (7.1)        #> Median         32.0                 33.0           #> Min - Max   21.0 - 55.0         20.0 - 60.0"},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Factor Levels ‚Äî combine_levels","title":"Combine Factor Levels ‚Äî combine_levels","text":"Combine specified old factor Levels single new level.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Factor Levels ‚Äî combine_levels","text":"","code":"combine_levels(x, levels, new_level = paste(levels, collapse = \"/\"))"},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Factor Levels ‚Äî combine_levels","text":"x factor levels level names combined new_level name new level","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Factor Levels ‚Äî combine_levels","text":"factor","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine Factor Levels ‚Äî combine_levels","text":"","code":"x <- factor(letters[1:5], levels = letters[5:1]) combine_levels(x, levels = c(\"a\", \"b\")) #> [1] a/b a/b c   d   e   #> Levels: e d c a/b  combine_levels(x, c(\"e\", \"b\")) #> [1] a   e/b c   d   e/b #> Levels: e/b d c a"},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Two Vectors Element Wise ‚Äî combine_vectors","title":"Combine Two Vectors Element Wise ‚Äî combine_vectors","text":"Combine Two Vectors Element Wise","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Two Vectors Element Wise ‚Äî combine_vectors","text":"","code":"combine_vectors(x, y)"},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Two Vectors Element Wise ‚Äî combine_vectors","text":"x (vector) first vector combine. y (vector) second vector combine.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Two Vectors Element Wise ‚Äî combine_vectors","text":"list element combines corresponding elements x y.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/combine_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine Two Vectors Element Wise ‚Äî combine_vectors","text":"","code":"combine_vectors(1:3, 4:6) #> [[1]] #> [1] 1 4 #>  #> [[2]] #> [1] 2 5 #>  #> [[3]] #> [1] 3 6 #>"},{"path":"https://insightsengineering.github.io/tern/main/reference/compare_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Variables Between Groups ‚Äî compare_variables","title":"Compare Variables Between Groups ‚Äî compare_variables","text":"use new S3 generic function s_compare() implement comparisons different x objects. used Statistics Function combination new Analyze Function compare_vars().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/compare_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Variables Between Groups ‚Äî compare_variables","text":"","code":"s_compare(x, .ref_group, .in_ref_col, ...)  # S3 method for numeric s_compare(x, .ref_group, .in_ref_col, ...)  # S3 method for factor s_compare(   x,   .ref_group,   .in_ref_col,   denom = \"n\",   na.rm = TRUE,   na_level = \"<Missing>\",   ... )  # S3 method for character s_compare(   x,   .ref_group,   .in_ref_col,   denom = \"n\",   na.rm = TRUE,   na_level = \"<Missing>\",   .var,   verbose = TRUE,   ... )  # S3 method for logical s_compare(x, .ref_group, .in_ref_col, na.rm = TRUE, denom = \"n\", ...)  a_compare(x, .ref_group, .in_ref_col, ..., .var)  # S3 method for numeric a_compare(x, .ref_group, .in_ref_col, ...)  # S3 method for factor a_compare(   x,   .ref_group,   .in_ref_col,   denom = \"n\",   na.rm = TRUE,   na_level = \"<Missing>\",   ... )  # S3 method for character a_compare(   x,   .ref_group,   .in_ref_col,   denom = \"n\",   na.rm = TRUE,   na_level = \"<Missing>\",   .var,   verbose = TRUE,   ... )  # S3 method for logical a_compare(x, .ref_group, .in_ref_col, na.rm = TRUE, denom = \"n\", ...)  compare_vars(   lyt,   vars,   var_labels = vars,   nested = TRUE,   ...,   show_labels = \"default\",   table_names = vars,   .stats = c(\"n\", \"mean_sd\", \"count_fraction\", \"pval\"),   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/compare_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Variables Between Groups ‚Äî compare_variables","text":"x (numeric) vector numbers want analyze. .ref_group (data.frame vector) data corresponding reference group. .in_ref_col (logical)TRUE working reference level, FALSE otherwise. ... arguments passed s_compare(). denom (string) choice denominator factor proportions, can n (number values row column intersection). na.rm (flag) whether NA values removed x prior analysis. na_level (string) used replace NA empty values factors custom string. .var (string) single variable name passed rtables requested statistics function. verbose defaults TRUE. prints warnings messages. mainly used print information factor casting. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . var_labels (character) character label. nested (flag) whether layout instruction applied within existing layout structure possible (TRUE, default) new top-level element (FALSE). Ignored nest split underneath analyses, allowed. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/compare_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Variables Between Groups ‚Äî compare_variables","text":"x class numeric, returns list named items: items s_summary.numeric(). pval: p-value. x class factor converted character, returns list named items: items s_summary.factor(). pval: p-value. x class logical, returns list named items: items s_summary.logical(). pval: p-value.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/compare_variables.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Compare Variables Between Groups ‚Äî compare_variables","text":"s_compare(): s_compare S3 generic function produce object description comparison versus reference column form p-values. s_compare(numeric): Method numeric class. uses standard t-test calculate p-value. s_compare(factor): Method factor class. uses chi-squared test calculate p-value. Note denom factor proportions can n since usage comparing proportions columns. Therefore row-based proportion make sense. Also proportion based N_col difficult since chi-squared test statistic use counts. Therefore missing values accounted explicitly factor levels. s_compare(character): Method character class. makes automatic conversion factor (warning) forwards method factors. s_compare(logical): Method logical class. chi-squared test used. missing values removed, counted FALSE. a_compare(): S3 generic Formatted Analysis function produce object description comparison versus reference column form p-values. used afun rtables::analyze(). a_compare(numeric): Formatted Analysis function method numeric. a_compare(factor): Formatted Analysis function method factor. a_compare(character): Formatted Analysis function method character. a_compare(logical): Formatted Analysis function method logical. compare_vars(): Analyze Function add comparison variables rtables pipelines. column split needs reference group defined via ref_group comparison well defined. ellipsis (...) conveys arguments s_compare(). factor variables contains NA, expected NA conveyed na_level appropriately beforehand df_explicit_na().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/compare_variables.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compare Variables Between Groups ‚Äî compare_variables","text":"Automatic conversion character factor guarantee table can generated correctly. particular sparse tables likely can fail. therefore better always pre-process dataset factors manually created character variables passing dataset rtables::build_table().","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/compare_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Variables Between Groups ‚Äî compare_variables","text":"","code":"# `s_compare.numeric`  ## Usual case where both this and the reference group vector have more than 1 value. s_compare(rnorm(10, 5, 1), .ref_group = rnorm(5, -5, 1), .in_ref_col = FALSE) #> $n #>  n  #> 10  #>  #> $sum #>      sum  #> 51.39765  #>  #> $mean #>     mean  #> 5.139765  #>  #> $sd #>        sd  #> 0.8281187  #>  #> $se #>        se  #> 0.2618741  #>  #> $mean_sd #>      mean        sd  #> 5.1397654 0.8281187  #>  #> $mean_se #>      mean        se  #> 5.1397654 0.2618741  #>  #> $mean_ci #> mean_ci_lwr mean_ci_upr  #>    4.547365    5.732166  #> attr(,\"label\") #> [1] \"Mean 95% CI\" #>  #> $mean_sei #> mean_sei_lwr mean_sei_upr  #>     4.877891     5.401640  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSE\" #>  #> $mean_sdi #> mean_sdi_lwr mean_sdi_upr  #>     4.311647     5.967884  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSD\" #>  #> $mean_pval #>      p_value  #> 1.071953e-08  #> attr(,\"label\") #> [1] \"Mean p-value (H0: mean = 0)\" #>  #> $median #>   median  #> 5.344081  #>  #> $mad #>           mad  #> -4.440892e-16  #>  #> $median_ci #> median_ci_lwr median_ci_upr  #>      4.308079      6.166955  #> attr(,\"conf_level\") #> [1] 0.9785156 #> attr(,\"label\") #> [1] \"Median 95% CI\" #>  #> $quantiles #> quantile_0.25 quantile_0.75  #>      4.597282      5.539132  #> attr(,\"label\") #> [1] \"25% and 75%-ile\" #>  #> $iqr #>     iqr  #> 0.94185  #>  #> $range #>      min      max  #> 3.502256 6.184393  #>  #> $min #>      min  #> 3.502256  #>  #> $max #>      max  #> 6.184393  #>  #> $median_range #>   median      min      max  #> 5.344081 3.502256 6.184393  #> attr(,\"label\") #> [1] \"Median (Min - Max)\" #>  #> $cv #>       cv  #> 16.11199  #>  #> $geom_mean #> geom_mean  #>  5.074335  #>  #> $geom_mean_ci #> mean_ci_lwr mean_ci_upr  #>    4.483628    5.742867  #> attr(,\"label\") #> [1] \"Geometric Mean 95% CI\" #>  #> $geom_cv #>  geom_cv  #> 17.43116  #>  #> $pval #> [1] 1.501031e-12 #>   ## If one group has not more than 1 value, then p-value is not calculated. s_compare(rnorm(10, 5, 1), .ref_group = 1, .in_ref_col = FALSE) #> $n #>  n  #> 10  #>  #> $sum #>      sum  #> 50.24413  #>  #> $mean #>     mean  #> 5.024413  #>  #> $sd #>       sd  #> 1.762692  #>  #> $se #>        se  #> 0.5574122  #>  #> $mean_sd #>     mean       sd  #> 5.024413 1.762692  #>  #> $mean_se #>      mean        se  #> 5.0244132 0.5574122  #>  #> $mean_ci #> mean_ci_lwr mean_ci_upr  #>    3.763459    6.285367  #> attr(,\"label\") #> [1] \"Mean 95% CI\" #>  #> $mean_sei #> mean_sei_lwr mean_sei_upr  #>     4.467001     5.581825  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSE\" #>  #> $mean_sdi #> mean_sdi_lwr mean_sdi_upr  #>     3.261721     6.787105  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSD\" #>  #> $mean_pval #>      p_value  #> 8.431531e-06  #> attr(,\"label\") #> [1] \"Mean p-value (H0: mean = 0)\" #>  #> $median #>   median  #> 5.023451  #>  #> $mad #> mad  #>   0  #>  #> $median_ci #> median_ci_lwr median_ci_upr  #>      3.260729      6.577107  #> attr(,\"conf_level\") #> [1] 0.9785156 #> attr(,\"label\") #> [1] \"Median 95% CI\" #>  #> $quantiles #> quantile_0.25 quantile_0.75  #>      3.838785      6.201476  #> attr(,\"label\") #> [1] \"25% and 75%-ile\" #>  #> $iqr #>      iqr  #> 2.362691  #>  #> $range #>      min      max  #> 2.586429 8.535040  #>  #> $min #>      min  #> 2.586429  #>  #> $max #>     max  #> 8.53504  #>  #> $median_range #>   median      min      max  #> 5.023451 2.586429 8.535040  #> attr(,\"label\") #> [1] \"Median (Min - Max)\" #>  #> $cv #>       cv  #> 35.08254  #>  #> $geom_mean #> geom_mean  #>  4.751945  #>  #> $geom_mean_ci #> mean_ci_lwr mean_ci_upr  #>    3.685667    6.126702  #> attr(,\"label\") #> [1] \"Geometric Mean 95% CI\" #>  #> $geom_cv #>  geom_cv  #> 36.67158  #>  #> $pval #> character(0) #>   ## Empty numeric does not fail, it returns NA-filled items and no p-value. s_compare(numeric(), .ref_group = numeric(), .in_ref_col = FALSE) #> $n #> n  #> 0  #>  #> $sum #> sum  #>  NA  #>  #> $mean #> mean  #>   NA  #>  #> $sd #> sd  #> NA  #>  #> $se #> se  #> NA  #>  #> $mean_sd #> mean   sd  #>   NA   NA  #>  #> $mean_se #> mean   se  #>   NA   NA  #>  #> $mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Mean 95% CI\" #>  #> $mean_sei #> mean_sei_lwr mean_sei_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSE\" #>  #> $mean_sdi #> mean_sdi_lwr mean_sdi_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSD\" #>  #> $mean_pval #> p_value  #>      NA  #> attr(,\"label\") #> [1] \"Mean p-value (H0: mean = 0)\" #>  #> $median #> median  #>     NA  #>  #> $mad #> mad  #>  NA  #>  #> $median_ci #> median_ci_lwr median_ci_upr  #>            NA            NA  #> attr(,\"conf_level\") #> [1] NA #> attr(,\"label\") #> [1] \"Median 95% CI\" #>  #> $quantiles #> quantile_0.25 quantile_0.75  #>            NA            NA  #> attr(,\"label\") #> [1] \"25% and 75%-ile\" #>  #> $iqr #> iqr  #>  NA  #>  #> $range #> min max  #>  NA  NA  #>  #> $min #> min  #>  NA  #>  #> $max #> max  #>  NA  #>  #> $median_range #> median    min    max  #>     NA     NA     NA  #> attr(,\"label\") #> [1] \"Median (Min - Max)\" #>  #> $cv #> cv  #> NA  #>  #> $geom_mean #> geom_mean  #>       NaN  #>  #> $geom_mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Geometric Mean 95% CI\" #>  #> $geom_cv #> geom_cv  #>      NA  #>  #> $pval #> character(0) #>  # `s_compare.factor`  ## Basic usage: x <- factor(c(\"a\", \"a\", \"b\", \"c\", \"a\")) y <- factor(c(\"a\", \"b\", \"c\")) s_compare(x = x, .ref_group = y, .in_ref_col = FALSE) #> $n #> [1] 5 #>  #> $count #> $count$a #> [1] 3 #>  #> $count$b #> [1] 1 #>  #> $count$c #> [1] 1 #>  #>  #> $count_fraction #> $count_fraction$a #> [1] 3.0 0.6 #>  #> $count_fraction$b #> [1] 1.0 0.2 #>  #> $count_fraction$c #> [1] 1.0 0.2 #>  #>  #> $n_blq #> [1] 0 #>  #> $pval #> [1] 0.7659283 #>   ## Management of NA values. x <- explicit_na(factor(c(\"a\", \"a\", \"b\", \"c\", \"a\", NA, NA))) y <- explicit_na(factor(c(\"a\", \"b\", \"c\", NA))) s_compare(x = x, .ref_group = y, .in_ref_col = FALSE, na.rm = TRUE) #> $n #> [1] 5 #>  #> $count #> $count$a #> [1] 3 #>  #> $count$b #> [1] 1 #>  #> $count$c #> [1] 1 #>  #>  #> $count_fraction #> $count_fraction$a #> [1] 3.0 0.6 #>  #> $count_fraction$b #> [1] 1.0 0.2 #>  #> $count_fraction$c #> [1] 1.0 0.2 #>  #>  #> $n_blq #> [1] 0 #>  #> $pval #> [1] 0.7659283 #>  s_compare(x = x, .ref_group = y, .in_ref_col = FALSE, na.rm = FALSE) #> $n #> [1] 7 #>  #> $count #> $count$a #> [1] 3 #>  #> $count$b #> [1] 1 #>  #> $count$c #> [1] 1 #>  #> $count$`<Missing>` #> [1] 2 #>  #>  #> $count_fraction #> $count_fraction$a #> [1] 3.0000000 0.4285714 #>  #> $count_fraction$b #> [1] 1.0000000 0.1428571 #>  #> $count_fraction$c #> [1] 1.0000000 0.1428571 #>  #> $count_fraction$`<Missing>` #> [1] 2.0000000 0.2857143 #>  #>  #> $n_blq #> [1] 0 #>  #> $pval #> [1] 0.9063036 #>  # `s_compare.character`  ## Basic usage: x <- c(\"a\", \"a\", \"b\", \"c\", \"a\") y <- c(\"a\", \"b\", \"c\") s_compare(x, .ref_group = y, .in_ref_col = FALSE, .var = \"x\", verbose = FALSE) #> $n #> [1] 5 #>  #> $count #> $count$a #> [1] 3 #>  #> $count$b #> [1] 1 #>  #> $count$c #> [1] 1 #>  #>  #> $count_fraction #> $count_fraction$a #> [1] 3.0 0.6 #>  #> $count_fraction$b #> [1] 1.0 0.2 #>  #> $count_fraction$c #> [1] 1.0 0.2 #>  #>  #> $n_blq #> [1] 0 #>  #> $pval #> [1] 0.7659283 #>   ## Note that missing values handling can make a large difference: x <- c(\"a\", \"a\", \"b\", \"c\", \"a\", NA) y <- c(\"a\", \"b\", \"c\", rep(NA, 20)) s_compare(x,   .ref_group = y, .in_ref_col = FALSE,   .var = \"x\", verbose = FALSE ) #> $n #> [1] 5 #>  #> $count #> $count$a #> [1] 3 #>  #> $count$b #> [1] 1 #>  #> $count$c #> [1] 1 #>  #>  #> $count_fraction #> $count_fraction$a #> [1] 3.0 0.6 #>  #> $count_fraction$b #> [1] 1.0 0.2 #>  #> $count_fraction$c #> [1] 1.0 0.2 #>  #>  #> $n_blq #> [1] 0 #>  #> $pval #> [1] 0.7659283 #>  s_compare(x,   .ref_group = y, .in_ref_col = FALSE, .var = \"x\",   na.rm = FALSE, verbose = FALSE ) #> $n #> [1] 6 #>  #> $count #> $count$a #> [1] 3 #>  #> $count$b #> [1] 1 #>  #> $count$c #> [1] 1 #>  #> $count$`<Missing>` #> [1] 1 #>  #>  #> $count_fraction #> $count_fraction$a #> [1] 3.0 0.5 #>  #> $count_fraction$b #> [1] 1.0000000 0.1666667 #>  #> $count_fraction$c #> [1] 1.0000000 0.1666667 #>  #> $count_fraction$`<Missing>` #> [1] 1.0000000 0.1666667 #>  #>  #> $n_blq #> [1] 0 #>  #> $pval #> [1] 0.005768471 #>   # `s_compare.logical`  ## Basic usage: x <- c(TRUE, FALSE, TRUE, TRUE) y <- c(FALSE, FALSE, TRUE) s_compare(x, .ref_group = y, .in_ref_col = FALSE) #> $n #> [1] 4 #>  #> $count #> [1] 3 #>  #> $count_fraction #> [1] 3.00 0.75 #>  #> $n_blq #> [1] 0 #>  #> $pval #> [1] 0.2702894 #>   ## Management of NA values. x <- c(NA, TRUE, FALSE) y <- c(NA, NA, NA, NA, FALSE) s_compare(x, .ref_group = y, .in_ref_col = FALSE, na.rm = TRUE) #> $n #> [1] 2 #>  #> $count #> [1] 1 #>  #> $count_fraction #> [1] 1.0 0.5 #>  #> $n_blq #> [1] 0 #>  #> $pval #> [1] 0.3864762 #>  s_compare(x, .ref_group = y, .in_ref_col = FALSE, na.rm = FALSE) #> $n #> [1] 3 #>  #> $count #> [1] 1 #>  #> $count_fraction #> [1] 1.0000000 0.3333333 #>  #> $n_blq #> [1] 0 #>  #> $pval #> [1] 0.1675463 #>  # `a_compare.numeric` a_compare(   rnorm(10, 5, 1),   .ref_group = rnorm(20, -5, 1),   .in_ref_col = FALSE,   .var = \"bla\" ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>        row_name                     formatted_cell indent_mod #> 1             n                                 10          0 #> 2           sum                               49.6          0 #> 3          mean                                5.0          0 #> 4            sd                                1.2          0 #> 5            se                                0.4          0 #> 6       mean_sd                          5.0 (1.2)          0 #> 7       mean_se                          5.0 (0.4)          0 #> 8       mean_ci                       (4.10, 5.82)          0 #> 9      mean_sei                       (4.58, 5.34)          0 #> 10     mean_sdi                       (3.76, 6.16)          0 #> 11    mean_pval                               0.00          0 #> 12       median                                4.8          0 #> 13          mad                               -0.0          0 #> 14    median_ci                       (4.16, 6.24)          0 #> 15    quantiles                          4.6 - 5.1          0 #> 16          iqr                                0.5          0 #> 17        range                          2.9 - 7.4          0 #> 18          min                                2.9          0 #> 19          max                                7.4          0 #> 20 median_range                    4.8 (2.9 - 7.4)          0 #> 21           cv                               24.2          0 #> 22    geom_mean                                4.8          0 #> 23 geom_mean_ci 4.04291462728108, 5.76920422803094          0 #> 24      geom_cv                               25.2          0 #> 25         pval                            <0.0001          0 #>                      row_label #> 1                            n #> 2                          Sum #> 3                         Mean #> 4                           SD #> 5                           SE #> 6                    Mean (SD) #> 7                    Mean (SE) #> 8                  Mean 95% CI #> 9                Mean -/+ 1xSE #> 10               Mean -/+ 1xSD #> 11 Mean p-value (H0: mean = 0) #> 12                      Median #> 13   Median Absolute Deviation #> 14               Median 95% CI #> 15             25% and 75%-ile #> 16                         IQR #> 17                   Min - Max #> 18                     Minimum #> 19                     Maximum #> 20          Median (Min - Max) #> 21                      CV (%) #> 22              Geometric Mean #> 23       Geometric Mean 95% CI #> 24         CV % Geometric Mean #> 25            p-value (t-test) # `a_compare.factor` # We need to ungroup `count` and `count_fraction` first so that the `rtables` formatting # functions can be applied correctly. afun <- make_afun(   getS3method(\"a_compare\", \"factor\"),   .ungroup_stats = c(\"count\", \"count_fraction\") ) x <- factor(c(\"a\", \"a\", \"b\", \"c\", \"a\")) y <- factor(c(\"a\", \"a\", \"b\", \"c\")) afun(x, .ref_group = y, .in_ref_col = FALSE) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod                  row_label #> 1        n              5          0                          n #> 2        a              3          0                          a #> 3        b              1          0                          b #> 4        c              1          0                          c #> 5        a        3 (60%)          0                          a #> 6        b        1 (20%)          0                          b #> 7        c        1 (20%)          0                          c #> 8    n_blq              0          0                      n_blq #> 9     pval         0.9560          0 p-value (chi-squared test) # `a_compare.character` afun <- make_afun(   getS3method(\"a_compare\", \"character\"),   .ungroup_stats = c(\"count\", \"count_fraction\") ) x <- c(\"A\", \"B\", \"A\", \"C\") y <- c(\"B\", \"A\", \"C\") afun(x, .ref_group = y, .in_ref_col = FALSE, .var = \"x\", verbose = FALSE) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod                  row_label #> 1        n              4          0                          n #> 2        A              2          0                          A #> 3        B              1          0                          B #> 4        C              1          0                          C #> 5        A        2 (50%)          0                          A #> 6        B        1 (25%)          0                          B #> 7        C        1 (25%)          0                          C #> 8    n_blq              0          0                      n_blq #> 9     pval         0.9074          0 p-value (chi-squared test) # `a_compare.logical` afun <- make_afun(   getS3method(\"a_compare\", \"logical\") ) x <- c(TRUE, FALSE, FALSE, TRUE, TRUE) y <- c(TRUE, FALSE) afun(x, .ref_group = y, .in_ref_col = FALSE) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>         row_name formatted_cell indent_mod                  row_label #> 1              n              5          0                          n #> 2          count              3          0                      count #> 3 count_fraction        3 (60%)          0             count_fraction #> 4          n_blq              0          0                      n_blq #> 5           pval         0.8091          0 p-value (chi-squared test) # `compare_vars()` in `rtables` pipelines  ## Default output within a `rtables` pipeline. lyt <- basic_table() %>%   split_cols_by(\"ARMCD\", ref_group = \"ARM B\") %>%   compare_vars(c(\"AGE\", \"SEX\")) build_table(lyt, tern_ex_adsl) #>                                  ARM B        ARM A        ARM C    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> AGE                                                                 #>   n                                73           69           58     #>   Mean (SD)                    35.8 (7.1)   34.1 (6.8)   36.1 (7.4) #>   p-value (t-test)                            0.1446       0.8212   #> SEX                                                                 #>   n                                73           69           58     #>   F                            40 (54.8%)   38 (55.1%)   32 (55.2%) #>   M                            33 (45.2%)   31 (44.9%)   26 (44.8%) #>   p-value (chi-squared test)                  1.0000       1.0000    ## Select and format statistics output. lyt <- basic_table() %>%   split_cols_by(\"ARMCD\", ref_group = \"ARM C\") %>%   compare_vars(     vars = \"AGE\",     .stats = c(\"mean_sd\", \"pval\"),     .formats = c(mean_sd = \"xx.x, xx.x\"),     .labels = c(mean_sd = \"Mean, SD\")   ) build_table(lyt, df = tern_ex_adsl) #>                      ARM C       ARM A       ARM B   #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Mean, SD           36.1, 7.4   34.1, 6.8   35.8, 7.1 #> p-value (t-test)                0.1176      0.8212"},{"path":"https://insightsengineering.github.io/tern/main/reference/control_coxph.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Function for CoxPH Model ‚Äî control_coxph","title":"Control Function for CoxPH Model ‚Äî control_coxph","text":"auxiliary function controlling arguments CoxPH model, typically used internally specify details CoxPH model s_coxph_pairwise. conf_level refers Hazard Ratio estimation.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_coxph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Function for CoxPH Model ‚Äî control_coxph","text":"","code":"control_coxph(   pval_method = c(\"log-rank\", \"wald\", \"likelihood\"),   ties = c(\"efron\", \"breslow\", \"exact\"),   conf_level = 0.95 )"},{"path":"https://insightsengineering.github.io/tern/main/reference/control_coxph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Function for CoxPH Model ‚Äî control_coxph","text":"pval_method (string) p-value method testing hazard ratio = 1. Default method \"log-rank\", can also set \"wald\" \"likelihood\". ties (string) specifying method tie handling. Default \"efron\", can also set \"breslow\" \"exact\". see survival::coxph() conf_level (proportion) confidence level interval.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_coxph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Function for CoxPH Model ‚Äî control_coxph","text":"list components names arguments","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_coxreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Controls for Cox Regression ‚Äî control_coxreg","title":"Controls for Cox Regression ‚Äî control_coxreg","text":"Sets list parameters Cox regression fit. Used internally, see fit_coxreg_univar() fit_coxreg_multivar().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_coxreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Controls for Cox Regression ‚Äî control_coxreg","text":"","code":"control_coxreg(   pval_method = c(\"wald\", \"likelihood\"),   ties = c(\"exact\", \"efron\", \"breslow\"),   conf_level = 0.95,   interaction = FALSE )"},{"path":"https://insightsengineering.github.io/tern/main/reference/control_coxreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Controls for Cox Regression ‚Äî control_coxreg","text":"pval_method (string) method used estimation p.values; wald (default) likelihood. ties (string) among exact (equivalent DISCRETE SAS), efron breslow, see survival::coxph(). Note: equivalent SAS EXACT method R. conf_level (proportion) confidence level interval. interaction (flag) TRUE, model includes interaction studied treatment candidate covariate. Note univariate models without treatment arm, multivariate models, interaction can used needs FALSE.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_coxreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Controls for Cox Regression ‚Äî control_coxreg","text":"list item corresponding arguments.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_coxreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Controls for Cox Regression ‚Äî control_coxreg","text":"","code":"control_coxreg() #> $pval_method #> [1] \"wald\" #>  #> $ties #> [1] \"exact\" #>  #> $conf_level #> [1] 0.95 #>  #> $interaction #> [1] FALSE #>"},{"path":"https://insightsengineering.github.io/tern/main/reference/control_incidence_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Control function for incidence rate ‚Äî control_incidence_rate","title":"Control function for incidence rate ‚Äî control_incidence_rate","text":"auxiliary function controlling arguments incidence rate, used internally specify details s_incidence_rate().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_incidence_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control function for incidence rate ‚Äî control_incidence_rate","text":"","code":"control_incidence_rate(   conf_level = 0.95,   conf_type = c(\"normal\", \"normal_log\", \"exact\", \"byar\"),   time_unit_input = c(\"year\", \"day\", \"week\", \"month\"),   time_unit_output = 1 )"},{"path":"https://insightsengineering.github.io/tern/main/reference/control_incidence_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control function for incidence rate ‚Äî control_incidence_rate","text":"conf_level (proportion) confidence level interval. conf_type (string)normal (default), normal_log, exact, byar confidence interval type. time_unit_input (string)day, month, year (default) indicating time unit data input. time_unit_output (numeric) time unit desired output (person-years).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_incidence_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control function for incidence rate ‚Äî control_incidence_rate","text":"list components name arguments.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/control_incidence_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control function for incidence rate ‚Äî control_incidence_rate","text":"","code":"control_incidence_rate(0.9, \"exact\", \"month\", 100) #> $conf_level #> [1] 0.9 #>  #> $conf_type #> [1] \"exact\" #>  #> $time_unit_input #> [1] \"month\" #>  #> $time_unit_output #> [1] 100 #>"},{"path":"https://insightsengineering.github.io/tern/main/reference/control_lineplot_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Function for g_lineplot Function ‚Äî control_lineplot_vars","title":"Control Function for g_lineplot Function ‚Äî control_lineplot_vars","text":"Default values variables parameter g_lineplot function. variable's default value can overwritten variable.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_lineplot_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Function for g_lineplot Function ‚Äî control_lineplot_vars","text":"","code":"control_lineplot_vars(   x = \"AVISIT\",   y = \"AVAL\",   strata = \"ARM\",   paramcd = \"PARAMCD\",   y_unit = \"AVALU\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/control_lineplot_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Function for g_lineplot Function ‚Äî control_lineplot_vars","text":"x (character) x variable name. y (character) y variable name. strata (character NA) strata variable name. paramcd (character NA) paramcd variable name. y_unit (character NA) y_unit variable name.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_lineplot_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Function for g_lineplot Function ‚Äî control_lineplot_vars","text":"named character vector names variables.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_lineplot_vars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Control Function for g_lineplot Function ‚Äî control_lineplot_vars","text":"Wojciech Wojciak wojciech.wojciak@contractors.roche.com","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_lineplot_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control Function for g_lineplot Function ‚Äî control_lineplot_vars","text":"","code":"control_lineplot_vars() #>         x         y    strata   paramcd    y_unit  #>  \"AVISIT\"    \"AVAL\"     \"ARM\" \"PARAMCD\"   \"AVALU\"  control_lineplot_vars(strata = NA) #>         x         y    strata   paramcd    y_unit  #>  \"AVISIT\"    \"AVAL\"        NA \"PARAMCD\"   \"AVALU\""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Function for Logistic Regression Model Fitting ‚Äî control_logistic","title":"Control Function for Logistic Regression Model Fitting ‚Äî control_logistic","text":"auxiliary function controlling arguments logistic regression models. conf_level refers confidence level used Odds Ratio CIs.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Function for Logistic Regression Model Fitting ‚Äî control_logistic","text":"","code":"control_logistic(response_definition = \"response\", conf_level = 0.95)"},{"path":"https://insightsengineering.github.io/tern/main/reference/control_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Function for Logistic Regression Model Fitting ‚Äî control_logistic","text":"response_definition (string) definition event terms response. used fitting logistic regression model left hand side formula. Note evaluated expression result either logical vector factor 2 levels. default just \"response\" original response variable used modified . conf_level (proportion) confidence level interval.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Function for Logistic Regression Model Fitting ‚Äî control_logistic","text":"list components names arguments.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_logistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control Function for Logistic Regression Model Fitting ‚Äî control_logistic","text":"","code":"# Standard options. control_logistic() #> $response_definition #> [1] \"response\" #>  #> $conf_level #> [1] 0.95 #>   # Modify confidence level. control_logistic(conf_level = 0.9) #> $response_definition #> [1] \"response\" #>  #> $conf_level #> [1] 0.9 #>   # Use a different response definition. control_logistic(response_definition = \"I(response %in% c('CR', 'PR'))\") #> $response_definition #> [1] \"I(response %in% c('CR', 'PR'))\" #>  #> $conf_level #> [1] 0.95 #>"},{"path":"https://insightsengineering.github.io/tern/main/reference/control_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Function for Subgroup Treatment Effect Pattern (STEP) Calculations ‚Äî control_step","title":"Control Function for Subgroup Treatment Effect Pattern (STEP) Calculations ‚Äî control_step","text":"auxiliary function controlling arguments STEP calculations.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Function for Subgroup Treatment Effect Pattern (STEP) Calculations ‚Äî control_step","text":"","code":"control_step(   biomarker = NULL,   use_percentile = TRUE,   bandwidth,   degree = 0L,   num_points = 39L )"},{"path":"https://insightsengineering.github.io/tern/main/reference/control_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Function for Subgroup Treatment Effect Pattern (STEP) Calculations ‚Äî control_step","text":"biomarker (numeric NULL) optional provision numeric biomarker variable, used infer bandwidth, see . use_percentile (flag) TRUE, running windows created according quantiles rather actual values, .e. bandwidth refers percentage data covered window. Suggest TRUE biomarker variable uniformly distributed. bandwidth (number NULL) indicating bandwidth window. Depending argument use_percentile, can either length actual-value windows real biomarker scale, percentage windows. use_percentile = TRUE, number 0 1. NULL, treat bandwidth infinity, means one global model fitted. default, 0.25 used percentage windows one quarter range biomarker variable actual-value windows. degree (count) degree polynomial function biomarker interaction term treatment arm fitted window. 0 (default), biomarker variable included model fitted biomarker window. num_points (count) number points hazard ratios estimated. smallest number 2.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Function for Subgroup Treatment Effect Pattern (STEP) Calculations ‚Äî control_step","text":"list components names arguments, except biomarker just used calculate bandwidth case actual biomarker windows requested.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control Function for Subgroup Treatment Effect Pattern (STEP) Calculations ‚Äî control_step","text":"","code":"# Provide biomarker values and request actual values to be used, # so that bandwidth is chosen from range. control_step(biomarker = 1:10, use_percentile = FALSE) #> $use_percentile #> [1] FALSE #>  #> $bandwidth #> [1] 2.25 #>  #> $degree #> [1] 0 #>  #> $num_points #> [1] 39 #>   # Use a global model with quadratic biomarker interaction term. control_step(bandwidth = NULL, degree = 2) #> $use_percentile #> [1] TRUE #>  #> $bandwidth #> NULL #>  #> $degree #> [1] 2 #>  #> $num_points #> [1] 39 #>   # Reduce number of points to be used. control_step(num_points = 10) #> $use_percentile #> [1] TRUE #>  #> $bandwidth #> [1] 0.25 #>  #> $degree #> [1] 0 #>  #> $num_points #> [1] 10 #>"},{"path":"https://insightsengineering.github.io/tern/main/reference/control_summarize_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Function for Descriptive Statistics ‚Äî control_summarize_vars","title":"Control Function for Descriptive Statistics ‚Äî control_summarize_vars","text":"Sets list parameters summaries descriptive statistics. Typically used internally specify details s_summary.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_summarize_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Function for Descriptive Statistics ‚Äî control_summarize_vars","text":"","code":"control_summarize_vars(   conf_level = 0.95,   quantiles = c(0.25, 0.75),   quantile_type = 2,   test_mean = 0 )"},{"path":"https://insightsengineering.github.io/tern/main/reference/control_summarize_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Function for Descriptive Statistics ‚Äî control_summarize_vars","text":"conf_level (proportion) confidence level interval. quantiles (numeric) length two specify quantiles calculate. quantile_type (numeric) 1 9 selecting quantile algorithms used. Default set 2 matches default quantile algorithm SAS proc univariate set QNTLDEF=5. differs R's default. See type stats::quantile(). test_mean (numeric) test mean null hypothesis calculating p-value.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_summarize_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Function for Descriptive Statistics ‚Äî control_summarize_vars","text":"list components names arguments.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_surv_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Function for survfit Model for Survival Time ‚Äî control_surv_time","title":"Control Function for survfit Model for Survival Time ‚Äî control_surv_time","text":"auxiliary function controlling arguments survfit model, typically used internally specify details survfit model s_surv_time. conf_level refers survival time estimation.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_surv_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Function for survfit Model for Survival Time ‚Äî control_surv_time","text":"","code":"control_surv_time(   conf_level = 0.95,   conf_type = c(\"plain\", \"log\", \"log-log\"),   quantiles = c(0.25, 0.75) )"},{"path":"https://insightsengineering.github.io/tern/main/reference/control_surv_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Function for survfit Model for Survival Time ‚Äî control_surv_time","text":"conf_level (proportion) confidence level interval. conf_type (string) confidence interval type. Options \"plain\" (default), \"log\", \"log-log\", see survival::survfit(). Note option \"none\" longer supported. quantiles (numeric) length two specify quantiles survival time.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_surv_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Function for survfit Model for Survival Time ‚Äî control_surv_time","text":"list components names arguments","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_surv_timepoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Function for survfit Model for Patient's Survival Rate at time point ‚Äî control_surv_timepoint","title":"Control Function for survfit Model for Patient's Survival Rate at time point ‚Äî control_surv_timepoint","text":"auxiliary function controlling arguments survfit model, typically used internally specify details survfit model s_surv_timepoint. conf_level refers patient risk estimation time point.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_surv_timepoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Function for survfit Model for Patient's Survival Rate at time point ‚Äî control_surv_timepoint","text":"","code":"control_surv_timepoint(   conf_level = 0.95,   conf_type = c(\"plain\", \"log\", \"log-log\") )"},{"path":"https://insightsengineering.github.io/tern/main/reference/control_surv_timepoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Function for survfit Model for Patient's Survival Rate at time point ‚Äî control_surv_timepoint","text":"conf_level (proportion) confidence level interval. conf_type (string) confidence interval type. Options \"plain\" (default), \"log\", \"log-log\", see survival::survfit(). Note option \"none\" longer supported.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/control_surv_timepoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Function for survfit Model for Patient's Survival Rate at time point ‚Äî control_surv_timepoint","text":"list components names arguments","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_cumulative.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Counts with Thresholds ‚Äî count_cumulative","title":"Cumulative Counts with Thresholds ‚Äî count_cumulative","text":"Summarize cumulative counts (numeric) vector less , less equal , greater , greater equal user-specific thresholds.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_cumulative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Counts with Thresholds ‚Äî count_cumulative","text":"","code":"s_count_cumulative(   x,   thresholds,   lower_tail = TRUE,   include_eq = TRUE,   .N_col,   ... )  a_count_cumulative(   x,   thresholds,   lower_tail = TRUE,   include_eq = TRUE,   .N_col,   ... )  count_cumulative(   lyt,   vars,   var_labels = vars,   show_labels = \"visible\",   ...,   table_names = vars,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/count_cumulative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative Counts with Thresholds ‚Äî count_cumulative","text":"x (numeric) vector numbers want analyze. thresholds (numeric) vector cutoff value counts. lower_tail (logical) whether count lower tail, default TRUE. include_eq (logical) whether include value equal threshold count, default TRUE. .N_col (count) denominator fraction calculation. ... additional arguments lower level functions. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . var_labels (character) character label. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_cumulative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative Counts with Thresholds ‚Äî count_cumulative","text":"named list count_fractions: list thresholds value component, component contains vector count fraction. a_count_cumulative() returns corresponding list formatted rtables::CellValue().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_cumulative.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Cumulative Counts with Thresholds ‚Äî count_cumulative","text":"s_count_cumulative(): Statistics function produces named lists given numeric vector thresholds. a_count_cumulative(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). count_cumulative(): Layout creating function can used creating summary tables cumulative counts variable. ellipsis (...) conveys arguments s_count_cumulative(), instance lower_tail = FALSE upper tail accounted .","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/count_cumulative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative Counts with Thresholds ‚Äî count_cumulative","text":"","code":"# Internal function - s_count_cumulative if (FALSE) { set.seed(1, kind = \"Mersenne-Twister\") x <- c(sample(1:10, 10), NA) .N_col <- length(x) s_count_cumulative(x, thresholds = c(0, 5, 11), .N_col = .N_col) s_count_cumulative(x, thresholds = c(0, 5, 11), include_eq = FALSE, na.rm = FALSE, .N_col = .N_col) }  # Internal function - a_count_cumulative if (FALSE) { # Use the Formatted Analysis function for `analyze()`. We need to ungroup `count_fraction` first # so that the `rtables` formatting function `format_count_fraction()` can be applied correctly. afun <- make_afun(a_count_cumulative, .ungroup_stats = \"count_fraction\") afun(x, thresholds = c(0, 5, 11), .N_col = .N_col) }  basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   count_cumulative(     vars = \"AGE\",     thresholds = c(40, 60)   ) %>%   build_table(tern_ex_adsl) #>           A: Drug X    B: Placebo   C: Combination #>             (N=69)       (N=73)         (N=58)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> AGE                                                #>   <= 40   52 (75.4%)   58 (79.5%)     41 (70.7%)   #>   <= 60   69 (100%)    73 (100%)      58 (100%)"},{"path":"https://insightsengineering.github.io/tern/main/reference/count_missed_doses.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting Missed Doses ‚Äî count_missed_doses","title":"Counting Missed Doses ‚Äî count_missed_doses","text":"specific functions count patients missed doses. difference count_cumulative() mainly special labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_missed_doses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting Missed Doses ‚Äî count_missed_doses","text":"","code":"s_count_nonmissing(x)  s_count_missed_doses(x, thresholds, .N_col)  a_count_missed_doses(x, thresholds, .N_col)  count_missed_doses(   lyt,   vars,   var_labels = vars,   show_labels = \"visible\",   ...,   table_names = vars,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/count_missed_doses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting Missed Doses ‚Äî count_missed_doses","text":"x (numeric) vector numbers want analyze. thresholds (vector count) number missed doses patients least . .N_col (count) row-wise N (row group count) group observations analyzed (.e. column-based subsetting) passed rtables. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . var_labels (character) character label. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". ... additional arguments lower level functions. table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_missed_doses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting Missed Doses ‚Äî count_missed_doses","text":"s_count_nonmissing() returns statistic n count non-missing values x. s_count_missed_doses() returns statistics n count_fraction one element threshold.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_missed_doses.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Counting Missed Doses ‚Äî count_missed_doses","text":"s_count_nonmissing(): Statistics function count non-missing values. s_count_missed_doses(): Statistics function count patients missed doses x vector number missed doses one value patient. a_count_missed_doses(): Formatted Analysis function count non-missing values. count_missed_doses(): Layout creating function can used creating summary tables summarizing missed doses given user-specified thresholds. additional layer top count_cumulative specifically missed doses.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/count_missed_doses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting Missed Doses ‚Äî count_missed_doses","text":"","code":"set.seed(1) x <- c(sample(1:10, 10), NA)  # Internal function - s_count_nonmissing if (FALSE) { s_count_nonmissing(x) }  # Internal function - s_count_missed_doses if (FALSE) { s_count_missed_doses(x = c(0, 1, 0, 2, 3, 4, 0, 2), thresholds = c(2, 5), .N_col = 10) }  # Internal function - a_count_missed_doses if (FALSE) { #  We need to ungroup `count_fraction` first so that the `rtables` formatting # function `format_count_fraction()` can be applied correctly. afun <- make_afun(a_count_missed_doses, .ungroup_stats = \"count_fraction\") afun(x = c(0, 1, 0, 2, 3, 4, 0, 2), thresholds = c(2, 5), .N_col = 10) }  library(dplyr)  anl <- tern_ex_adsl %>%   distinct(STUDYID, USUBJID, ARM) %>%   mutate(     PARAMCD = \"TNDOSMIS\",     PARAM = \"Total number of missed doses during study\",     AVAL = sample(0:20, size = nrow(tern_ex_adsl), replace = TRUE),     AVALC = \"\"   )  basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   count_missed_doses(\"AVAL\", thresholds = c(1, 5, 10, 15), var_labels = \"Missed Doses\") %>%   build_table(anl, alt_counts_df = tern_ex_adsl) #>                              A: Drug X    B: Placebo   C: Combination #>                                (N=69)       (N=73)         (N=58)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Missed Doses                                                          #>   n                              69           73             58       #>   At least 1 missed dose     65 (94.2%)   67 (91.8%)     58 (100%)    #>   At least 5 missed doses    54 (78.3%)   51 (69.9%)     54 (93.1%)   #>   At least 10 missed doses   31 (44.9%)   40 (54.8%)     31 (53.4%)   #>   At least 15 missed doses   17 (24.6%)   23 (31.5%)     20 (34.5%)"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/count_occurrences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Occurrence Counts ‚Äî count_occurrences","text":"","code":"s_count_occurrences(   df,   denom = c(\"N_col\", \"n\"),   .N_col,   .df_row,   drop = TRUE,   .var = \"MHDECOD\",   id = \"USUBJID\" )  a_count_occurrences(   df,   denom = c(\"N_col\", \"n\"),   .N_col,   .df_row,   drop = TRUE,   .var = \"MHDECOD\",   id = \"USUBJID\" )  count_occurrences(   lyt,   vars,   var_labels = vars,   show_labels = \"hidden\",   ...,   table_names = vars,   .stats = \"count_fraction\",   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/count_occurrences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Occurrence Counts ‚Äî count_occurrences","text":"df (data.frame) data set containing analysis variables. denom (string) choice denominator patient proportions. Can : N_col: total number patients column across rows n: number patients occurrences .N_col (count) row-wise N (row group count) group observations analyzed (.e. column-based subsetting) passed rtables. .df_row (data.frame) data frame across columns given row split. drop (flag) non appearing occurrence levels dropped resulting table. Note case remaining occurrence levels table sorted alphabetically. .var (string) single variable name passed rtables requested statistics function. id (string) subject variable name. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . var_labels (character) character label. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". ... additional arguments lower level functions. table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_occurrences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Occurrence Counts ‚Äî count_occurrences","text":"list : count list counts one element per occurrence. count_fraction list counts fractions one element per occurrence. fraction list numerators denominators one element per occurrence.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_occurrences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Occurrence Counts ‚Äî count_occurrences","text":"Functions analyzing frequencies fractions occurrences patients occurrence data. Primary analysis variables dictionary terms. occurrences counted total counts. Multiple occurrences within patient lowest term level displayed table counted . Note default occurrences appear given row split dropped table occurrences table sorted alphabetically per row split. Therefore corresponding layout needs use split_fun = drop_split_levels split_rows_by calls. Use drop = FALSE like show occurrences.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_occurrences.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Occurrence Counts ‚Äî count_occurrences","text":"s_count_occurrences(): Statistics function counts number patients report occurrence. a_count_occurrences(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). count_occurrences(): Analyze Function counts occurrences part rtables layouts.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_occurrences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Occurrence Counts ‚Äî count_occurrences","text":"","code":"df <- data.frame(   USUBJID = as.character(c(1, 1, 2, 4, 4, 4)),   MHDECOD = c(\"MH1\", \"MH2\", \"MH1\", \"MH1\", \"MH1\", \"MH3\") )  N_per_col <- 4L  # Count unique occurrences per subject. s_count_occurrences(   df,   .N_col = N_per_col,   .df_row = df,   .var = \"MHDECOD\",   id = \"USUBJID\" ) #> $count #> $count$MH1 #> [1] 3 #>  #> $count$MH2 #> [1] 1 #>  #> $count$MH3 #> [1] 1 #>  #>  #> $count_fraction #> $count_fraction$MH1 #> [1] 3.00 0.75 #>  #> $count_fraction$MH2 #> [1] 1.00 0.25 #>  #> $count_fraction$MH3 #> [1] 1.00 0.25 #>  #>  #> $fraction #> $fraction$MH1 #>   num denom  #>     3     4  #>  #> $fraction$MH2 #>   num denom  #>     1     4  #>  #> $fraction$MH3 #>   num denom  #>     1     4  #>  #>   #  We need to ungroup `count_fraction` first so that the `rtables` formatting # function `format_count_fraction()` can be applied correctly. afun <- make_afun(a_count_occurrences, .ungroup_stats = c(\"count\", \"count_fraction\", \"fraction\")) afun(   df,   .N_col = N_per_col,   .df_row = df,   .var = \"MHDECOD\",   id = \"USUBJID\" ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1      MH1              3          0       MH1 #> 2      MH2              1          0       MH2 #> 3      MH3              1          0       MH3 #> 4      MH1      3 (75.0%)          0       MH1 #> 5      MH2      1 (25.0%)          0       MH2 #> 6      MH3      1 (25.0%)          0       MH3 #> 7      MH1    3/4 (75.0%)          0       MH1 #> 8      MH2    1/4 (25.0%)          0       MH2 #> 9      MH3    1/4 (25.0%)          0       MH3  library(dplyr) df <- data.frame(   USUBJID = as.character(c(     1, 1, 2, 4, 4, 4,     6, 6, 6, 7, 7, 8   )),   MHDECOD = c(     \"MH1\", \"MH2\", \"MH1\", \"MH1\", \"MH1\", \"MH3\",     \"MH2\", \"MH2\", \"MH3\", \"MH1\", \"MH2\", \"MH4\"   ),   ARM = rep(c(\"A\", \"B\"), each = 6) ) df_adsl <- df %>%   select(USUBJID, ARM) %>%   unique()  # Create table layout lyt <- basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   count_occurrences(vars = \"MHDECOD\", .stats = c(\"count_fraction\"))  # Apply table layout to data and produce `rtable` object lyt %>%   build_table(df, alt_counts_df = df_adsl) %>%   prune_table() #>           A           B     #>         (N=3)       (N=3)   #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> MH1   3 (100%)    1 (33.3%) #> MH2   1 (33.3%)   2 (66.7%) #> MH3   1 (33.3%)   1 (33.3%) #> MH4       0       1 (33.3%)"},{"path":"https://insightsengineering.github.io/tern/main/reference/count_occurrences_by_grade.html","id":null,"dir":"Reference","previous_headings":"","what":"Occurrence Counts by Grade ‚Äî count_occurrences_by_grade","title":"Occurrence Counts by Grade ‚Äî count_occurrences_by_grade","text":"Functions analyzing frequencies fractions occurrences grade patients occurrence data. Multiple occurrences within one individual counted greatest intensity/highest grade level.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_occurrences_by_grade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Occurrence Counts by Grade ‚Äî count_occurrences_by_grade","text":"","code":"s_count_occurrences_by_grade(   df,   .var,   .N_col,   id = \"USUBJID\",   grade_groups = list(),   remove_single = TRUE,   labelstr = \"\" )  a_count_occurrences_by_grade(   df,   .var,   .N_col,   id = \"USUBJID\",   grade_groups = list(),   remove_single = TRUE,   labelstr = \"\" )  count_occurrences_by_grade(   lyt,   var,   var_labels = var,   show_labels = \"default\",   ...,   table_names = var,   .stats = NULL,   .formats = NULL,   .indent_mods = NULL,   .labels = NULL )  summarize_occurrences_by_grade(   lyt,   var,   ...,   .stats = NULL,   .formats = NULL,   .indent_mods = NULL,   .labels = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/count_occurrences_by_grade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Occurrence Counts by Grade ‚Äî count_occurrences_by_grade","text":"df (data.frame) data set containing analysis variables. .var, var (string) single variable name passed rtables requested statistics function. .N_col (count) row-wise N (row group count) group observations analyzed (.e. column-based subsetting) passed rtables. id (string) subject variable name. grade_groups (named list character) containing groupings grades. remove_single (logical)TRUE include elements one-element grade groups output list; case grade groups names included output. labelstr (character) label level parent split currently summarized (must present second argument Content Row Functions). lyt (layout) input layout analyses added . var_labels (character) labels show result table. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". ... additional arguments lower level functions. table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .indent_mods (named integer) indent modifiers labels. .labels (named character) labels statistics (without indent).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_occurrences_by_grade.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Occurrence Counts by Grade ‚Äî count_occurrences_by_grade","text":"s_count_occurrences_by_grade(): Statistics function given occurrence data counts number patients highest grade. Returns list counts fractions one element per grade level grade level grouping. a_count_occurrences_by_grade(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). count_occurrences_by_grade(): Layout creating function can used creating tables, can take statistics function arguments additional format arguments (see ). summarize_occurrences_by_grade(): Layout creating function adds content rows using statistics function additional format arguments (see ).","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/count_occurrences_by_grade.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Occurrence Counts by Grade ‚Äî count_occurrences_by_grade","text":"","code":"library(dplyr) df <- data.frame(   USUBJID = as.character(c(1:6, 1)),   ARM = factor(c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"A\"), levels = c(\"A\", \"B\")),   AETOXGR = factor(c(1, 2, 3, 4, 1, 2, 3), levels = c(1:5)),   AESEV = factor(     x = c(\"MILD\", \"MODERATE\", \"SEVERE\", \"MILD\", \"MILD\", \"MODERATE\", \"SEVERE\"),     levels = c(\"MILD\", \"MODERATE\", \"SEVERE\")   ),   stringsAsFactors = FALSE ) df_adsl <- df %>%   select(USUBJID, ARM) %>%   unique()  s_count_occurrences_by_grade(   df,   .N_col = 10L, # nolint   .var = \"AETOXGR\",   id = \"USUBJID\",   grade_groups = list(\"ANY\" = levels(df$AETOXGR)) ) #> $count_fraction #> $count_fraction$ANY #> [1] 6.0 0.6 #>  #> $count_fraction$`1` #> [1] 1.0 0.1 #>  #> $count_fraction$`2` #> [1] 2.0 0.2 #>  #> $count_fraction$`3` #> [1] 2.0 0.2 #>  #> $count_fraction$`4` #> [1] 1.0 0.1 #>  #> $count_fraction$`5` #> [1] 0 0 #>  #>   #  We need to ungroup `count_fraction` first so that the `rtables` formatting # function `format_count_fraction()` can be applied correctly. afun <- make_afun(a_count_occurrences_by_grade, .ungroup_stats = \"count_fraction\") afun(   df,   .N_col = 10L, # nolint   .var = \"AETOXGR\",   id = \"USUBJID\",   grade_groups = list(\"ANY\" = levels(df$AETOXGR)) ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1      ANY      6 (60.0%)          0       ANY #> 2        1      1 (10.0%)          0         1 #> 3        2      2 (20.0%)          0         2 #> 4        3      2 (20.0%)          0         3 #> 5        4      1 (10.0%)          0         4 #> 6        5              0          0         5  # Layout creating function with custom format. basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   count_occurrences_by_grade(     var = \"AESEV\",     .formats = c(\"count_fraction\" = \"xx.xx (xx.xx%)\")   ) %>%   build_table(df, alt_counts_df = df_adsl) #>                  A               B       #>                (N=3)           (N=3)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> MILD       0.00 (0.00%)    2.00 (66.67%) #> MODERATE   1.00 (33.33%)   1.00 (33.33%) #> SEVERE     2.00 (66.67%)   0.00 (0.00%)   # Define additional grade groupings. grade_groups <- list(   \"-Any-\" = c(\"1\", \"2\", \"3\", \"4\", \"5\"),   \"Grade 1-2\" = c(\"1\", \"2\"),   \"Grade 3-5\" = c(\"3\", \"4\", \"5\") )  basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   count_occurrences_by_grade(     var = \"AETOXGR\",     grade_groups = grade_groups   ) %>%   build_table(df, alt_counts_df = df_adsl) #>                 A           B     #>               (N=3)       (N=3)   #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> -Any-       3 (100%)    3 (100%)  #> Grade 1-2   1 (33.3%)   2 (66.7%) #> 1               0       1 (33.3%) #> 2           1 (33.3%)   1 (33.3%) #> Grade 3-5   2 (66.7%)   1 (33.3%) #> 3           2 (66.7%)       0     #> 4               0       1 (33.3%) #> 5               0           0      # Layout creating function with custom format. basic_table() %>%   add_colcounts() %>%   split_rows_by(\"ARM\", child_labels = \"visible\", nested = TRUE) %>%   summarize_occurrences_by_grade(     var = \"AESEV\",     .formats = c(\"count_fraction\" = \"xx.xx (xx.xx%)\")   ) %>%   build_table(df, alt_counts_df = df_adsl) #>                 all obs    #>                  (N=6)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> A                          #>   MILD       0.00 (0.00%)  #>   MODERATE   1.00 (16.67%) #>   SEVERE     2.00 (33.33%) #> B                          #>   MILD       2.00 (33.33%) #>   MODERATE   1.00 (16.67%) #>   SEVERE     0.00 (0.00%)   basic_table() %>%   add_colcounts() %>%   split_rows_by(\"ARM\", child_labels = \"visible\", nested = TRUE) %>%   summarize_occurrences_by_grade(     var = \"AETOXGR\",     grade_groups = grade_groups   ) %>%   build_table(df, alt_counts_df = df_adsl) #>                all obs  #>                 (N=6)   #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> A                       #>   -Any-       3 (50.0%) #>   Grade 1-2   1 (16.7%) #>   1               0     #>   2           1 (16.7%) #>   Grade 3-5   2 (33.3%) #>   3           2 (33.3%) #>   4               0     #>   5               0     #> B                       #>   -Any-       3 (50.0%) #>   Grade 1-2   2 (33.3%) #>   1           1 (16.7%) #>   2           1 (16.7%) #>   Grade 3-5   1 (16.7%) #>   3               0     #>   4           1 (16.7%) #>   5               0"},{"path":"https://insightsengineering.github.io/tern/main/reference/count_patients_events_in_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting Patients and Events in Columns ‚Äî count_patients_events_in_cols","title":"Counting Patients and Events in Columns ‚Äî count_patients_events_in_cols","text":"Counting number unique patients total number specific events column table layout required.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_patients_events_in_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting Patients and Events in Columns ‚Äî count_patients_events_in_cols","text":"","code":"s_count_patients_and_multiple_events(   df,   id,   filters_list,   empty_stats = character(),   labelstr = \"\",   custom_label = NULL )  summarize_patients_events_in_cols(   lyt,   id = \"USUBJID\",   filters_list = list(),   ...,   .stats = c(\"unique\", \"all\", names(filters_list)),   .labels = c(unique = \"Patients (All)\", all = \"Events (All)\",     labels_or_names(filters_list)),   col_split = TRUE )"},{"path":"https://insightsengineering.github.io/tern/main/reference/count_patients_events_in_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting Patients and Events in Columns ‚Äî count_patients_events_in_cols","text":"df (data.frame) data set containing analysis variables. id (string) subject variable name. filters_list (named list character) element list describes one type event describe filters, format s_count_patients_with_event(). label, used column title. empty_stats (character) optional names statistics returned empty corresponding table cells stay blank. labelstr (character) label level parent split currently summarized (must present second argument Content Row Functions). custom_label (string NULL) provided labelstr empty used label. lyt (layout) input layout analyses added . ... additional arguments lower level functions. .stats (character) statistics select table. .labels (named character) labels statistics (without indent). col_split (flag) whether columns split. Set FALSE required column split done already earlier layout pipe.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_patients_events_in_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting Patients and Events in Columns ‚Äî count_patients_events_in_cols","text":"s_count_patients_and_multiple_events() returns list statistics: unique: number unique patients df. : number rows df. one element name filters_list: number rows df, .e. events, fulfilling filter condition.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_patients_events_in_cols.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Counting Patients and Events in Columns ‚Äî count_patients_events_in_cols","text":"s_count_patients_and_multiple_events(): Statistics function counts numbers patients multiple events defined filters. summarize_patients_events_in_cols(): Layout creating function adds count statistics patients events column layout content rows.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_patients_events_in_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting Patients and Events in Columns ‚Äî count_patients_events_in_cols","text":"","code":"# `s_count_patients_and_multiple_events()` df <- data.frame(   USUBJID = rep(c(\"id1\", \"id2\", \"id3\", \"id4\"), c(2, 3, 1, 1)),   ARM = c(\"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"A\"),   AESER = rep(\"Y\", 7),   AESDTH = c(\"Y\", \"Y\", \"N\", \"Y\", \"Y\", \"N\", \"N\"),   AEREL = c(\"Y\", \"Y\", \"N\", \"Y\", \"Y\", \"N\", \"Y\"),   AEDECOD = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"D\"),   AEBODSYS = rep(c(\"SOC1\", \"SOC2\", \"SOC3\"), c(3, 3, 1)) )  # Internal function - s_count_patients_and_multiple_events if (FALSE) { s_count_patients_and_multiple_events(   df = df,   id = \"USUBJID\",   filters_list = list(     serious = c(AESER = \"Y\"),     fatal = c(AESDTH = \"Y\")   ) ) }   # `summarize_patients_events_in_cols()` basic_table() %>%   summarize_patients_events_in_cols(     filters_list = list(       related = formatters::with_label(c(AEREL = \"Y\"), \"Events (Related)\"),       fatal = c(AESDTH = \"Y\"),       fatal_related = c(AEREL = \"Y\", AESDTH = \"Y\")     ),     custom_label = \"%s Total number of patients and events\"   ) %>%   build_table(df) #>                                          Patients (All)   Events (All)   Events (Related)   fatal   fatal_related #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> %s Total number of patients and events         4               7                5             4           4"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/count_patients_with_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the Number of Patients with a Particular Event ‚Äî count_patients_with_event","text":"","code":"s_count_patients_with_event(   df,   .var,   filters,   .N_col,   .N_row,   denom = c(\"n\", \"N_row\", \"N_col\") )  a_count_patients_with_event(   df,   .var,   filters,   .N_col,   .N_row,   denom = c(\"n\", \"N_row\", \"N_col\") )  count_patients_with_event(   lyt,   vars,   ...,   table_names = vars,   .stats = \"count_fraction\",   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )  s_count_patients_with_flags(   df,   .var,   flag_variables,   .N_col,   .N_row,   denom = c(\"n\", \"N_row\", \"N_col\") )  a_count_patients_with_flags(   df,   .var,   flag_variables,   .N_col,   .N_row,   denom = c(\"n\", \"N_row\", \"N_col\") )  count_patients_with_flags(   lyt,   var,   var_labels = var,   show_labels = \"hidden\",   ...,   table_names = paste0(\"tbl_flags_\", var),   .stats = \"count_fraction\",   .formats = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/count_patients_with_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the Number of Patients with a Particular Event ‚Äî count_patients_with_event","text":"df (data.frame) data set containing analysis variables. .var (character) name column contains unique identifier. filters (character) character vector specifying column names flag variables used counting number unique identifiers satisfying conditions. Multiple column names flags accepted format c(\"column_name1\" = \"flag1\", \"column_name2\" = \"flag2\"). Note equality accepted condition. .N_col (count) row-wise N (row group count) group observations analyzed (.e. column-based subsetting) passed rtables. .N_row (count) column-wise N (column count) full column passed rtables. denom (string) choice denominator proportion. Options : n: number values row column intersection. N_row: total number values row across columns. N_col: total number values column across rows. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . ... additional arguments lower level functions. table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels. flag_variables (character) character vector specifying names logical variables analysis dataset used counting number unique identifiers. var (string) single variable name passed rtables requested statistics function. var_labels (character) character label. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\".","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_patients_with_event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the Number of Patients with a Particular Event ‚Äî count_patients_with_event","text":"s_count_patients_with_event() returns count fraction patients defined event.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_patients_with_event.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count the Number of Patients with a Particular Event ‚Äî count_patients_with_event","text":"primary analysis variable .var denotes unique patient identifier.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_patients_with_event.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Count the Number of Patients with a Particular Event ‚Äî count_patients_with_event","text":"s_count_patients_with_event(): Statistics Function returns number fraction unique identifiers particular type event, e.g. number fraction patients treatment-emergent adverse events. Note user can define new data column containing event interest. a_count_patients_with_event(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). count_patients_with_event(): Analyze Function adds count statistics input layout. Note additional formatting arguments can used . s_count_patients_with_flags(): Statistics function returns number fraction unique identifiers particular flag. Returns list totals, counts, counts fractions one element per flag. a_count_patients_with_flags(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). count_patients_with_flags(): Analyze Function modified version count_patients_with_event(). Adds count statistics input layout multiple flag variables .","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_patients_with_event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the Number of Patients with a Particular Event ‚Äî count_patients_with_event","text":"","code":"library(dplyr)  # `s_count_patients_with_event()`  s_count_patients_with_event(   tern_ex_adae,   .var = \"SUBJID\",   filters = c(\"TRTEMFL\" = \"Y\") ) #> $n #> [1] 164 #>  #> $count #> [1] 164 #>  #> $count_fraction #> [1] 164   1 #>  #> $n_blq #> [1] 0 #>  s_count_patients_with_event(   tern_ex_adae,   .var = \"SUBJID\",   filters = c(\"TRTEMFL\" = \"Y\", \"AEOUT\" = \"FATAL\") ) #> $n #> [1] 164 #>  #> $count #> [1] 79 #>  #> $count_fraction #> [1] 79.0000000  0.4817073 #>  #> $n_blq #> [1] 0 #>  s_count_patients_with_event(   tern_ex_adae,   .var = \"SUBJID\",   filters = c(\"TRTEMFL\" = \"Y\", \"AEOUT\" = \"FATAL\"),   denom = \"N_col\",   .N_col = 456 ) #> $n #> [1] 164 #>  #> $count #> [1] 79 #>  #> $count_fraction #> [1] 79.0000000  0.1732456 #>  #> $n_blq #> [1] 0 #>  # `a_count_patients_with_event()`  a_count_patients_with_event(   tern_ex_adae,   .var = \"SUBJID\",   filters = c(\"TRTEMFL\" = \"Y\"),   .N_col = 100,   .N_row = 100 ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>         row_name formatted_cell indent_mod      row_label #> 1              n            164          0              n #> 2          count            164          0          count #> 3 count_fraction     164 (100%)          0 count_fraction #> 4          n_blq              0          0          n_blq # `count_patients_with_event()`  lyt <- basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   count_values(     \"STUDYID\",     values = \"AB12345\",     .stats = \"count\",     .labels = c(count = \"Total AEs\")   ) %>%   count_patients_with_event(     \"SUBJID\",     filters = c(\"TRTEMFL\" = \"Y\"),     .labels = c(count_fraction = \"Total number of patients with at least one adverse event\"),     table_names = \"tbl_all\"   ) %>%   count_patients_with_event(     \"SUBJID\",     filters = c(\"TRTEMFL\" = \"Y\", \"AEOUT\" = \"FATAL\"),     .labels = c(count_fraction = \"Total number of patients with fatal AEs\"),     table_names = \"tbl_fatal\"   ) %>%   count_patients_with_event(     \"SUBJID\",     filters = c(\"TRTEMFL\" = \"Y\", \"AEOUT\" = \"FATAL\", \"AEREL\" = \"Y\"),     .labels = c(count_fraction = \"Total number of patients with related fatal AEs\"),     .indent_mods = c(count_fraction = 2L),     table_names = \"tbl_rel_fatal\"   ) build_table(lyt, tern_ex_adae, alt_counts_df = tern_ex_adsl) #>                                                            A: Drug X    B: Placebo   C: Combination #>                                                              (N=69)       (N=73)         (N=58)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Total AEs                                                     202          177            162       #> Total number of patients with at least one adverse event   59 (100%)    57 (100%)      48 (100%)    #> Total number of patients with fatal AEs                    28 (47.5%)   31 (54.4%)     20 (41.7%)   #>     Total number of patients with related fatal AEs        28 (47.5%)   31 (54.4%)     20 (41.7%)   # `s_count_patients_with_flags()`  # Add labelled flag variables to analysis dataset. adae <- tern_ex_adae %>%   mutate(     fl1 = TRUE,     fl2 = TRTEMFL == \"Y\",     fl3 = TRTEMFL == \"Y\" & AEOUT == \"FATAL\",     fl4 = TRTEMFL == \"Y\" & AEOUT == \"FATAL\" & AEREL == \"Y\"   ) labels <- c(   \"fl1\" = \"Total AEs\",   \"fl2\" = \"Total number of patients with at least one adverse event\",   \"fl3\" = \"Total number of patients with fatal AEs\",   \"fl4\" = \"Total number of patients with related fatal AEs\" ) formatters::var_labels(adae)[names(labels)] <- labels  s_count_patients_with_flags(   adae,   \"SUBJID\",   flag_variables = c(\"fl1\", \"fl2\", \"fl3\", \"fl4\"),   denom = \"N_col\",   .N_col = 1000 ) #> $n #> $n$fl1 #> [1] 164 #>  #> $n$fl2 #> [1] 164 #>  #> $n$fl3 #> [1] 164 #>  #> $n$fl4 #> [1] 164 #>  #>  #> $count #> $count$fl1 #> [1] 164 #>  #> $count$fl2 #> [1] 164 #>  #> $count$fl3 #> [1] 79 #>  #> $count$fl4 #> [1] 79 #>  #>  #> $count_fraction #> $count_fraction$fl1 #> [1] 164.000   0.164 #>  #> $count_fraction$fl2 #> [1] 164.000   0.164 #>  #> $count_fraction$fl3 #> [1] 79.000  0.079 #>  #> $count_fraction$fl4 #> [1] 79.000  0.079 #>  #>  #> $n_blq #> $n_blq$fl1 #> [1] 0 #>  #> $n_blq$fl2 #> [1] 0 #>  #> $n_blq$fl3 #> [1] 0 #>  #> $n_blq$fl4 #> [1] 0 #>  #>  #  We need to ungroup `count_fraction` first so that the `rtables` formatting # function `format_count_fraction()` can be applied correctly.  # `a_count_patients_with_flags()`  afun <- make_afun(a_count_patients_with_flags,   .stats = \"count_fraction\",   .ungroup_stats = \"count_fraction\" ) afun(   adae,   .N_col = 10L, # nolint   .N_row = 10L,   .var = \"USUBJID\",   flag_variables = c(\"fl1\", \"fl2\", \"fl3\", \"fl4\") ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1      fl1     164 (100%)          0       fl1 #> 2      fl2     164 (100%)          0       fl2 #> 3      fl3     79 (48.2%)          0       fl3 #> 4      fl4     79 (48.2%)          0       fl4 # `count_patients_with_flags()`  lyt2 <- basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   count_patients_with_flags(     \"SUBJID\",     flag_variables = formatters::var_labels(adae[, c(\"fl1\", \"fl2\", \"fl3\", \"fl4\")]),     denom = \"N_col\"   ) build_table(lyt2, adae, alt_counts_df = tern_ex_adsl) #>                                                            A: Drug X    B: Placebo   C: Combination #>                                                              (N=69)       (N=73)         (N=58)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Total AEs                                                  59 (85.5%)   57 (78.1%)     48 (82.8%)   #> Total number of patients with at least one adverse event   59 (85.5%)   57 (78.1%)     48 (82.8%)   #> Total number of patients with fatal AEs                    28 (40.6%)   31 (42.5%)     20 (34.5%)   #> Total number of patients with related fatal AEs            28 (40.6%)   31 (42.5%)     20 (34.5%)"},{"path":"https://insightsengineering.github.io/tern/main/reference/count_values_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting Specific Values ‚Äî count_values_funs","title":"Counting Specific Values ‚Äî count_values_funs","text":"can count occurrence specific values variable interest.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_values_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting Specific Values ‚Äî count_values_funs","text":"","code":"s_count_values(   x,   values,   na.rm = TRUE,   .N_col,   .N_row,   denom = c(\"n\", \"N_row\", \"N_col\") )  # S3 method for character s_count_values(x, values = \"Y\", na.rm = TRUE, ...)  # S3 method for factor s_count_values(x, values = \"Y\", ...)  # S3 method for logical s_count_values(x, values = TRUE, ...)  a_count_values(   x,   values,   na.rm = TRUE,   .N_col,   .N_row,   denom = c(\"n\", \"N_row\", \"N_col\") )  count_values(   lyt,   vars,   values,   ...,   table_names = vars,   .stats = \"count_fraction\",   .formats = NULL,   .labels = c(count_fraction = paste(values, collapse = \", \")),   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/count_values_funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting Specific Values ‚Äî count_values_funs","text":"x (numeric) vector numbers want analyze. values (character) specific values counted. na.rm (flag) whether NA values removed x prior analysis. .N_col (count) row-wise N (row group count) group observations analyzed (.e. column-based subsetting) passed rtables. .N_row (count) column-wise N (column count) full column passed rtables. denom (string) choice denominator proportion. Options : n: number values row column intersection. N_row: total number values row across columns. N_col: total number values column across rows. ... additional arguments lower level functions. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_values_funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting Specific Values ‚Äî count_values_funs","text":"See s_summary.logical() returned statistics, used inside.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_values_funs.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Counting Specific Values ‚Äî count_values_funs","text":"s_count_values(): Statistics Function generic function count values. s_count_values(character): Method character vectors x. s_count_values(factor): method factor vectors x. checks whether values included levels x fails otherwise. proceeds converting character calling s_count_values.character. s_count_values(logical): method logical vectors x. a_count_values(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). count_values(): Analyze Function adds counting analysis input layout. Note additional formatting arguments can used .","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_values_funs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Counting Specific Values ‚Äî count_values_funs","text":"Variable labels shown one element vars, otherwise hidden.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/count_values_funs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting Specific Values ‚Äî count_values_funs","text":"","code":"# `s_count_values.character` s_count_values(x = c(\"a\", \"b\", \"a\"), values = \"a\") #> $n #> [1] 3 #>  #> $count #> [1] 2 #>  #> $count_fraction #> [1] 2.0000000 0.6666667 #>  #> $n_blq #> [1] 0 #>  s_count_values(x = c(\"a\", \"b\", \"a\", NA, NA), values = \"b\", na.rm = FALSE) #> $n #> [1] 5 #>  #> $count #> [1] 1 #>  #> $count_fraction #> [1] 1.0 0.2 #>  #> $n_blq #> [1] 0 #>  # `s_count_values.factor` s_count_values(x = factor(c(\"a\", \"b\", \"a\")), values = \"a\") #> $n #> [1] 3 #>  #> $count #> [1] 2 #>  #> $count_fraction #> [1] 2.0000000 0.6666667 #>  #> $n_blq #> [1] 0 #>  # `s_count_values.logical` s_count_values(x = c(TRUE, FALSE, TRUE)) #> $n #> [1] 3 #>  #> $count #> [1] 2 #>  #> $count_fraction #> [1] 2.0000000 0.6666667 #>  #> $n_blq #> [1] 0 #>  # `a_count_values` a_count_values(x = factor(c(\"a\", \"b\", \"a\")), values = \"a\", .N_col = 10, .N_row = 10) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>         row_name formatted_cell indent_mod      row_label #> 1              n              3          0              n #> 2          count              2          0          count #> 3 count_fraction     2 (66.67%)          0 count_fraction #> 4          n_blq              0          0          n_blq # `count_values` basic_table() %>%   count_values(\"Species\", values = \"setosa\") %>%   build_table(iris) #>            all obs   #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> setosa   50 (33.33%)"},{"path":"https://insightsengineering.github.io/tern/main/reference/cox_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Cox Proportional Hazards Regression ‚Äî cox_regression","title":"Cox Proportional Hazards Regression ‚Äî cox_regression","text":"Fits Cox regression model estimates hazard ratio describe effect size survival analysis.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/cox_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cox Proportional Hazards Regression ‚Äî cox_regression","text":"","code":"s_coxreg(model_df, .stats, .which_vars = \"all\", .var_nms = NULL)  a_coxreg(   df,   labelstr,   eff = FALSE,   var_main = FALSE,   multivar = FALSE,   variables,   at = list(),   control = control_coxreg(),   .spl_context,   .stats,   .formats,   na_level = \"\",   cache_env = NULL )  summarize_coxreg(   lyt,   variables,   control = control_coxreg(),   at = list(),   multivar = FALSE,   common_var = \"STUDYID\",   .stats = c(\"n\", \"hr\", \"ci\", \"pval\", \"pval_inter\"),   .formats = c(n = \"xx\", hr = \"xx.xx\", ci = \"(xx.xx, xx.xx)\", pval =     \"x.xxxx | (<0.0001)\", pval_inter = \"x.xxxx | (<0.0001)\"),   varlabels = NULL,   .indent_mods = NULL,   na_level = \"\",   .section_div = NA_character_ )"},{"path":"https://insightsengineering.github.io/tern/main/reference/cox_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cox Proportional Hazards Regression ‚Äî cox_regression","text":"model_df (data.frame) contains resulting model fit fit_coxreg function tidying applied via broom::tidy(). .stats (character) name statistics reported among: n: number observations (univariable ) hr: hazard ratio ci: confidence interval pval: p-value treatment effect pval_inter: p-value interaction effect treatment covariate (univariable ) .which_vars (character) rows statistics returned given model. Defaults \"\". options include \"var_main\" main effects, \"inter\" interaction effects, \"multi_lvl\" multivariable model covariate level rows. .which_vars \"\" specific variables can selected specifying .var_nms. .var_nms (character) term value rows df .stats returned. Typically name variable. using variable labels, var vector desired variable name variable label order see .stats related variable. .which_vars \"var_main\" .var_nms variable name. df (data.frame) data set containing analysis variables. labelstr (character) label level parent split currently summarized (must present second argument Content Row Functions). eff (flag) whether treatment effect calculated. Defaults FALSE. var_main (flag) whether main effects calculated. Defaults FALSE. multivar (flag) Defaults FALSE. TRUE multivariable Cox regression run, otherwise univariable Cox regression run. variables (named list string) list additional analysis variables. (list numeric) candidate covariate numeric, use specify value covariate effect estimated. control (list) list parameters returned helper function control_coxreg(). .spl_context (data.frame) gives information ancestor split states passed rtables. .formats (named character list) formats statistics. na_level (string) custom string replace NA values . Defaults \"\". cache_env (environment) environment object used cache regression model order avoid repeatedly fitting model every row table. Defaults NULL (caching). lyt (layout) input layout analyses added . common_var (character) name factor variable dataset takes value rows. created pre-processing variable currently exists. .indent_mods (named integer) indent modifiers labels. .section_div (character) string repeated section divider sections. Defaults NA section divider. vector two strings given, first used treatment covariate sections second different covariates.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/cox_regression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cox Proportional Hazards Regression ‚Äî cox_regression","text":"Cox models commonly used methods estimate magnitude effect survival analysis. assumes proportional hazards: ratio hazards groups (e.g., two arms) constant time. ratio referred \"hazard ratio\" (HR) one commonly reported metrics describe effect size survival analysis (NEST Team, 2020).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/cox_regression.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Cox Proportional Hazards Regression ‚Äî cox_regression","text":"s_coxreg(): transforms tabulated results fit_coxreg_univar() fit_coxreg_multivar() list. much calculation done , rather prepares data used layout creating function. a_coxreg(): Analysis function. used afun rtables::analyze() cfun rtables::summarize_row_groups() within summarize_coxreg(). summarize_coxreg(): layout creating function.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/cox_regression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cox Proportional Hazards Regression ‚Äî cox_regression","text":"","code":"library(survival)  # Testing dataset [survival::bladder]. set.seed(1, kind = \"Mersenne-Twister\") dta_bladder <- with(   data = bladder[bladder$enum < 5, ],   tibble::tibble(     TIME = stop,     STATUS = event,     ARM = as.factor(rx),     COVAR1 = as.factor(enum) %>% formatters::with_label(\"A Covariate Label\"),     COVAR2 = factor(       sample(as.factor(enum)),       levels = 1:4, labels = c(\"F\", \"F\", \"M\", \"M\")     ) %>% formatters::with_label(\"Sex (F/M)\")   ) ) dta_bladder$AGE <- sample(20:60, size = nrow(dta_bladder), replace = TRUE) dta_bladder$STUDYID <- factor(\"X\")  plot(   survfit(Surv(TIME, STATUS) ~ ARM + COVAR1, data = dta_bladder),   lty = 2:4,   xlab = \"Months\",   col = c(\"blue1\", \"blue2\", \"blue3\", \"blue4\", \"red1\", \"red2\", \"red3\", \"red4\") )   # s_coxreg  # Univariable u1_variables <- list(   time = \"TIME\", event = \"STATUS\", arm = \"ARM\", covariates = c(\"COVAR1\", \"COVAR2\") ) univar_model <- fit_coxreg_univar(variables = u1_variables, data = dta_bladder) df1 <- broom::tidy(univar_model) s_coxreg(model_df = df1, .stats = \"hr\") #> $hr #> $hr$`2 vs control (1)` #> [1] 0.6386426 #>  #>  #> $hr #> $hr$`A Covariate Label` #> [1] 0.607037 #>  #>  #> $hr #> $hr$`Sex (F/M)` #> [1] 0.6242738 #>  #>   # Univariable with interactions univar_model_inter <- fit_coxreg_univar(   variables = u1_variables, control = control_coxreg(interaction = TRUE), data = dta_bladder ) df1_inter <- broom::tidy(univar_model_inter) s_coxreg(model_df = df1_inter, .stats = \"hr\", .which_vars = \"inter\", .var_nms = \"COVAR1\") #> $hr #> $hr$`  1` #> [1] 0.6284569 #>  #> $hr$`  2` #> [1] 0.5806499 #>  #> $hr$`  3` #> [1] 0.5486103 #>  #> $hr$`  4` #> [1] 0.6910725 #>  #>   # Univariable without treatment arm - only \"COVAR2\" covariate effects u2_variables <- list(time = \"TIME\", event = \"STATUS\", covariates = c(\"COVAR1\", \"COVAR2\")) univar_covs_model <- fit_coxreg_univar(variables = u2_variables, data = dta_bladder) df1_covs <- broom::tidy(univar_covs_model) s_coxreg(model_df = df1_covs, .stats = \"hr\", .var_nms = c(\"COVAR2\", \"Sex (F/M)\")) #> $hr #> $hr$`Sex (F/M) (reference = F)` #> numeric(0) #>  #>  #> $hr #> $hr$M #> [1] 1.3271 #>  #>   # Multivariable. m1_variables <- list(   time = \"TIME\", event = \"STATUS\", arm = \"ARM\", covariates = c(\"COVAR1\", \"COVAR2\") ) multivar_model <- fit_coxreg_multivar(variables = m1_variables, data = dta_bladder) df2 <- broom::tidy(multivar_model) s_coxreg(model_df = df2, .stats = \"pval\", .which_vars = \"var_main\", .var_nms = \"COVAR1\") #> $pval #> $pval$`A Covariate Label (reference = 1)` #> [1] 7.209956e-09 #>  #>  s_coxreg(   model_df = df2, .stats = \"pval\", .which_vars = \"multi_lvl\",   .var_nms = c(\"COVAR1\", \"A Covariate Label\") ) #> $pval #> $pval$`2` #> [1] 0.001120332 #>  #> $pval$`3` #> [1] 6.293725e-06 #>  #> $pval$`4` #> [1] 3.013875e-08 #>  #>   # Multivariable without treatment arm - only \"COVAR1\" main effect m2_variables <- list(time = \"TIME\", event = \"STATUS\", covariates = c(\"COVAR1\", \"COVAR2\")) multivar_covs_model <- fit_coxreg_multivar(variables = m2_variables, data = dta_bladder) df2_covs <- broom::tidy(multivar_covs_model) s_coxreg(model_df = df2_covs, .stats = \"hr\") #> $hr #> $hr$`2` #> [1] 0.4600728 #>  #> $hr$`3` #> [1] 0.3100455 #>  #> $hr$`4` #> [1] 0.1854177 #>  #>  #> $hr #> $hr$`A Covariate Label (reference = 1)` #> numeric(0) #>  #>  #> $hr #> $hr$`Sex (F/M) (reference = F)` #> numeric(0) #>  #>  #> $hr #> $hr$M #> [1] 1.285406 #>  #>   tern:::a_coxreg(   df = dta_bladder,   labelstr = \"Label 1\",   variables = u1_variables,   .spl_context = list(value = \"COVAR1\"),   .stats = \"n\",   .formats = \"xx\" ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1  Label 1            340          0   Label 1  tern:::a_coxreg(   df = dta_bladder,   labelstr = \"\",   variables = u1_variables,   .spl_context = list(value = \"COVAR2\"),   .stats = \"pval\",   .formats = \"xx.xxxx\" ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>    row_name formatted_cell indent_mod row_label #> 1 Sex (F/M)         0.0182          0 Sex (F/M)  # summarize_coxreg  result_univar <- basic_table() %>%   summarize_coxreg(variables = u1_variables) %>%   build_table(dta_bladder) result_univar #>                        n    Hazard Ratio      95% CI      p-value #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Treatment:                                                        #>   2 vs control (1)    340       0.64       (0.43, 0.94)   0.0242  #> Covariate:                                                        #>   A Covariate Label   340       0.61       (0.41, 0.90)   0.0126  #>   Sex (F/M)           340       0.62       (0.42, 0.92)   0.0182   result_multivar <- basic_table() %>%   summarize_coxreg(     variables = m1_variables,     multivar = TRUE,   ) %>%   build_table(dta_bladder) result_multivar #>                                       Hazard Ratio      95% CI      p-value #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Treatment:                                                                  #>   ARM (reference = 1)                                                       #>     2                                     0.61       (0.41, 0.90)   0.0123  #> Covariate:                                                                  #>   A Covariate Label (reference = 1)                                 <0.0001 #>     2                                     0.46       (0.28, 0.73)   0.0011  #>     3                                     0.31       (0.18, 0.51)   <0.0001 #>     4                                     0.18       (0.10, 0.33)   <0.0001 #>   Sex (F/M) (reference = F)                                                 #>     M                                     1.29       (0.88, 1.89)   0.1911   result_univar_covs <- basic_table() %>%   summarize_coxreg(     variables = u2_variables,   ) %>%   build_table(dta_bladder) result_univar_covs #>                                       Hazard Ratio      95% CI      p-value #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Covariate:                                                                  #>   A Covariate Label (reference = 1)                                 <0.0001 #>     2                                     0.45       (0.28, 0.71)   0.0007  #>     3                                     0.31       (0.19, 0.52)   <0.0001 #>     4                                     0.18       (0.10, 0.33)   <0.0001 #>   Sex (F/M) (reference = F)                                                 #>     M                                     1.33       (0.91, 1.94)   0.1414   result_multivar_covs <- basic_table() %>%   summarize_coxreg(     variables = m2_variables,     multivar = TRUE,     varlabels = c(\"Covariate 1\", \"Covariate 2\") # custom labels   ) %>%   build_table(dta_bladder) result_multivar_covs #>                                 Hazard Ratio      95% CI      p-value #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Covariate:                                                            #>   Covariate 1 (reference = 1)                                 <0.0001 #>     2                               0.46       (0.29, 0.74)   0.0012  #>     3                               0.31       (0.19, 0.52)   <0.0001 #>     4                               0.19       (0.10, 0.34)   <0.0001 #>   Covariate 2 (reference = F)                                         #>     M                               1.29       (0.88, 1.88)   0.1958"},{"path":"https://insightsengineering.github.io/tern/main/reference/cox_regression_inter.html","id":null,"dir":"Reference","previous_headings":"","what":"Cox Regression Helper: Interactions ‚Äî cox_regression_inter","title":"Cox Regression Helper: Interactions ‚Äî cox_regression_inter","text":"Test estimate effect treatment interaction covariate. effect estimated HR tested treatment given level covariate, comparison treatment control.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/cox_regression_inter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cox Regression Helper: Interactions ‚Äî cox_regression_inter","text":"","code":"h_coxreg_inter_effect(x, effect, covar, mod, label, control, ...)  # S3 method for numeric h_coxreg_inter_effect(x, effect, covar, mod, label, control, at, ...)  # S3 method for factor h_coxreg_inter_effect(x, effect, covar, mod, label, control, data, ...)  h_coxreg_extract_interaction(effect, covar, mod, data, at, control)  h_coxreg_inter_estimations(   variable,   given,   lvl_var,   lvl_given,   mod,   conf_level = 0.95 )"},{"path":"https://insightsengineering.github.io/tern/main/reference/cox_regression_inter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cox Regression Helper: Interactions ‚Äî cox_regression_inter","text":"x (numeric factor) values effect tested. effect (string) name effect tested estimated. covar (string) name covariate model. mod (coxph) fitted Cox regression model (see survival::coxph()). label (string) label return term_label (see return). control (list) list controls returned control_coxreg(). ... see methods. (list) list items named covariate, every item vector levels interaction estimated. data (data.frame) data frame model fit. variable, given (string) name variables interaction. seek estimation levels variable given levels given. lvl_var, lvl_given (character) corresponding levels given levels(). conf_level (proportion) confidence level interval.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/cox_regression_inter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cox Regression Helper: Interactions ‚Äî cox_regression_inter","text":"list matrix (one per level variable) rows corresponding combinations variable given, columns: coef_hat Estimation coefficient. coef_se Standard error estimation. hr Hazard ratio. lcl, ucl Lower/upper confidence limit hazard ratio.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/cox_regression_inter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cox Regression Helper: Interactions ‚Äî cox_regression_inter","text":"Given cox regression investigating effect Arm (, B, C; reference ) Sex (F, M; reference Female) model abbreviated: y ~ Arm + Sex + Arm:Sex. cox regression estimates coefficients along variance-covariance matrix : b1 (arm b), b2 (arm c) b3 (sex m) b4 (arm b: sex m), b5 (arm c: sex m) estimation Hazard Ratio arm C/sex M given reference arm /Sex M exp(b2 + b3 + b5)/ exp(b3) = exp(b2 + b5). interaction coefficient deduced b2 + b5 standard error obtained $sqrt(Var b2 + Var b5 + 2 * covariance (b2,b5))$.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/cox_regression_inter.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Cox Regression Helper: Interactions ‚Äî cox_regression_inter","text":"h_coxreg_inter_effect(numeric): Estimate interaction numerical covariate h_coxreg_inter_effect(factor): Estimate interaction factor covariate. h_coxreg_extract_interaction(): higher level function returns test interaction test estimated values. interaction, h_coxreg_univar_extract() applied. h_coxreg_inter_estimations(): hazard ratio estimation interactions.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/cox_regression_inter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cox Regression Helper: Interactions ‚Äî cox_regression_inter","text":"","code":"library(survival)  set.seed(1, kind = \"Mersenne-Twister\")  # Testing dataset [survival::bladder]. dta_bladder <- with(   data = bladder[bladder$enum < 5, ],   data.frame(     time = stop,     status = event,     armcd = as.factor(rx),     covar1 = as.factor(enum),     covar2 = factor(       sample(as.factor(enum)),       levels = 1:4,       labels = c(\"F\", \"F\", \"M\", \"M\")     )   ) ) labels <- c(\"armcd\" = \"ARM\", \"covar1\" = \"A Covariate Label\", \"covar2\" = \"Sex (F/M)\") formatters::var_labels(dta_bladder)[names(labels)] <- labels dta_bladder$age <- sample(20:60, size = nrow(dta_bladder), replace = TRUE)  plot(   survfit(Surv(time, status) ~ armcd + covar1, data = dta_bladder),   lty = 2:4,   xlab = \"Months\",   col = c(\"blue1\", \"blue2\", \"blue3\", \"blue4\", \"red1\", \"red2\", \"red3\", \"red4\") )   mod <- coxph(Surv(time, status) ~ armcd * covar1, data = dta_bladder) h_coxreg_extract_interaction(   mod = mod, effect = \"armcd\", covar = \"covar1\", data = dta_bladder,   control = control_coxreg() ) #>                    effect   term        term_label level   n        hr #> 1              Covariate: covar1 A Covariate Label       340        NA #> armcd2/covar11 Covariate: covar1                 1     1  NA 0.6341111 #> armcd2/covar12 Covariate: covar1                 2     2  NA 0.5845305 #> armcd2/covar13 Covariate: covar1                 3     3  NA 0.5507703 #> armcd2/covar14 Covariate: covar1                 4     4  NA 0.6910643 #>                      lcl      ucl      pval pval_inter #> 1                     NA       NA 0.1302825   0.988245 #> armcd2/covar11 0.3514676 1.144051        NA         NA #> armcd2/covar12 0.2716689 1.257692        NA         NA #> armcd2/covar13 0.2244668 1.351415        NA         NA #> armcd2/covar14 0.2315248 2.062715        NA         NA mod <- coxph(Surv(time, status) ~ armcd * covar1, data = dta_bladder) result <- h_coxreg_inter_estimations(   variable = \"armcd\", given = \"covar1\",   lvl_var = levels(dta_bladder$armcd),   lvl_given = levels(dta_bladder$covar1),   mod = mod, conf_level = .95 ) result #> $armcd2 #>                      coef  se(coef)        hr       lcl      ucl #> armcd2/covar11 -0.4555312 0.3010803 0.6341111 0.3514676 1.144051 #> armcd2/covar12 -0.5369464 0.3909383 0.5845305 0.2716689 1.257692 #> armcd2/covar13 -0.5964375 0.4579624 0.5507703 0.2244668 1.351415 #> armcd2/covar14 -0.3695225 0.5579418 0.6910643 0.2315248 2.062715 #>  #> attr(,\"details\") #> [1] \"Estimations of armcd hazard ratio given the level of covar1 compared to armcd level 1.\""},{"path":"https://insightsengineering.github.io/tern/main/reference/create_afun_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor Function for compare_vars() ‚Äî create_afun_compare","title":"Constructor Function for compare_vars() ‚Äî create_afun_compare","text":"Constructor function creates combined Formatted Analysis function use layout creating functions compare_vars().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/create_afun_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor Function for compare_vars() ‚Äî create_afun_compare","text":"","code":"create_afun_compare(   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/create_afun_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor Function for compare_vars() ‚Äî create_afun_compare","text":".stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/create_afun_compare.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Constructor Function for compare_vars() ‚Äî create_afun_compare","text":"Since a_compare() generic want customization formatting arguments via rtables::make_afun(), need create another temporary generic function, corresponding customized methods. order methods found, need wrap combined afun. Since required two layout creating functions (possibly others future), provide constructor : create_afun_compare().","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/create_afun_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor Function for compare_vars() ‚Äî create_afun_compare","text":"","code":"# `create_afun_compare()` to create combined `afun`  afun <- create_afun_compare(   .stats = c(\"n\", \"count_fraction\", \"mean_sd\", \"pval\"),   .indent_mods = c(pval = 1L) )  lyt <- basic_table() %>%   split_cols_by(\"ARMCD\", ref_group = \"ARM A\") %>%   analyze(     \"AGE\",     afun = afun,     show_labels = \"visible\"   ) build_table(lyt, df = tern_ex_adsl) #>                          ARM A        ARM B        ARM C    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> AGE                                                         #>   n                        69           73           58     #>   Mean (SD)            34.1 (6.8)   35.8 (7.1)   36.1 (7.4) #>     p-value (t-test)                  0.1446       0.1176    lyt <- basic_table() %>%   split_cols_by(\"ARMCD\", ref_group = \"ARM A\") %>%   analyze(     \"SEX\",     afun = afun,     show_labels = \"visible\"   ) build_table(lyt, df = tern_ex_adsl) #>                                    ARM A        ARM B        ARM C    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> SEX                                                                   #>   n                                  69           73           58     #>   F                              38 (55.1%)   40 (54.8%)   32 (55.2%) #>   M                              31 (44.9%)   33 (45.2%)   26 (44.8%) #>     p-value (chi-squared test)                  1.0000       1.0000"},{"path":"https://insightsengineering.github.io/tern/main/reference/create_afun_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor Function for summarize_vars() and summarize_colvars() ‚Äî create_afun_summary","title":"Constructor Function for summarize_vars() and summarize_colvars() ‚Äî create_afun_summary","text":"Constructor function creates combined Formatted Analysis function use layout creating functions summarize_vars() summarize_colvars().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/create_afun_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor Function for summarize_vars() and summarize_colvars() ‚Äî create_afun_summary","text":"","code":"create_afun_summary(.stats, .formats, .labels, .indent_mods)"},{"path":"https://insightsengineering.github.io/tern/main/reference/create_afun_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor Function for summarize_vars() and summarize_colvars() ‚Äî create_afun_summary","text":".stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/create_afun_summary.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Constructor Function for summarize_vars() and summarize_colvars() ‚Äî create_afun_summary","text":"Since a_summary() generic want customization formatting arguments via rtables::make_afun(), need create another temporary generic function, corresponding customized methods. order methods found, need wrap combined afun. Since required two layout creating functions (possibly others future), provide constructor : create_afun_summary().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/create_afun_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor Function for summarize_vars() and summarize_colvars() ‚Äî create_afun_summary","text":"","code":"# `create_afun_summary()` to create combined `afun`  afun <- create_afun_summary(   .stats = NULL,   .formats = c(median = \"xx.\"),   .labels = c(median = \"My median\"),   .indent_mods = c(median = 1L) ) ## Fabricated dataset. dta_test <- data.frame(   USUBJID = rep(1:6, each = 3),   PARAMCD = rep(\"lab\", 6 * 3),   AVISIT  = rep(paste0(\"V\", 1:3), 6),   ARM     = rep(LETTERS[1:3], rep(6, 3)),   AVAL    = c(9:1, rep(NA, 9)) )  l <- basic_table() %>%   split_cols_by(var = \"ARM\") %>%   split_rows_by(var = \"AVISIT\") %>%   analyze(vars = \"AVAL\", afun = afun)  build_table(l, df = dta_test) #>                                        A                 B          C  #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> V1                                                                     #>   n                                    2                 1          0  #>   Sum                                15.0               3.0         NA #>   Mean                                7.5               3.0         NA #>   SD                                  2.1               NA          NA #>   SE                                  1.5               NA          NA #>   Mean (SD)                        7.5 (2.1)         3.0 (NA)       NA #>   Mean (SE)                        7.5 (1.5)         3.0 (NA)       NA #>   Mean 95% CI                   (-11.56, 26.56)         NA          NA #>   Mean -/+ 1xSE                  (6.00, 9.00)           NA          NA #>   Mean -/+ 1xSD                  (5.38, 9.62)           NA          NA #>   Mean p-value (H0: mean = 0)        0.13               NA          NA #>     My median                          8                 3          NA #>   Median Absolute Deviation           0.0               0.0         NA #>   Median 95% CI                       NA                NA          NA #>   25% and 75%-ile                  6.0 - 9.0         3.0 - 3.0      NA #>   IQR                                 3.0               0.0         NA #>   Min - Max                        6.0 - 9.0         3.0 - 3.0      NA #>   CV (%)                             28.3               NA          NA #>   Minimum                             6.0               3.0         NA #>   Maximum                             9.0               3.0         NA #>   Median (Min - Max)            7.5 (6.0 - 9.0)   3.0 (3.0 - 3.0)   NA #>   Geometric Mean                      7.3               3.0         NA #>   CV % Geometric Mean                29.3               NA          NA #> V2                                                                     #>   n                                    2                 1          0  #>   Sum                                13.0               2.0         NA #>   Mean                                6.5               2.0         NA #>   SD                                  2.1               NA          NA #>   SE                                  1.5               NA          NA #>   Mean (SD)                        6.5 (2.1)         2.0 (NA)       NA #>   Mean (SE)                        6.5 (1.5)         2.0 (NA)       NA #>   Mean 95% CI                   (-12.56, 25.56)         NA          NA #>   Mean -/+ 1xSE                  (5.00, 8.00)           NA          NA #>   Mean -/+ 1xSD                  (4.38, 8.62)           NA          NA #>   Mean p-value (H0: mean = 0)        0.14               NA          NA #>     My median                          6                 2          NA #>   Median Absolute Deviation           0.0               0.0         NA #>   Median 95% CI                       NA                NA          NA #>   25% and 75%-ile                  5.0 - 8.0         2.0 - 2.0      NA #>   IQR                                 3.0               0.0         NA #>   Min - Max                        5.0 - 8.0         2.0 - 2.0      NA #>   CV (%)                             32.6               NA          NA #>   Minimum                             5.0               2.0         NA #>   Maximum                             8.0               2.0         NA #>   Median (Min - Max)            6.5 (5.0 - 8.0)   2.0 (2.0 - 2.0)   NA #>   Geometric Mean                      6.3               2.0         NA #>   CV % Geometric Mean                34.2               NA          NA #> V3                                                                     #>   n                                    2                 1          0  #>   Sum                                11.0               1.0         NA #>   Mean                                5.5               1.0         NA #>   SD                                  2.1               NA          NA #>   SE                                  1.5               NA          NA #>   Mean (SD)                        5.5 (2.1)         1.0 (NA)       NA #>   Mean (SE)                        5.5 (1.5)         1.0 (NA)       NA #>   Mean 95% CI                   (-13.56, 24.56)         NA          NA #>   Mean -/+ 1xSE                  (4.00, 7.00)           NA          NA #>   Mean -/+ 1xSD                  (3.38, 7.62)           NA          NA #>   Mean p-value (H0: mean = 0)        0.17               NA          NA #>     My median                          6                 1          NA #>   Median Absolute Deviation           0.0               0.0         NA #>   Median 95% CI                       NA                NA          NA #>   25% and 75%-ile                  4.0 - 7.0         1.0 - 1.0      NA #>   IQR                                 3.0               0.0         NA #>   Min - Max                        4.0 - 7.0         1.0 - 1.0      NA #>   CV (%)                             38.6               NA          NA #>   Minimum                             4.0               1.0         NA #>   Maximum                             7.0               1.0         NA #>   Median (Min - Max)            5.5 (4.0 - 7.0)   1.0 (1.0 - 1.0)   NA #>   Geometric Mean                      5.3               1.0         NA #>   CV % Geometric Mean                41.2               NA          NA"},{"path":"https://insightsengineering.github.io/tern/main/reference/cut_quantile_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Cutting Numeric Vector into Empirical Quantile Bins ‚Äî cut_quantile_bins","title":"Cutting Numeric Vector into Empirical Quantile Bins ‚Äî cut_quantile_bins","text":"cuts numeric vector sample quantile bins. Note intervals closed right side. , first bin interval [-Inf, q1] q1 first quantile, second bin (q1, q2], etc., last bin (qn, +Inf] qn last quantile.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/cut_quantile_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cutting Numeric Vector into Empirical Quantile Bins ‚Äî cut_quantile_bins","text":"","code":"cut_quantile_bins(   x,   probs = c(0.25, 0.5, 0.75),   labels = NULL,   type = 7,   ordered = TRUE )"},{"path":"https://insightsengineering.github.io/tern/main/reference/cut_quantile_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cutting Numeric Vector into Empirical Quantile Bins ‚Äî cut_quantile_bins","text":"x (numeric) continuous variable values cut quantile bins. may contain NA values, used quantile calculations, included return vector. probs (proportion vector) probabilities identifying quantiles. sorted vector unique proportion values, .e. 0 1, boundaries 0 1 must included. labels (character) unique labels quantile bins. n probabilities probs, must n + 1 long. type (integer) type quantiles use, see stats::quantile() details. ordered (flag) result ordered factor.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/cut_quantile_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cutting Numeric Vector into Empirical Quantile Bins ‚Äî cut_quantile_bins","text":"factor variable appropriately labeled bins levels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/cut_quantile_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cutting Numeric Vector into Empirical Quantile Bins ‚Äî cut_quantile_bins","text":"","code":"# Default is to cut into quartile bins. cut_quantile_bins(cars$speed) #>  [1] [0%,25%]   [0%,25%]   [0%,25%]   [0%,25%]   [0%,25%]   [0%,25%]   #>  [7] [0%,25%]   [0%,25%]   [0%,25%]   [0%,25%]   [0%,25%]   [0%,25%]   #> [13] [0%,25%]   [0%,25%]   [0%,25%]   (25%,50%]  (25%,50%]  (25%,50%]  #> [19] (25%,50%]  (25%,50%]  (25%,50%]  (25%,50%]  (25%,50%]  (25%,50%]  #> [25] (25%,50%]  (25%,50%]  (50%,75%]  (50%,75%]  (50%,75%]  (50%,75%]  #> [31] (50%,75%]  (50%,75%]  (50%,75%]  (50%,75%]  (50%,75%]  (50%,75%]  #> [37] (50%,75%]  (50%,75%]  (75%,100%] (75%,100%] (75%,100%] (75%,100%] #> [43] (75%,100%] (75%,100%] (75%,100%] (75%,100%] (75%,100%] (75%,100%] #> [49] (75%,100%] (75%,100%] #> Levels: [0%,25%] < (25%,50%] < (50%,75%] < (75%,100%]  # Use custom quantiles. cut_quantile_bins(cars$speed, probs = c(0.1, 0.2, 0.6, 0.88)) #>  [1] [0%,10%]   [0%,10%]   [0%,10%]   [0%,10%]   [0%,10%]   (10%,20%]  #>  [7] (10%,20%]  (10%,20%]  (10%,20%]  (10%,20%]  (10%,20%]  (20%,60%]  #> [13] (20%,60%]  (20%,60%]  (20%,60%]  (20%,60%]  (20%,60%]  (20%,60%]  #> [19] (20%,60%]  (20%,60%]  (20%,60%]  (20%,60%]  (20%,60%]  (20%,60%]  #> [25] (20%,60%]  (20%,60%]  (20%,60%]  (20%,60%]  (20%,60%]  (20%,60%]  #> [31] (20%,60%]  (60%,88%]  (60%,88%]  (60%,88%]  (60%,88%]  (60%,88%]  #> [37] (60%,88%]  (60%,88%]  (60%,88%]  (60%,88%]  (60%,88%]  (60%,88%]  #> [43] (60%,88%]  (60%,88%]  (88%,100%] (88%,100%] (88%,100%] (88%,100%] #> [49] (88%,100%] (88%,100%] #> Levels: [0%,10%] < (10%,20%] < (20%,60%] < (60%,88%] < (88%,100%]  # Use custom labels. cut_quantile_bins(cars$speed, labels = paste0(\"Q\", 1:4)) #>  [1] Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q1 Q2 Q2 Q2 Q2 Q2 Q2 Q2 Q2 Q2 Q2 #> [26] Q2 Q3 Q3 Q3 Q3 Q3 Q3 Q3 Q3 Q3 Q3 Q3 Q3 Q4 Q4 Q4 Q4 Q4 Q4 Q4 Q4 Q4 Q4 Q4 Q4 #> Levels: Q1 < Q2 < Q3 < Q4  # NAs are preserved in result factor. ozone_binned <- cut_quantile_bins(airquality$Ozone) which(is.na(ozone_binned)) #>  [1]   5  10  25  26  27  32  33  34  35  36  37  39  42  43  45  46  52  53  54 #> [20]  55  56  57  58  59  60  61  65  72  75  83  84 102 103 107 115 119 150 # So you might want to make these explicit. explicit_na(ozone_binned) #>   [1] (50%,75%]  (50%,75%]  [0%,25%]   [0%,25%]   <Missing>  (25%,50%]  #>   [7] (25%,50%]  (25%,50%]  [0%,25%]   <Missing>  [0%,25%]   [0%,25%]   #>  [13] [0%,25%]   [0%,25%]   [0%,25%]   [0%,25%]   (50%,75%]  [0%,25%]   #>  [19] (25%,50%]  [0%,25%]   [0%,25%]   [0%,25%]   [0%,25%]   (50%,75%]  #>  [25] <Missing>  <Missing>  <Missing>  (25%,50%]  (50%,75%]  (75%,100%] #>  [31] (50%,75%]  <Missing>  <Missing>  <Missing>  <Missing>  <Missing>  #>  [37] <Missing>  (25%,50%]  <Missing>  (75%,100%] (50%,75%]  <Missing>  #>  [43] <Missing>  (25%,50%]  <Missing>  <Missing>  (25%,50%]  (50%,75%]  #>  [49] (25%,50%]  [0%,25%]   [0%,25%]   <Missing>  <Missing>  <Missing>  #>  [55] <Missing>  <Missing>  <Missing>  <Missing>  <Missing>  <Missing>  #>  [61] <Missing>  (75%,100%] (50%,75%]  (50%,75%]  <Missing>  (75%,100%] #>  [67] (50%,75%]  (75%,100%] (75%,100%] (75%,100%] (75%,100%] <Missing>  #>  [73] [0%,25%]   (25%,50%]  <Missing>  [0%,25%]   (50%,75%]  (50%,75%]  #>  [79] (50%,75%]  (75%,100%] (50%,75%]  [0%,25%]   <Missing>  <Missing>  #>  [85] (75%,100%] (75%,100%] (25%,50%]  (50%,75%]  (75%,100%] (50%,75%]  #>  [91] (75%,100%] (50%,75%]  (50%,75%]  [0%,25%]   [0%,25%]   (75%,100%] #>  [97] (50%,75%]  (75%,100%] (75%,100%] (75%,100%] (75%,100%] <Missing>  #> [103] <Missing>  (50%,75%]  (25%,50%]  (75%,100%] <Missing>  (25%,50%]  #> [109] (50%,75%]  (25%,50%]  (25%,50%]  (50%,75%]  (25%,50%]  [0%,25%]   #> [115] <Missing>  (50%,75%]  (75%,100%] (75%,100%] <Missing>  (75%,100%] #> [121] (75%,100%] (75%,100%] (75%,100%] (75%,100%] (75%,100%] (75%,100%] #> [127] (75%,100%] (50%,75%]  (50%,75%]  (25%,50%]  (25%,50%]  (25%,50%]  #> [133] (25%,50%]  (50%,75%]  (25%,50%]  (25%,50%]  [0%,25%]   [0%,25%]   #> [139] (50%,75%]  [0%,25%]   [0%,25%]   (25%,50%]  [0%,25%]   [0%,25%]   #> [145] (25%,50%]  (50%,75%]  [0%,25%]   [0%,25%]   (25%,50%]  <Missing>  #> [151] [0%,25%]   [0%,25%]   (25%,50%]  #> Levels: [0%,25%] < (25%,50%] < (50%,75%] < (75%,100%] < <Missing>"},{"path":"https://insightsengineering.github.io/tern/main/reference/d_count_abnormal_by_baseline.html","id":null,"dir":"Reference","previous_headings":"","what":"Description Function for s_count_abnormal_by_baseline() ‚Äî d_count_abnormal_by_baseline","title":"Description Function for s_count_abnormal_by_baseline() ‚Äî d_count_abnormal_by_baseline","text":"Description function produces labels s_count_abnormal_by_baseline().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_count_abnormal_by_baseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Description Function for s_count_abnormal_by_baseline() ‚Äî d_count_abnormal_by_baseline","text":"","code":"d_count_abnormal_by_baseline(abnormal)"},{"path":"https://insightsengineering.github.io/tern/main/reference/d_count_abnormal_by_baseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Description Function for s_count_abnormal_by_baseline() ‚Äî d_count_abnormal_by_baseline","text":"abnormal (character) identifying abnormal range level(s) .var.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_count_abnormal_by_baseline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Description Function for s_count_abnormal_by_baseline() ‚Äî d_count_abnormal_by_baseline","text":"","code":"d_count_abnormal_by_baseline(\"LOW\") #> $not_abnormal #> [1] \"Not low baseline status\" #>  #> $abnormal #> [1] \"Low baseline status\" #>  #> $total #> [1] \"Total\" #>"},{"path":"https://insightsengineering.github.io/tern/main/reference/d_count_cumulative.html","id":null,"dir":"Reference","previous_headings":"","what":"Description of Cumulative Count ‚Äî d_count_cumulative","title":"Description of Cumulative Count ‚Äî d_count_cumulative","text":"helper function describes analysis s_count_cumulative().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_count_cumulative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Description of Cumulative Count ‚Äî d_count_cumulative","text":"","code":"d_count_cumulative(threshold, lower_tail, include_eq)"},{"path":"https://insightsengineering.github.io/tern/main/reference/d_count_cumulative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Description of Cumulative Count ‚Äî d_count_cumulative","text":"threshold (number) cutoff value threshold count values x. lower_tail (logical) whether count lower tail, default TRUE. include_eq (logical) whether include value equal threshold count, default TRUE.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_count_cumulative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Description of Cumulative Count ‚Äî d_count_cumulative","text":"descriptive string.","code":""},{"path":[]},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/d_count_missed_doses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Description Function that Calculates Labels for s_count_missed_doses(). ‚Äî d_count_missed_doses","text":"","code":"d_count_missed_doses(thresholds)"},{"path":"https://insightsengineering.github.io/tern/main/reference/d_count_missed_doses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Description Function that Calculates Labels for s_count_missed_doses(). ‚Äî d_count_missed_doses","text":"thresholds (vector count) number missed doses patients least .","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_count_missed_doses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Description Function that Calculates Labels for s_count_missed_doses(). ‚Äî d_count_missed_doses","text":"d_count_missed_doses() returns named character vector labels.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/d_onco_rsp_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Description of Standard Oncology Response ‚Äî d_onco_rsp_label","title":"Description of Standard Oncology Response ‚Äî d_onco_rsp_label","text":"Describe oncology response standard way.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_onco_rsp_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Description of Standard Oncology Response ‚Äî d_onco_rsp_label","text":"","code":"d_onco_rsp_label(x)"},{"path":"https://insightsengineering.github.io/tern/main/reference/d_onco_rsp_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Description of Standard Oncology Response ‚Äî d_onco_rsp_label","text":"x (character) standard oncology code described.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/d_onco_rsp_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Description of Standard Oncology Response ‚Äî d_onco_rsp_label","text":"","code":"d_onco_rsp_label(   c(\"CR\", \"PR\", \"SD\", \"NON CR/PD\", \"PD\", \"NE\", \"Missing\", \"<Missing>\", \"NE/Missing\") ) #>                           CR                           PR  #>       Complete Response (CR)        Partial Response (PR)  #>                           SD                    NON CR/PD  #>          Stable Disease (SD) Non-CR or Non-PD (NON CR/PD)  #>                           PD                           NE  #>     Progressive Disease (PD)           Not Evaluable (NE)  #>                      Missing                    <Missing>  #>                      Missing                    <Missing>  #>                   NE/Missing  #>       Missing or unevaluable  #> 9 Levels: <Missing> Complete Response (CR) Missing ... Stable Disease (SD)  # Adding some values not considered in d_onco_rsp_label  d_onco_rsp_label(   c(\"CR\", \"PR\", \"hello\", \"hi\") ) #>                     CR                     PR                  hello  #> Complete Response (CR)  Partial Response (PR)                  hello  #>                     hi  #>                     hi  #> Levels: Complete Response (CR) Partial Response (PR) hello hi"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/d_pkparam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate PK reference dataset ‚Äî d_pkparam","text":"","code":"d_pkparam()"},{"path":"https://insightsengineering.github.io/tern/main/reference/d_pkparam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate PK reference dataset ‚Äî d_pkparam","text":"dataframe PK parameters","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_pkparam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate PK reference dataset ‚Äî d_pkparam","text":"","code":"pk_reference_dataset <- d_pkparam()"},{"path":"https://insightsengineering.github.io/tern/main/reference/d_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Description of the Proportion Summary ‚Äî d_proportion","title":"Description of the Proportion Summary ‚Äî d_proportion","text":"helper function describes analysis s_proportion().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Description of the Proportion Summary ‚Äî d_proportion","text":"","code":"d_proportion(conf_level, method, long = FALSE)"},{"path":"https://insightsengineering.github.io/tern/main/reference/d_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Description of the Proportion Summary ‚Äî d_proportion","text":"conf_level (proportion) confidence level interval. method (string) method used construct confidence interval proportion successful outcomes; one waldcc, wald, clopper-pearson, wilson, wilsonc, strat_wilson, strat_wilsonc, agresti-coull jeffreys. long (flag) whether long short (default) description required.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Description of the Proportion Summary ‚Äî d_proportion","text":"String describing analysis.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_proportion_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Description of Method Used for Proportion Comparison ‚Äî d_proportion_diff","title":"Description of Method Used for Proportion Comparison ‚Äî d_proportion_diff","text":"auxiliary function describes analysis s_proportion_diff.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_proportion_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Description of Method Used for Proportion Comparison ‚Äî d_proportion_diff","text":"","code":"d_proportion_diff(conf_level, method, long = FALSE)"},{"path":"https://insightsengineering.github.io/tern/main/reference/d_proportion_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Description of Method Used for Proportion Comparison ‚Äî d_proportion_diff","text":"conf_level (proportion) confidence level interval. method (string) method used confidence interval estimation. long (logical) Whether long short (default) description required.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_proportion_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Description of Method Used for Proportion Comparison ‚Äî d_proportion_diff","text":"String describing analysis.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/d_rsp_subgroups_colvars.html","id":null,"dir":"Reference","previous_headings":"","what":"Labels for Column Variables in Binary Response by Subgroup Table ‚Äî d_rsp_subgroups_colvars","title":"Labels for Column Variables in Binary Response by Subgroup Table ‚Äî d_rsp_subgroups_colvars","text":"Internal function check variables included tabulate_rsp_subgroups create column labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_rsp_subgroups_colvars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Labels for Column Variables in Binary Response by Subgroup Table ‚Äî d_rsp_subgroups_colvars","text":"","code":"d_rsp_subgroups_colvars(vars, conf_level = NULL, method = NULL)"},{"path":"https://insightsengineering.github.io/tern/main/reference/d_rsp_subgroups_colvars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Labels for Column Variables in Binary Response by Subgroup Table ‚Äî d_rsp_subgroups_colvars","text":"vars (character) variable names primary analysis variable iterated . conf_level (proportion) confidence level interval. method (string) specifies test used calculate p-value difference two proportions. options, see s_test_proportion_diff(). Default NULL test performed.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_rsp_subgroups_colvars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Labels for Column Variables in Binary Response by Subgroup Table ‚Äî d_rsp_subgroups_colvars","text":"list variables tabulate labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_survival_subgroups_colvars.html","id":null,"dir":"Reference","previous_headings":"","what":"Labels for Column Variables in Survival Duration by Subgroup Table ‚Äî d_survival_subgroups_colvars","title":"Labels for Column Variables in Survival Duration by Subgroup Table ‚Äî d_survival_subgroups_colvars","text":"Internal function check variables included tabulate_survival_subgroups() create column labels. Note least one n_tot n_tot_events needs provided vars.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_survival_subgroups_colvars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Labels for Column Variables in Survival Duration by Subgroup Table ‚Äî d_survival_subgroups_colvars","text":"","code":"d_survival_subgroups_colvars(vars, conf_level, method, time_unit = NULL)"},{"path":"https://insightsengineering.github.io/tern/main/reference/d_survival_subgroups_colvars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Labels for Column Variables in Survival Duration by Subgroup Table ‚Äî d_survival_subgroups_colvars","text":"vars (character) name statistics reported among n_tot_events (total number events per group), n_events (number events per group), n_tot (total number observations per group), n (number observations per group), median (median survival time), hr (hazard ratio), ci (confidence interval hazard ratio) pval (p value effect). Note, one statistics n_tot n_tot_events, well hr ci required. conf_level (proportion) confidence level interval. method p-value method testing hazard ratio = 1. time_unit (string) label unit median survival time. Default NULL skips displaying unit.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_survival_subgroups_colvars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Labels for Column Variables in Survival Duration by Subgroup Table ‚Äî d_survival_subgroups_colvars","text":"list variables tabulate labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_test_proportion_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Description of the Difference Test Between Two Proportions ‚Äî d_test_proportion_diff","title":"Description of the Difference Test Between Two Proportions ‚Äî d_test_proportion_diff","text":"auxiliary function describes analysis s_test_proportion_diff.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_test_proportion_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Description of the Difference Test Between Two Proportions ‚Äî d_test_proportion_diff","text":"","code":"d_test_proportion_diff(method)"},{"path":"https://insightsengineering.github.io/tern/main/reference/d_test_proportion_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Description of the Difference Test Between Two Proportions ‚Äî d_test_proportion_diff","text":"method (string) one chisq, cmh, fisher, schouten; specifies test used calculate p-value.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/d_test_proportion_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Description of the Difference Test Between Two Proportions ‚Äî d_test_proportion_diff","text":"string describing test p-value derived.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/day2month.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion of Days to Months ‚Äî day2month","title":"Conversion of Days to Months ‚Äî day2month","text":"Conversion Days Months","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/day2month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion of Days to Months ‚Äî day2month","text":"","code":"day2month(x)"},{"path":"https://insightsengineering.github.io/tern/main/reference/day2month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion of Days to Months ‚Äî day2month","text":"x (numeric) time days.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/day2month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion of Days to Months ‚Äî day2month","text":"numeric vector time months.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/day2month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion of Days to Months ‚Äî day2month","text":"","code":"x <- c(403, 248, 30, 86) day2month(x) #> [1] 13.2402464  8.1478439  0.9856263  2.8254620"},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Titles, Footnotes, Page Number, and a Bounding Box to a Grid Grob ‚Äî decorate_grob","title":"Add Titles, Footnotes, Page Number, and a Bounding Box to a Grid Grob ‚Äî decorate_grob","text":"function useful label grid grobs (also ggplot2, lattice plots) title, footnote, page numbers.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Titles, Footnotes, Page Number, and a Bounding Box to a Grid Grob ‚Äî decorate_grob","text":"","code":"decorate_grob(   grob,   titles,   footnotes,   page = \"\",   width_titles = grid::unit(1, \"npc\"),   width_footnotes = grid::unit(1, \"npc\") - grid::stringWidth(page),   border = TRUE,   margins = grid::unit(c(1, 0, 1, 0), \"lines\"),   padding = grid::unit(rep(1, 4), \"lines\"),   outer_margins = grid::unit(c(2, 1.5, 3, 1.5), \"cm\"),   gp_titles = grid::gpar(),   gp_footnotes = grid::gpar(fontsize = 8),   name = NULL,   gp = grid::gpar(),   vp = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Titles, Footnotes, Page Number, and a Bounding Box to a Grid Grob ‚Äî decorate_grob","text":"grob grid grob object, optionally NULL grob decoration shown. titles vector character strings. Vector elements separated newline strings wrapped according page . footnotes vector character string. rules titles. page string page numeration, NULL page number displayed. width_titles unit object width_footnotes unit object border boolean, whether border drawn around plot . margins unit object length 4 padding unit object length 4 outer_margins unit object length 4 gp_titles gpar object gp_footnotes gpar object name character identifier grob.  Used find     grob display list /child another grob. gp \"gpar\" object, typically output     call function gpar.  basically     list graphical parameter settings. vp viewport object (NULL).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Titles, Footnotes, Page Number, and a Bounding Box to a Grid Grob ‚Äî decorate_grob","text":"grid grob (gTree)","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Titles, Footnotes, Page Number, and a Bounding Box to a Grid Grob ‚Äî decorate_grob","text":"titles footnotes ragged, .e. title wrapped individually. layout can illustrated follows:","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add Titles, Footnotes, Page Number, and a Bounding Box to a Grid Grob ‚Äî decorate_grob","text":"Adrian Waddell (waddella) adrian.waddell@roche.com","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Titles, Footnotes, Page Number, and a Bounding Box to a Grid Grob ‚Äî decorate_grob","text":"","code":"library(grid)  titles <- c(   \"Edgar Anderson's Iris Data\",   paste(     \"This famous (Fisher's or Anderson's) iris data set gives the measurements\",     \"in centimeters of the variables sepal length and width and petal length\",     \"and width, respectively, for 50 flowers from each of 3 species of iris.\"   ) )  footnotes <- c(   \"The species are Iris setosa, versicolor, and virginica.\",   paste(     \"iris is a data frame with 150 cases (rows) and 5 variables (columns) named\",     \"Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, and Species.\"   ) )  ## empty plot grid.newpage()  grid.draw(   decorate_grob(     NULL,     titles = titles,     footnotes = footnotes,     page = \"Page 4 of 10\"   ) )   # grid p <- gTree(   children = gList(     rectGrob(),     xaxisGrob(),     yaxisGrob(),     textGrob(\"Sepal.Length\", y = unit(-4, \"lines\")),     textGrob(\"Petal.Length\", x = unit(-3.5, \"lines\"), rot = 90),     pointsGrob(iris$Sepal.Length, iris$Petal.Length, gp = gpar(col = iris$Species), pch = 16)   ),   vp = vpStack(plotViewport(), dataViewport(xData = iris$Sepal.Length, yData = iris$Petal.Length)) ) grid.newpage() grid.draw(p)   grid.newpage() grid.draw(   decorate_grob(     grob = p,     titles = titles,     footnotes = footnotes,     page = \"Page 6 of 129\"   ) )   ## with \\code{ggplot2} library(ggplot2)  p_gg <- ggplot2::ggplot(iris, aes(Sepal.Length, Sepal.Width, col = Species)) +   ggplot2::geom_point() p_gg  p <- ggplotGrob(p_gg) grid.newpage() grid.draw(   decorate_grob(     grob = p,     titles = titles,     footnotes = footnotes,     page = \"Page 6 of 129\"   ) )   ## with \\code{lattice} library(lattice)  xyplot(Sepal.Length ~ Petal.Length, data = iris, col = iris$Species)  p <- grid.grab()  grid.newpage() grid.draw(   decorate_grob(     grob = p,     titles = titles,     footnotes = footnotes,     page = \"Page 6 of 129\"   ) )   # with \\code{gridExtra} - no borders library(gridExtra) #>  #> Attaching package: ‚ÄògridExtra‚Äô #> The following object is masked from ‚Äòpackage:dplyr‚Äô: #>  #>     combine grid.newpage() grid.draw(   decorate_grob(     tableGrob(       head(mtcars)     ),     titles = \"title\",     footnotes = \"footnote\",     border = FALSE   ) )"},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Page Number ‚Äî decorate_grob_factory","title":"Update Page Number ‚Äî decorate_grob_factory","text":"Automatically updates page number.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Page Number ‚Äî decorate_grob_factory","text":"","code":"decorate_grob_factory(npages, ...)"},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Page Number ‚Äî decorate_grob_factory","text":"npages number pages total ... passed decorate_grob","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Page Number ‚Äî decorate_grob_factory","text":"closure increments page number","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob_factory.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Update Page Number ‚Äî decorate_grob_factory","text":"Adrian Waddell (waddella) adrian.waddell@roche.com","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob_factory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Page Number ‚Äî decorate_grob_factory","text":"","code":"# Internal function - decorate_grob_factory if (FALSE) { pf <- decorate_grob_factory(   titles = \"This is a test\\nHello World\",   footnotes = \"Here belong the footnotess\",   npages = 3 )  library(grid) draw_grob(pf(NULL)) draw_grob(pf(NULL)) draw_grob(pf(NULL)) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Decorate Set of grobs and Add Page Numbering ‚Äî decorate_grob_set","title":"Decorate Set of grobs and Add Page Numbering ‚Äî decorate_grob_set","text":"Note uses decorate_grob_factory function.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decorate Set of grobs and Add Page Numbering ‚Äî decorate_grob_set","text":"","code":"decorate_grob_set(grobs, ...)"},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decorate Set of grobs and Add Page Numbering ‚Äî decorate_grob_set","text":"grobs list grid grobs ... arguments passed decorate_grob","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob_set.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Decorate Set of grobs and Add Page Numbering ‚Äî decorate_grob_set","text":"Adrian Waddell (waddella) adrian.waddell@roche.com","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/decorate_grob_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decorate Set of grobs and Add Page Numbering ‚Äî decorate_grob_set","text":"","code":"library(ggplot2) library(grid) g <- with(data = iris, {   list(     ggplot2::ggplotGrob(       ggplot2::ggplot(mapping = aes(Sepal.Length, Sepal.Width, col = Species)) +         ggplot2::geom_point()     ),     ggplot2::ggplotGrob(       ggplot2::ggplot(mapping = aes(Sepal.Length, Petal.Length, col = Species)) +         ggplot2::geom_point()     ),     ggplot2::ggplotGrob(       ggplot2::ggplot(mapping = aes(Sepal.Length, Petal.Width, col = Species)) +         ggplot2::geom_point()     ),     ggplot2::ggplotGrob(       ggplot2::ggplot(mapping = aes(Sepal.Width, Petal.Length, col = Species)) +         ggplot2::geom_point()     ),     ggplot2::ggplotGrob(       ggplot2::ggplot(mapping = aes(Sepal.Width, Petal.Width, col = Species)) +         ggplot2::geom_point()     ),     ggplot2::ggplotGrob(       ggplot2::ggplot(mapping = aes(Petal.Length, Petal.Width, col = Species)) +         ggplot2::geom_point()     )   ) }) lg <- decorate_grob_set(grobs = g, titles = \"Hello\\nOne\\nTwo\\nThree\", footnotes = \"\")  draw_grob(lg[[1]])  draw_grob(lg[[2]])  draw_grob(lg[[6]])"},{"path":"https://insightsengineering.github.io/tern/main/reference/desctools_binom.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals for a Difference of Binomials ‚Äî desctools_binom","title":"Confidence Intervals for a Difference of Binomials ‚Äî desctools_binom","text":"Several confidence intervals difference proportions.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/desctools_binom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals for a Difference of Binomials ‚Äî desctools_binom","text":"","code":"h_recycle(...)  desctools_binom(   x1,   n1,   x2,   n2,   conf.level = 0.95,   sides = c(\"two.sided\", \"left\", \"right\"),   method = c(\"ac\", \"wald\", \"waldcc\", \"score\", \"scorecc\", \"mn\", \"mee\", \"blj\", \"ha\", \"hal\",     \"jp\") )  desctools_binomci(   x,   n,   conf.level = 0.95,   sides = c(\"two.sided\", \"left\", \"right\"),   method = c(\"wilson\", \"wald\", \"waldcc\", \"agresti-coull\", \"jeffreys\", \"modified wilson\",     \"wilsoncc\", \"modified jeffreys\", \"clopper-pearson\", \"arcsine\", \"logit\", \"witting\",     \"pratt\", \"midp\", \"lik\", \"blaker\"),   rand = 123,   tol = 1e-05 )"},{"path":"https://insightsengineering.github.io/tern/main/reference/desctools_binom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals for a Difference of Binomials ‚Äî desctools_binom","text":"conf.level (proportion) confidence level, defaults 0.95. sides (character) side confidence interval compute. Must one \"two-sided\" (default), \"left\", \"right\". method (character) method use. Can one : \"wald\", \"wilson\", \"wilsoncc\", \"agresti-coull\", \"jeffreys\", \"modified wilson\", \"modified jeffreys\", \"clopper-pearson\", \"arcsine\", \"logit\", \"witting\", \"pratt\", \"midp\", \"lik\", \"blaker\". x (count) number successes n (count) number trials grp (factor) vector assigning observations one two groups (e.g. reference treatment group).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/desctools_binom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals for a Difference of Binomials ‚Äî desctools_binom","text":"named list 3 values: est estimate proportion difference. lwrci estimate lower end confidence interval. upci estimate upper end confidence interval. matrix 3 columns containing: est estimate proportion difference. lwrci lower end confidence interval. upci upper end confidence interval.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/desctools_binom.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Confidence Intervals for a Difference of Binomials ‚Äî desctools_binom","text":"h_recycle(): function recycles supplied elements maximal dimension. desctools_binom(): Several Confidence Intervals difference proportions. desctools_binomci(): Compute confidence intervals binomial proportions.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/desctools_binom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals for a Difference of Binomials ‚Äî desctools_binom","text":"","code":"# Internal function - desctools_binom if (FALSE) { set.seed(2) rsp <- sample(c(TRUE, FALSE), replace = TRUE, size = 20) grp <- factor(c(rep(\"A\", 10), rep(\"B\", 10))) tbl <- table(grp, factor(rsp, levels = c(TRUE, FALSE))) desctools_binom(   tbl[1], sum(tbl[1], tbl[3]), tbl[2], sum(tbl[2], tbl[4]),   conf.level = 0.90, method = \"waldcc\" ) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/df_explicit_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode Categorical Missing Values in a Data Frame ‚Äî df_explicit_na","title":"Encode Categorical Missing Values in a Data Frame ‚Äî df_explicit_na","text":"helper function encode missing entries across groups categorical variables data frame.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/df_explicit_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode Categorical Missing Values in a Data Frame ‚Äî df_explicit_na","text":"","code":"df_explicit_na(   data,   omit_columns = NULL,   char_as_factor = TRUE,   logical_as_factor = FALSE,   na_level = \"<Missing>\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/df_explicit_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode Categorical Missing Values in a Data Frame ‚Äî df_explicit_na","text":"data (data.frame) data set. omit_columns (character) names variables data modified function. char_as_factor (flag) whether convert character variables data factors. logical_as_factor (flag) whether convert logical variables data factors. na_level (string) used replace NA empty values inside non-omit_columns columns.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/df_explicit_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode Categorical Missing Values in a Data Frame ‚Äî df_explicit_na","text":"data frame desired changes made.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/df_explicit_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Encode Categorical Missing Values in a Data Frame ‚Äî df_explicit_na","text":"Missing entries NA empty strings replaced specified value. factor variables include missing values, missing value inserted last level. Similarly, case character logical variables converted factors char_as_factor logical_as_factor options, missing values set last level.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/df_explicit_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode Categorical Missing Values in a Data Frame ‚Äî df_explicit_na","text":"","code":"my_data <- data.frame(   u = c(TRUE, FALSE, NA, TRUE),   v = factor(c(\"A\", NA, NA, NA), levels = c(\"Z\", \"A\")),   w = c(\"A\", \"B\", NA, \"C\"),   x = c(\"D\", \"E\", \"F\", NA),   y = c(\"G\", \"H\", \"I\", \"\"),   z = c(1, 2, 3, 4),   stringsAsFactors = FALSE )  # Example 1 # Encode missing values in all character or factor columns. df_explicit_na(my_data) #>       u         v         w         x         y z #> 1  TRUE         A         A         D         G 1 #> 2 FALSE <Missing>         B         E         H 2 #> 3    NA <Missing> <Missing>         F         I 3 #> 4  TRUE <Missing>         C <Missing> <Missing> 4 # Also convert logical columns to factor columns. df_explicit_na(my_data, logical_as_factor = TRUE) #>           u         v         w         x         y z #> 1      TRUE         A         A         D         G 1 #> 2     FALSE <Missing>         B         E         H 2 #> 3 <Missing> <Missing> <Missing>         F         I 3 #> 4      TRUE <Missing>         C <Missing> <Missing> 4 # Encode missing values in a subset of columns. df_explicit_na(my_data, omit_columns = c(\"x\", \"y\")) #>       u         v         w    x y z #> 1  TRUE         A         A    D G 1 #> 2 FALSE <Missing>         B    E H 2 #> 3    NA <Missing> <Missing>    F I 3 #> 4  TRUE <Missing>         C <NA>   4  # Example 2 # Here we purposefully convert all `M` values to `NA` in the `SEX` variable. # After running `df_explicit_na` the `NA` values are encoded as `<Missing>` but they are not # included when generating `rtables`. adsl <- tern_ex_adsl adsl$SEX[adsl$SEX == \"M\"] <- NA adsl <- df_explicit_na(adsl)  # If you want the `Na` values to be displayed in the table use the `na_level` argument. adsl <- tern_ex_adsl adsl$SEX[adsl$SEX == \"M\"] <- NA adsl <- df_explicit_na(adsl, na_level = \"Missing Values\")  # Example 3 # Numeric variables that have missing values are not altered. This means that any `NA` value in # a numeric variable will not be included in the summary statistics, nor will they be included # in the denominator value for calculating the percent values. adsl <- tern_ex_adsl adsl$AGE[adsl$AGE < 30] <- NA adsl <- df_explicit_na(adsl)"},{"path":"https://insightsengineering.github.io/tern/main/reference/draw_grob.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw grob ‚Äî draw_grob","title":"Draw grob ‚Äî draw_grob","text":"Draw grob device page.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/draw_grob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw grob ‚Äî draw_grob","text":"","code":"draw_grob(grob, newpage = TRUE, vp = NULL)"},{"path":"https://insightsengineering.github.io/tern/main/reference/draw_grob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw grob ‚Äî draw_grob","text":"grob grid object newpage draw new page vp viewport object (NULL).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/draw_grob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw grob ‚Äî draw_grob","text":"","code":"library(dplyr) library(grid)  # Internal function - arrange_grob if (FALSE) { rect <- rectGrob(width = grid::unit(0.5, \"npc\"), height = grid::unit(0.5, \"npc\")) rect %>% draw_grob(vp = grid::viewport(angle = 45))  num <- lapply(1:10, textGrob) num %>%   arrange_grobs(grobs = .) %>%   draw_grob() showViewport() }"},{"path":"https://insightsengineering.github.io/tern/main/reference/empty_vector_if_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Return an empty numeric if all elements are NA. ‚Äî empty_vector_if_na","title":"Return an empty numeric if all elements are NA. ‚Äî empty_vector_if_na","text":"Return empty numeric elements NA.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/empty_vector_if_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return an empty numeric if all elements are NA. ‚Äî empty_vector_if_na","text":"","code":"empty_vector_if_na(x)"},{"path":"https://insightsengineering.github.io/tern/main/reference/empty_vector_if_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return an empty numeric if all elements are NA. ‚Äî empty_vector_if_na","text":"x (numeric) vector.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/empty_vector_if_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return an empty numeric if all elements are NA. ‚Äî empty_vector_if_na","text":"empty numeric.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/empty_vector_if_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return an empty numeric if all elements are NA. ‚Äî empty_vector_if_na","text":"","code":"x <- c(NA, NA, NA) # Internal function - empty_vector_if_na if (FALSE) { empty_vector_if_na(x) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Hazard Ratio Estimation in Interactions ‚Äî estimate_coef","title":"Hazard Ratio Estimation in Interactions ‚Äî estimate_coef","text":"function estimates hazard ratios arms interaction variable given specific values.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hazard Ratio Estimation in Interactions ‚Äî estimate_coef","text":"","code":"estimate_coef(   variable,   given,   lvl_var,   lvl_given,   coef,   mmat,   vcov,   conf_level = 0.95 )"},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hazard Ratio Estimation in Interactions ‚Äî estimate_coef","text":"variable, given Names two variable interaction. seek estimation levels variable given levels given. lvl_var, lvl_given corresponding levels given levels. coef Numeric estimated coefficients. mmat name numeric filled 0 used template obtain design matrix. vcov Variance-covariance matrix underlying model. conf_level Single numeric confidence level estimate intervals.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hazard Ratio Estimation in Interactions ‚Äî estimate_coef","text":"list matrix (one per level variable) rows corresponding combinations variable given, columns: coef_hat Estimation coefficient. coef_se Standard error estimation. hr Hazard ratio. lcl, ucl Lower/upper confidence limit hazard ratio.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_coef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hazard Ratio Estimation in Interactions ‚Äî estimate_coef","text":"Given cox regression investigating effect Arm (, B, C; reference ) Sex (F, M; reference Female). model abbreviated: y ~ Arm + Sex + Arm x Sex. cox regression estimates coefficients along variance-covariance matrix : b1 (arm b), b2 (arm c) b3 (sex m) b4 (arm b: sex m), b5 (arm c: sex m) Given want estimation Hazard Ratio arm C/sex M, estimation given reference arm /Sex M exp(b2 + b3 + b5)/ exp(b3) = exp(b2 + b5), therefore interaction coefficient given b2 + b5 standard error obtained $1.96 * sqrt(Var b2 + Var b5 + 2 * covariance (b2,b5))$ confidence level 0.95.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hazard Ratio Estimation in Interactions ‚Äî estimate_coef","text":"","code":"library(dplyr) library(survival)  ADSL <- tern_ex_adsl %>%   filter(SEX %in% c(\"F\", \"M\"))  adtte <- tern_ex_adtte %>% filter(PARAMCD == \"PFS\") adtte$ARMCD <- droplevels(adtte$ARMCD) adtte$SEX <- droplevels(adtte$SEX)  mod <- coxph(   formula = Surv(time = AVAL, event = 1 - CNSR) ~ (SEX + ARMCD)^2,   data = adtte )  mmat <- stats::model.matrix(mod)[1, ] mmat[!mmat == 0] <- 0  # Internal function - estimate_coef if (FALSE) { estimate_coef(   variable = \"ARMCD\", given = \"SEX\", lvl_var = \"ARM A\", lvl_given = \"M\",   coef = stats::coef(mod), mmat = mmat, vcov = stats::vcov(mod), conf_level = .95 ) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_multinomial_rsp.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of Proportions per Level of Factor ‚Äî estimate_multinomial_rsp","title":"Estimation of Proportions per Level of Factor ‚Äî estimate_multinomial_rsp","text":"Estimate proportion along confidence interval proportion regarding level factor.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_multinomial_rsp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of Proportions per Level of Factor ‚Äî estimate_multinomial_rsp","text":"","code":"s_length_proportion(x, .N_col, ...)  a_length_proportion(x, .N_col, ...)  estimate_multinomial_response(   lyt,   var,   ...,   show_labels = \"hidden\",   table_names = var,   .stats = \"prop_ci\",   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_multinomial_rsp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of Proportions per Level of Factor ‚Äî estimate_multinomial_rsp","text":"x (numeric) vector numbers want analyze. .N_col (count) row-wise N (row group count) group observations analyzed (.e. column-based subsetting) passed rtables. ... additional arguments lower level functions. lyt (layout) input layout analyses added . var (string) single variable name passed rtables requested statistics function. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_multinomial_rsp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation of Proportions per Level of Factor ‚Äî estimate_multinomial_rsp","text":"See s_proportion() statistics additional possible arguments.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_multinomial_rsp.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Estimation of Proportions per Level of Factor ‚Äî estimate_multinomial_rsp","text":"s_length_proportion(): Statistics function takes length input x takes number successes, column number .N_col total number, feeds s_proportion(). a_length_proportion(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). estimate_multinomial_response(): Analyze Function adds multinomial proportion analysis input layout. Note additional formatting arguments can used .","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_multinomial_rsp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of Proportions per Level of Factor ‚Äî estimate_multinomial_rsp","text":"","code":"s_length_proportion(rep(\"CR\", 10), .N_col = 100) #> $n_prop #> [1] 10.0  0.1 #> attr(,\"label\") #> [1] \"Responders\" #>  #> $prop_ci #> [1]  3.620108 16.379892 #> attr(,\"label\") #> [1] \"95% CI (Wald, with correction)\" #>  s_length_proportion(factor(character(0)), .N_col = 100) #> $n_prop #> [1] 0 0 #> attr(,\"label\") #> [1] \"Responders\" #>  #> $prop_ci #> [1] 0.0 0.5 #> attr(,\"label\") #> [1] \"95% CI (Wald, with correction)\" #>  a_length_proportion(rep(\"CR\", 10), .N_col = 100) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod                      row_label #> 1   n_prop     10 (10.0%)          0                     Responders #> 2  prop_ci  (3.62, 16.38)          0 95% CI (Wald, with correction) a_length_proportion(factor(character(0)), .N_col = 100) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod                      row_label #> 1   n_prop       0 (0.0%)          0                     Responders #> 2  prop_ci   (0.00, 0.50)          0 95% CI (Wald, with correction) library(dplyr)  # Use of the layout creating function. dta_test <- data.frame(   USUBJID = paste0(\"S\", 1:12),   ARM     = factor(rep(LETTERS[1:3], each = 4)),   AVAL    = c(A = c(1, 1, 1, 1), B = c(0, 0, 1, 1), C = c(0, 0, 0, 0)) ) %>% mutate(   AVALC = factor(AVAL,     levels = c(0, 1),     labels = c(\"Complete Response (CR)\", \"Partial Response (PR)\")   ) )  lyt <- basic_table() %>%   split_cols_by(\"ARM\") %>%   estimate_multinomial_response(var = \"AVALC\")  tbl <- build_table(lyt, dta_test)  html <- as_html(tbl) html #> <div class=\"rtables-all-parts-block rtables-container\"> #>   <table class=\"table table-condensed table-hover\"> #>     <tr> #>       <th style=\"white-space:pre;\"><\/th> #>       <th class=\"text-center\">A<\/th> #>       <th class=\"text-center\">B<\/th> #>       <th class=\"text-center\">C<\/th> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\">Complete Response (CR)<\/td> #>       <td class=\"text-center\">0 (0.0%)<\/td> #>       <td class=\"text-center\">2 (50.0%)<\/td> #>       <td class=\"text-center\">4 (100.0%)<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\" style=\"padding-left: 3ch\">95% CI (Wald, with correction)<\/td> #>       <td class=\"text-center\">(0.00, 12.50)<\/td> #>       <td class=\"text-center\">(0.00, 100.00)<\/td> #>       <td class=\"text-center\">(87.50, 100.00)<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\">Partial Response (PR)<\/td> #>       <td class=\"text-center\">4 (100.0%)<\/td> #>       <td class=\"text-center\">2 (50.0%)<\/td> #>       <td class=\"text-center\">0 (0.0%)<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\" style=\"padding-left: 3ch\">95% CI (Wald, with correction)<\/td> #>       <td class=\"text-center\">(87.50, 100.00)<\/td> #>       <td class=\"text-center\">(0.00, 100.00)<\/td> #>       <td class=\"text-center\">(0.00, 12.50)<\/td> #>     <\/tr> #>     <caption style=\"caption-side:top;\"><div class=\"rtables-titles-block rtables-container\"> #>         <div class=\"rtables-main-titles-block rtables-container\"> #>           <p class=\"rtables-main-title\"><\/p> #>         <\/div> #>         <div class=\"rtables-subtitles-block rtables-container\"><\/div> #>       <\/div> #>     <\/caption> #>   <\/table> #>   <div class=\"rtables-footers-block rtables-container\"><\/div> #> <\/div> if (FALSE) { Viewer(html) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_proportions.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of Proportions ‚Äî estimate_proportions","title":"Estimation of Proportions ‚Äî estimate_proportions","text":"Estimate proportion responders within studied population.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_proportions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of Proportions ‚Äî estimate_proportions","text":"","code":"s_proportion(   df,   .var,   conf_level = 0.95,   method = c(\"waldcc\", \"wald\", \"clopper-pearson\", \"wilson\", \"wilsonc\", \"strat_wilson\",     \"strat_wilsonc\", \"agresti-coull\", \"jeffreys\"),   weights = NULL,   max_iterations = 50,   variables = list(strata = NULL),   long = FALSE )  a_proportion(   df,   .var,   conf_level = 0.95,   method = c(\"waldcc\", \"wald\", \"clopper-pearson\", \"wilson\", \"wilsonc\", \"strat_wilson\",     \"strat_wilsonc\", \"agresti-coull\", \"jeffreys\"),   weights = NULL,   max_iterations = 50,   variables = list(strata = NULL),   long = FALSE )  estimate_proportion(   lyt,   vars,   ...,   show_labels = \"hidden\",   table_names = vars,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_proportions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of Proportions ‚Äî estimate_proportions","text":"df (logical data.frame) logical vector used, indicates whether subject responder . TRUE represents successful outcome. data.frame provided, also strata variable names must provided variables list element strata strings. case data.frame, logical vector responses must indicated variable name .var. .var (string) single variable name passed rtables requested statistics function. conf_level (proportion) confidence level interval. method (string) method used construct confidence interval proportion successful outcomes; one waldcc, wald, clopper-pearson, wilson, wilsonc, strat_wilson, strat_wilsonc, agresti-coull jeffreys. weights (numeric NULL) weights level strata. NULL, estimated using iterative algorithm proposed Yan Su (2010)  minimizes weighted squared length confidence interval. max_iterations (count) maximum number iterations iterative procedure used find estimates optimal weights. variables (named list string) list additional analysis variables. long (flag) long description required. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . ... arguments ultimately conveyed s_proportion(). show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_proportions.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Estimation of Proportions ‚Äî estimate_proportions","text":"s_proportion(): statistics function estimating proportion along confidence interval. a_proportion(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). estimate_proportion(): used rtables pipeline.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/estimate_proportions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of Proportions ‚Äî estimate_proportions","text":"","code":"# Case with only logical vector. rsp_v <- c(1, 0, 1, 0, 1, 1, 0, 0) s_proportion(rsp_v) #> $n_prop #> [1] 4.0 0.5 #> attr(,\"label\") #> [1] \"Responders\" #>  #> $prop_ci #> [1]  9.102404 90.897596 #> attr(,\"label\") #> [1] \"95% CI (Wald, with correction)\" #>   # Example for Stratified Wilson CI nex <- 100 # Number of example rows dta <- data.frame(   \"rsp\" = sample(c(TRUE, FALSE), nex, TRUE),   \"grp\" = sample(c(\"A\", \"B\"), nex, TRUE),   \"f1\" = sample(c(\"a1\", \"a2\"), nex, TRUE),   \"f2\" = sample(c(\"x\", \"y\", \"z\"), nex, TRUE),   stringsAsFactors = TRUE )  s_proportion(   df = dta,   .var = \"rsp\",   variables = list(strata = c(\"f1\", \"f2\")),   conf_level = 0.90,   method = \"strat_wilson\" ) #> $n_prop #> [1] 49.00  0.49 #> attr(,\"label\") #> [1] \"Responders\" #>  #> $prop_ci #>    lower    upper  #> 40.80675 56.65017  #> attr(,\"label\") #> [1] \"90% CI (Stratified Wilson, without correction)\" #>   dta_test <- data.frame(   USUBJID = paste0(\"S\", 1:12),   ARM     = rep(LETTERS[1:3], each = 4),   AVAL    = c(A = c(1, 1, 1, 1), B = c(0, 0, 1, 1), C = c(0, 0, 0, 0)) )  basic_table() %>%   split_cols_by(\"ARM\") %>%   estimate_proportion(vars = \"AVAL\") %>%   build_table(df = dta_test) #>                                        A              B              C      #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Responders                        4 (100.0%)      2 (50.0%)      0 (0.0%)   #> 95% CI (Wald, with correction)   (87.5, 100.0)   (0.0, 100.0)   (0.0, 12.5)"},{"path":"https://insightsengineering.github.io/tern/main/reference/ex_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated CDISC Data for Examples ‚Äî ex_data","title":"Simulated CDISC Data for Examples ‚Äî ex_data","text":"Simulated CDISC Data Examples","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/ex_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated CDISC Data for Examples ‚Äî ex_data","text":"","code":"tern_ex_adsl  tern_ex_adae  tern_ex_adlb  tern_ex_adpp  tern_ex_adrs  tern_ex_adtte"},{"path":"https://insightsengineering.github.io/tern/main/reference/ex_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated CDISC Data for Examples ‚Äî ex_data","text":"rds (data.frame) object class tbl_df (inherits tbl, data.frame) 200 rows 21 columns. object class tbl_df (inherits tbl, data.frame) 541 rows 42 columns. object class tbl_df (inherits tbl, data.frame) 4200 rows 50 columns. object class tbl_df (inherits tbl, data.frame) 522 rows 25 columns. object class tbl_df (inherits tbl, data.frame) 1600 rows 29 columns. object class tbl_df (inherits tbl, data.frame) 1000 rows 28 columns.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/ex_data.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Simulated CDISC Data for Examples ‚Äî ex_data","text":"tern_ex_adsl: ADSL data tern_ex_adae: ADAE data tern_ex_adlb: ADLB data tern_ex_adpp: ADPP data tern_ex_adrs: ADRS data tern_ex_adtte: ADTTE data","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/explicit_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing Data ‚Äî explicit_na","title":"Missing Data ‚Äî explicit_na","text":"Substitute missing data string factor level.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/explicit_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing Data ‚Äî explicit_na","text":"","code":"explicit_na(x, label = \"<Missing>\")"},{"path":"https://insightsengineering.github.io/tern/main/reference/explicit_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing Data ‚Äî explicit_na","text":"x factor character vector label character string missing data replaced ","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/explicit_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing Data ‚Äî explicit_na","text":"","code":"explicit_na(c(NA, \"a\", \"b\")) #> [1] \"<Missing>\" \"a\"         \"b\"         is.na(explicit_na(c(NA, \"a\", \"b\"))) #> [1] FALSE FALSE FALSE  explicit_na(factor(c(NA, \"a\", \"b\"))) #> [1] <Missing> a         b         #> Levels: a b <Missing> is.na(explicit_na(factor(c(NA, \"a\", \"b\")))) #> [1] FALSE FALSE FALSE  explicit_na(sas_na(c(\"a\", \"\"))) #> [1] \"a\"         \"<Missing>\""},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_by_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Elements by Name ‚Äî extract_by_name","title":"Extract Elements by Name ‚Äî extract_by_name","text":"utility function extracts elements vector x names. Differences standard [base::[()] function : x NULL, still always NULL returned (base function). x NULL, intersection names made names elements returned. , names appear x returned NAs.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_by_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Elements by Name ‚Äî extract_by_name","text":"","code":"extract_by_name(x, names)"},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_by_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Elements by Name ‚Äî extract_by_name","text":"x (named vector) extract named elements . names (character) vector names extract.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_by_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Elements by Name ‚Äî extract_by_name","text":"Either NULL extracted elements x.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_rsp_biomarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares Response Data Estimates for Multiple Biomarkers in a Single Data Frame ‚Äî extract_rsp_biomarkers","title":"Prepares Response Data Estimates for Multiple Biomarkers in a Single Data Frame ‚Äî extract_rsp_biomarkers","text":"Prepares estimates number responses, patients overall response rate, well odds ratio estimates, confidence intervals p-values, multiple biomarkers across population subgroups single data frame. variables corresponds names variables found data, passed named list requires elements rsp biomarkers (vector continuous biomarker variables) optionally covariates, subgroups strat. groups_lists optionally specifies groupings subgroups variables.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_rsp_biomarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares Response Data Estimates for Multiple Biomarkers in a Single Data Frame ‚Äî extract_rsp_biomarkers","text":"","code":"extract_rsp_biomarkers(   variables,   data,   groups_lists = list(),   control = control_logistic(),   label_all = \"All Patients\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_rsp_biomarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares Response Data Estimates for Multiple Biomarkers in a Single Data Frame ‚Äî extract_rsp_biomarkers","text":"variables (named list string) list additional analysis variables. data (data.frame) dataset containing variables summarize. groups_lists (named list list) optionally contains subgroups variable list, specifies new group levels via names levels belong character vectors elements list. control (named list) controls response definition confidence level produced control_logistic(). label_all (string) label total population analysis.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_rsp_biomarkers.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Prepares Response Data Estimates for Multiple Biomarkers in a Single Data Frame ‚Äî extract_rsp_biomarkers","text":"can also specify continuous variable rsp use response_definition control convert internally logical variable reflecting binary response.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_rsp_biomarkers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares Response Data Estimates for Multiple Biomarkers in a Single Data Frame ‚Äî extract_rsp_biomarkers","text":"","code":"library(dplyr) library(forcats)  adrs <- tern_ex_adrs adrs_labels <- formatters::var_labels(adrs)  adrs_f <- adrs %>%   filter(PARAMCD == \"BESRSPI\") %>%   mutate(rsp = AVALC == \"CR\")  # Typical analysis of two continuous biomarkers `BMRKR1` and `AGE`, # in logistic regression models with one covariate `RACE`. The subgroups # are defined by the levels of `BMRKR2`. df <- extract_rsp_biomarkers(   variables = list(     rsp = \"rsp\",     biomarkers = c(\"BMRKR1\", \"AGE\"),     covariates = \"SEX\",     subgroups = \"BMRKR2\"   ),   data = adrs_f ) df #>   biomarker              biomarker_label n_tot n_rsp      prop        or #> 1    BMRKR1 Continuous Level Biomarker 1   200   164 0.8200000 0.9755036 #> 2       AGE                          Age   200   164 0.8200000 0.9952416 #> 3    BMRKR1 Continuous Level Biomarker 1    70    53 0.7571429 1.1524547 #> 4       AGE                          Age    70    53 0.7571429 0.9261012 #> 5    BMRKR1 Continuous Level Biomarker 1    68    58 0.8529412 0.8773122 #> 6       AGE                          Age    68    58 0.8529412 0.9867104 #> 7    BMRKR1 Continuous Level Biomarker 1    62    53 0.8548387 0.8792921 #> 8       AGE                          Age    62    53 0.8548387 1.0630262 #>         lcl      ucl conf_level      pval     pval_label     subgroup    var #> 1 0.8804862 1.080775       0.95 0.6352602 p-value (Wald) All Patients    ALL #> 2 0.9462617 1.046757       0.95 0.8530389 p-value (Wald) All Patients    ALL #> 3 0.9462127 1.403650       0.95 0.1584187 p-value (Wald)          LOW BMRKR2 #> 4 0.8487519 1.010500       0.95 0.0844837 p-value (Wald)          LOW BMRKR2 #> 5 0.7277189 1.057657       0.95 0.1699778 p-value (Wald)       MEDIUM BMRKR2 #> 6 0.8798911 1.106498       0.95 0.8189816 p-value (Wald)       MEDIUM BMRKR2 #> 7 0.7189748 1.075357       0.95 0.2103709 p-value (Wald)         HIGH BMRKR2 #> 8 0.9595973 1.177603       0.95 0.2418840 p-value (Wald)         HIGH BMRKR2 #>                      var_label row_type #> 1                 All Patients  content #> 2                 All Patients  content #> 3 Continuous Level Biomarker 2 analysis #> 4 Continuous Level Biomarker 2 analysis #> 5 Continuous Level Biomarker 2 analysis #> 6 Continuous Level Biomarker 2 analysis #> 7 Continuous Level Biomarker 2 analysis #> 8 Continuous Level Biomarker 2 analysis  # Here we group the levels of `BMRKR2` manually, and we add a stratification # variable `STRATA1`. We also here use a continuous variable `EOSDY` # which is then binarized internally (response is defined as this variable # being larger than 500). df_grouped <- extract_rsp_biomarkers(   variables = list(     rsp = \"EOSDY\",     biomarkers = c(\"BMRKR1\", \"AGE\"),     covariates = \"SEX\",     subgroups = \"BMRKR2\",     strat = \"STRATA1\"   ),   data = adrs_f,   groups_lists = list(     BMRKR2 = list(       \"low\" = \"LOW\",       \"low/medium\" = c(\"LOW\", \"MEDIUM\"),       \"low/medium/high\" = c(\"LOW\", \"MEDIUM\", \"HIGH\")     )   ),   control = control_logistic(     response_definition = \"I(response > 500)\"   ) ) #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge #> Warning: NaNs produced #> Warning: Ran out of iterations and did not converge #> Warning: NaNs produced #> Warning: Ran out of iterations and did not converge #> Warning: NaNs produced #> Warning: Ran out of iterations and did not converge #> Warning: NaNs produced #> Warning: Ran out of iterations and did not converge #> Warning: Ran out of iterations and did not converge df_grouped #>   biomarker              biomarker_label n_tot n_rsp prop or lcl ucl conf_level #> 1    BMRKR1 Continuous Level Biomarker 1   200   200    1  1   0 Inf       0.95 #> 2       AGE                          Age   200   200    1  1   0 Inf       0.95 #> 3    BMRKR1 Continuous Level Biomarker 1    70    70    1  1 NaN NaN       0.95 #> 4       AGE                          Age    70    70    1  1 NaN NaN       0.95 #> 5    BMRKR1 Continuous Level Biomarker 1   138   138    1  1 NaN NaN       0.95 #> 6       AGE                          Age   138   138    1  1 NaN NaN       0.95 #> 7    BMRKR1 Continuous Level Biomarker 1   200   200    1  1   0 Inf       0.95 #> 8       AGE                          Age   200   200    1  1   0 Inf       0.95 #>   pval     pval_label        subgroup    var                    var_label #> 1    1 p-value (Wald)    All Patients    ALL                 All Patients #> 2    1 p-value (Wald)    All Patients    ALL                 All Patients #> 3  NaN p-value (Wald)             low BMRKR2 Continuous Level Biomarker 2 #> 4  NaN p-value (Wald)             low BMRKR2 Continuous Level Biomarker 2 #> 5  NaN p-value (Wald)      low/medium BMRKR2 Continuous Level Biomarker 2 #> 6  NaN p-value (Wald)      low/medium BMRKR2 Continuous Level Biomarker 2 #> 7    1 p-value (Wald) low/medium/high BMRKR2 Continuous Level Biomarker 2 #> 8    1 p-value (Wald) low/medium/high BMRKR2 Continuous Level Biomarker 2 #>   row_type #> 1  content #> 2  content #> 3 analysis #> 4 analysis #> 5 analysis #> 6 analysis #> 7 analysis #> 8 analysis"},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_rsp_subgroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares Response Data for Population Subgroups in Data Frames ‚Äî extract_rsp_subgroups","title":"Prepares Response Data for Population Subgroups in Data Frames ‚Äî extract_rsp_subgroups","text":"Prepares response rates odds ratios population subgroups data frames. Simple wrapper h_odds_ratio_subgroups_df() h_proportion_subgroups_df(). Result list two data frames: prop . variables corresponds names variables found data, passed named list requires elements rsp, arm optionally subgroups strat. groups_lists optionally specifies groupings subgroups variables.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_rsp_subgroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares Response Data for Population Subgroups in Data Frames ‚Äî extract_rsp_subgroups","text":"","code":"extract_rsp_subgroups(   variables,   data,   groups_lists = list(),   conf_level = 0.95,   method = NULL,   label_all = \"All Patients\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_rsp_subgroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares Response Data for Population Subgroups in Data Frames ‚Äî extract_rsp_subgroups","text":"variables (named list string) list additional analysis variables. data (data.frame) dataset containing variables summarize. groups_lists (named list list) optionally contains subgroups variable list, specifies new group levels via names levels belong character vectors elements list. conf_level (proportion) confidence level interval. method (string) specifies test used calculate p-value difference two proportions. options, see s_test_proportion_diff(). Default NULL test performed. label_all (string) label total population analysis.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_rsp_subgroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares Response Data for Population Subgroups in Data Frames ‚Äî extract_rsp_subgroups","text":"","code":"library(dplyr) library(forcats)  adrs <- tern_ex_adrs adrs_labels <- formatters::var_labels(adrs)  adrs_f <- adrs %>%   filter(PARAMCD == \"BESRSPI\") %>%   filter(ARM %in% c(\"A: Drug X\", \"B: Placebo\")) %>%   droplevels() %>%   mutate(     # Reorder levels of factor to make the placebo group the reference arm.     ARM = fct_relevel(ARM, \"B: Placebo\"),     rsp = AVALC == \"CR\"   ) formatters::var_labels(adrs_f) <- c(adrs_labels, \"Response\")  # Unstratified analysis. df <- extract_rsp_subgroups(   variables = list(rsp = \"rsp\", arm = \"ARM\", subgroups = c(\"SEX\", \"BMRKR2\")),   data = adrs_f ) df #> $prop #>           arm  n n_rsp      prop     subgroup    var #> 1  B: Placebo 73    50 0.6849315 All Patients    ALL #> 2   A: Drug X 69    59 0.8550725 All Patients    ALL #> 3  B: Placebo 40    25 0.6250000            F    SEX #> 4   A: Drug X 38    36 0.9473684            F    SEX #> 5  B: Placebo 33    25 0.7575758            M    SEX #> 6   A: Drug X 31    23 0.7419355            M    SEX #> 7  B: Placebo 24    13 0.5416667          LOW BMRKR2 #> 8   A: Drug X 26    21 0.8076923          LOW BMRKR2 #> 9  B: Placebo 23    17 0.7391304       MEDIUM BMRKR2 #> 10  A: Drug X 26    23 0.8846154       MEDIUM BMRKR2 #> 11 B: Placebo 26    20 0.7692308         HIGH BMRKR2 #> 12  A: Drug X 17    15 0.8823529         HIGH BMRKR2 #>                       var_label row_type #> 1                  All Patients  content #> 2                  All Patients  content #> 3                           Sex analysis #> 4                           Sex analysis #> 5                           Sex analysis #> 6                           Sex analysis #> 7  Continuous Level Biomarker 2 analysis #> 8  Continuous Level Biomarker 2 analysis #> 9  Continuous Level Biomarker 2 analysis #> 10 Continuous Level Biomarker 2 analysis #> 11 Continuous Level Biomarker 2 analysis #> 12 Continuous Level Biomarker 2 analysis #>  #> $or #>   arm n_tot        or       lcl       ucl conf_level     subgroup    var #> 1       142  2.714000 1.1804488  6.239827       0.95 All Patients    ALL #> 2        78 10.800000 2.2669576 51.452218       0.95            F    SEX #> 3        64  0.920000 0.2966470  2.853223       0.95            M    SEX #> 4        50  3.553846 1.0047370 12.570277       0.95          LOW BMRKR2 #> 5        49  2.705882 0.5911718 12.385232       0.95       MEDIUM BMRKR2 #> 6        43  2.250000 0.3970298 12.750933       0.95         HIGH BMRKR2 #>                      var_label row_type #> 1                 All Patients  content #> 2                          Sex analysis #> 3                          Sex analysis #> 4 Continuous Level Biomarker 2 analysis #> 5 Continuous Level Biomarker 2 analysis #> 6 Continuous Level Biomarker 2 analysis #>   # Stratified analysis. df_strat <- extract_rsp_subgroups(   variables = list(rsp = \"rsp\", arm = \"ARM\", subgroups = c(\"SEX\", \"BMRKR2\"), strat = \"STRATA1\"),   data = adrs_f ) df_strat #> $prop #>           arm  n n_rsp      prop     subgroup    var #> 1  B: Placebo 73    50 0.6849315 All Patients    ALL #> 2   A: Drug X 69    59 0.8550725 All Patients    ALL #> 3  B: Placebo 40    25 0.6250000            F    SEX #> 4   A: Drug X 38    36 0.9473684            F    SEX #> 5  B: Placebo 33    25 0.7575758            M    SEX #> 6   A: Drug X 31    23 0.7419355            M    SEX #> 7  B: Placebo 24    13 0.5416667          LOW BMRKR2 #> 8   A: Drug X 26    21 0.8076923          LOW BMRKR2 #> 9  B: Placebo 23    17 0.7391304       MEDIUM BMRKR2 #> 10  A: Drug X 26    23 0.8846154       MEDIUM BMRKR2 #> 11 B: Placebo 26    20 0.7692308         HIGH BMRKR2 #> 12  A: Drug X 17    15 0.8823529         HIGH BMRKR2 #>                       var_label row_type #> 1                  All Patients  content #> 2                  All Patients  content #> 3                           Sex analysis #> 4                           Sex analysis #> 5                           Sex analysis #> 6                           Sex analysis #> 7  Continuous Level Biomarker 2 analysis #> 8  Continuous Level Biomarker 2 analysis #> 9  Continuous Level Biomarker 2 analysis #> 10 Continuous Level Biomarker 2 analysis #> 11 Continuous Level Biomarker 2 analysis #> 12 Continuous Level Biomarker 2 analysis #>  #> $or #>   arm n_tot        or       lcl       ucl conf_level     subgroup    var #> 1       142 2.6343899 1.1537821  6.015009       0.95 All Patients    ALL #> 2        78 9.5946605 2.0379337 45.171985       0.95            F    SEX #> 3        64 0.8947158 0.2936803  2.725809       0.95            M    SEX #> 4        50 3.5976656 1.0101319 12.813374       0.95          LOW BMRKR2 #> 5        49 2.6242168 0.5162572 13.339308       0.95       MEDIUM BMRKR2 #> 6        43 2.2816865 0.4116391 12.647228       0.95         HIGH BMRKR2 #>                      var_label row_type #> 1                 All Patients  content #> 2                          Sex analysis #> 3                          Sex analysis #> 4 Continuous Level Biomarker 2 analysis #> 5 Continuous Level Biomarker 2 analysis #> 6 Continuous Level Biomarker 2 analysis #>   # Grouping of the BMRKR2 levels. df_grouped <- extract_rsp_subgroups(   variables = list(rsp = \"rsp\", arm = \"ARM\", subgroups = c(\"SEX\", \"BMRKR2\")),   data = adrs_f,   groups_lists = list(     BMRKR2 = list(       \"low\" = \"LOW\",       \"low/medium\" = c(\"LOW\", \"MEDIUM\"),       \"low/medium/high\" = c(\"LOW\", \"MEDIUM\", \"HIGH\")     )   ) ) df_grouped #> $prop #>           arm  n n_rsp      prop        subgroup    var #> 1  B: Placebo 73    50 0.6849315    All Patients    ALL #> 2   A: Drug X 69    59 0.8550725    All Patients    ALL #> 3  B: Placebo 40    25 0.6250000               F    SEX #> 4   A: Drug X 38    36 0.9473684               F    SEX #> 5  B: Placebo 33    25 0.7575758               M    SEX #> 6   A: Drug X 31    23 0.7419355               M    SEX #> 7  B: Placebo 24    13 0.5416667             low BMRKR2 #> 8   A: Drug X 26    21 0.8076923             low BMRKR2 #> 9  B: Placebo 47    30 0.6382979      low/medium BMRKR2 #> 10  A: Drug X 52    44 0.8461538      low/medium BMRKR2 #> 11 B: Placebo 73    50 0.6849315 low/medium/high BMRKR2 #> 12  A: Drug X 69    59 0.8550725 low/medium/high BMRKR2 #>                       var_label row_type #> 1                  All Patients  content #> 2                  All Patients  content #> 3                           Sex analysis #> 4                           Sex analysis #> 5                           Sex analysis #> 6                           Sex analysis #> 7  Continuous Level Biomarker 2 analysis #> 8  Continuous Level Biomarker 2 analysis #> 9  Continuous Level Biomarker 2 analysis #> 10 Continuous Level Biomarker 2 analysis #> 11 Continuous Level Biomarker 2 analysis #> 12 Continuous Level Biomarker 2 analysis #>  #> $or #>   arm n_tot        or      lcl       ucl conf_level        subgroup    var #> 1       142  2.714000 1.180449  6.239827       0.95    All Patients    ALL #> 2        78 10.800000 2.266958 51.452218       0.95               F    SEX #> 3        64  0.920000 0.296647  2.853223       0.95               M    SEX #> 4        50  3.553846 1.004737 12.570277       0.95             low BMRKR2 #> 5        99  3.116667 1.193409  8.139385       0.95      low/medium BMRKR2 #> 6       142  2.714000 1.180449  6.239827       0.95 low/medium/high BMRKR2 #>                      var_label row_type #> 1                 All Patients  content #> 2                          Sex analysis #> 3                          Sex analysis #> 4 Continuous Level Biomarker 2 analysis #> 5 Continuous Level Biomarker 2 analysis #> 6 Continuous Level Biomarker 2 analysis #>"},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_survival_biomarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares Survival Data Estimates for Multiple Biomarkers in a Single Data Frame ‚Äî extract_survival_biomarkers","title":"Prepares Survival Data Estimates for Multiple Biomarkers in a Single Data Frame ‚Äî extract_survival_biomarkers","text":"Prepares estimates number events, patients median survival times, well hazard ratio estimates, confidence intervals p-values, multiple biomarkers across population subgroups single data frame. variables corresponds names variables found data, passed named list requires elements tte, is_event, biomarkers (vector continuous biomarker variables) optionally subgroups strat. groups_lists optionally specifies groupings subgroups variables.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_survival_biomarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares Survival Data Estimates for Multiple Biomarkers in a Single Data Frame ‚Äî extract_survival_biomarkers","text":"","code":"extract_survival_biomarkers(   variables,   data,   groups_lists = list(),   control = control_coxreg(),   label_all = \"All Patients\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_survival_biomarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares Survival Data Estimates for Multiple Biomarkers in a Single Data Frame ‚Äî extract_survival_biomarkers","text":"variables (named list string) list additional analysis variables. data (data.frame) dataset containing variables summarize. groups_lists (named list list) optionally contains subgroups variable list, specifies new group levels via names levels belong character vectors elements list. control (list) list parameters returned helper function control_coxreg(). label_all (string) label total population analysis.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_survival_biomarkers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares Survival Data Estimates for Multiple Biomarkers in a Single Data Frame ‚Äî extract_survival_biomarkers","text":"","code":"# Typical analysis of two continuous biomarkers `BMRKR1` and `AGE`, # in multiple regression models containing one covariate `RACE`, # as well as one stratification variable `STRATA1`. The subgroups # are defined by the levels of `BMRKR2`.  library(dplyr)  adtte <- tern_ex_adtte adtte_labels <- formatters::var_labels(adtte)  adtte_f <- adtte %>%   filter(PARAMCD == \"OS\") %>%   mutate(     AVALU = as.character(AVALU),     is_event = CNSR == 0   ) labels <- c(\"AVALU\" = adtte_labels[[\"AVALU\"]], \"is_event\" = \"Event Flag\") formatters::var_labels(adtte_f)[names(labels)] <- labels  df <- extract_survival_biomarkers(   variables = list(     tte = \"AVAL\",     is_event = \"is_event\",     biomarkers = c(\"BMRKR1\", \"AGE\"),     strata = \"STRATA1\",     covariates = \"SEX\",     subgroups = \"BMRKR2\"   ),   data = adtte_f ) df #>   biomarker              biomarker_label n_tot n_tot_events   median        hr #> 1    BMRKR1 Continuous Level Biomarker 1   200          141 753.5176 1.0010939 #> 2       AGE                          Age   200          141 753.5176 1.0106406 #> 3    BMRKR1 Continuous Level Biomarker 1    70           52 735.4722 0.9905065 #> 4       AGE                          Age    70           52 735.4722 1.0106279 #> 5    BMRKR1 Continuous Level Biomarker 1    68           42 858.9952 0.9623210 #> 6       AGE                          Age    68           42 858.9952 1.0360765 #> 7    BMRKR1 Continuous Level Biomarker 1    62           47 727.8043 1.0770946 #> 8       AGE                          Age    62           47 727.8043 1.0009890 #>         lcl      ucl conf_level      pval     pval_label     subgroup    var #> 1 0.9538978 1.050625       0.95 0.9646086 p-value (Wald) All Patients    ALL #> 2 0.9871004 1.034742       0.95 0.3787395 p-value (Wald) All Patients    ALL #> 3 0.9142220 1.073156       0.95 0.8155443 p-value (Wald)          LOW BMRKR2 #> 4 0.9621192 1.061582       0.95 0.6735773 p-value (Wald)          LOW BMRKR2 #> 5 0.8708694 1.063376       0.95 0.4509368 p-value (Wald)       MEDIUM BMRKR2 #> 6 0.9727439 1.103532       0.95 0.2707796 p-value (Wald)       MEDIUM BMRKR2 #> 7 0.9756250 1.189118       0.95 0.1412524 p-value (Wald)         HIGH BMRKR2 #> 8 0.9678535 1.035259       0.95 0.9541048 p-value (Wald)         HIGH BMRKR2 #>                      var_label row_type #> 1                 All Patients  content #> 2                 All Patients  content #> 3 Continuous Level Biomarker 2 analysis #> 4 Continuous Level Biomarker 2 analysis #> 5 Continuous Level Biomarker 2 analysis #> 6 Continuous Level Biomarker 2 analysis #> 7 Continuous Level Biomarker 2 analysis #> 8 Continuous Level Biomarker 2 analysis  # Here we group the levels of `BMRKR2` manually. df_grouped <- extract_survival_biomarkers(   variables = list(     tte = \"AVAL\",     is_event = \"is_event\",     biomarkers = c(\"BMRKR1\", \"AGE\"),     strata = \"STRATA1\",     covariates = \"SEX\",     subgroups = \"BMRKR2\"   ),   data = adtte_f,   groups_lists = list(     BMRKR2 = list(       \"low\" = \"LOW\",       \"low/medium\" = c(\"LOW\", \"MEDIUM\"),       \"low/medium/high\" = c(\"LOW\", \"MEDIUM\", \"HIGH\")     )   ) ) df_grouped #>   biomarker              biomarker_label n_tot n_tot_events   median        hr #> 1    BMRKR1 Continuous Level Biomarker 1   200          141 753.5176 1.0010939 #> 2       AGE                          Age   200          141 753.5176 1.0106406 #> 3    BMRKR1 Continuous Level Biomarker 1    70           52 735.4722 0.9905065 #> 4       AGE                          Age    70           52 735.4722 1.0106279 #> 5    BMRKR1 Continuous Level Biomarker 1   138           94 777.8929 0.9801709 #> 6       AGE                          Age   138           94 777.8929 1.0236283 #> 7    BMRKR1 Continuous Level Biomarker 1   200          141 753.5176 1.0010939 #> 8       AGE                          Age   200          141 753.5176 1.0106406 #>         lcl      ucl conf_level      pval     pval_label        subgroup    var #> 1 0.9538978 1.050625       0.95 0.9646086 p-value (Wald)    All Patients    ALL #> 2 0.9871004 1.034742       0.95 0.3787395 p-value (Wald)    All Patients    ALL #> 3 0.9142220 1.073156       0.95 0.8155443 p-value (Wald)             low BMRKR2 #> 4 0.9621192 1.061582       0.95 0.6735773 p-value (Wald)             low BMRKR2 #> 5 0.9235465 1.040267       0.95 0.5094582 p-value (Wald)      low/medium BMRKR2 #> 6 0.9859367 1.062761       0.95 0.2224475 p-value (Wald)      low/medium BMRKR2 #> 7 0.9538978 1.050625       0.95 0.9646086 p-value (Wald) low/medium/high BMRKR2 #> 8 0.9871004 1.034742       0.95 0.3787395 p-value (Wald) low/medium/high BMRKR2 #>                      var_label row_type #> 1                 All Patients  content #> 2                 All Patients  content #> 3 Continuous Level Biomarker 2 analysis #> 4 Continuous Level Biomarker 2 analysis #> 5 Continuous Level Biomarker 2 analysis #> 6 Continuous Level Biomarker 2 analysis #> 7 Continuous Level Biomarker 2 analysis #> 8 Continuous Level Biomarker 2 analysis"},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_survival_subgroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares Survival Data for Population Subgroups in Data Frames ‚Äî extract_survival_subgroups","title":"Prepares Survival Data for Population Subgroups in Data Frames ‚Äî extract_survival_subgroups","text":"Prepares estimates median survival times treatment hazard ratios population subgroups data frames. Simple wrapper h_survtime_subgroups_df() h_coxph_subgroups_df(). Result list two data frames: survtime hr. variables corresponds names variables found data, passed named list requires elements tte, is_event, arm optionally subgroups strat. groups_lists optionally specifies groupings subgroups variables.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_survival_subgroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares Survival Data for Population Subgroups in Data Frames ‚Äî extract_survival_subgroups","text":"","code":"extract_survival_subgroups(   variables,   data,   groups_lists = list(),   control = control_coxph(),   label_all = \"All Patients\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_survival_subgroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares Survival Data for Population Subgroups in Data Frames ‚Äî extract_survival_subgroups","text":"variables (named list string) list additional analysis variables. data (data.frame) dataset containing variables summarize. groups_lists (named list list) optionally contains subgroups variable list, specifies new group levels via names levels belong character vectors elements list. control (list) parameters comparison details, specified using helper function control_coxph(). possible parameter options : pval_method (string) p-value method testing hazard ratio = 1. Default method \"log-rank\" comes survival::survdiff(), can also set \"wald\" \"likelihood\" (survival::coxph()). ties (string) specifying method tie handling. Default \"efron\", can also set \"breslow\" \"exact\". See survival::coxph() conf_level (proportion) confidence level interval HR. label_all (string) label total population analysis.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/extract_survival_subgroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares Survival Data for Population Subgroups in Data Frames ‚Äî extract_survival_subgroups","text":"","code":"library(dplyr) library(forcats)  adtte <- tern_ex_adtte adtte_labels <- formatters::var_labels(adtte)  adtte_f <- adtte %>%   filter(     PARAMCD == \"OS\",     ARM %in% c(\"B: Placebo\", \"A: Drug X\"),     SEX %in% c(\"M\", \"F\")   ) %>%   mutate(     # Reorder levels of ARM to display reference arm before treatment arm.     ARM = droplevels(fct_relevel(ARM, \"B: Placebo\")),     SEX = droplevels(SEX),     AVALU = as.character(AVALU),     is_event = CNSR == 0   ) labels <- c(   \"ARM\" = adtte_labels[[\"ARM\"]],   \"SEX\" = adtte_labels[[\"SEX\"]],   \"AVALU\" = adtte_labels[[\"AVALU\"]],   \"is_event\" = \"Event Flag\" ) formatters::var_labels(adtte_f)[names(labels)] <- labels  df <- extract_survival_subgroups(   variables = list(     tte = \"AVAL\",     is_event = \"is_event\",     arm = \"ARM\", subgroups = c(\"SEX\", \"BMRKR2\")   ),   data = adtte_f ) df #> $survtime #>           arm  n n_events    median     subgroup    var #> 1  B: Placebo 73       57  727.8043 All Patients    ALL #> 2   A: Drug X 69       44  974.6402 All Patients    ALL #> 3  B: Placebo 40       31  599.1772            F    SEX #> 4   A: Drug X 38       24 1016.2982            F    SEX #> 5  B: Placebo 33       26  888.4916            M    SEX #> 6   A: Drug X 31       20  974.6402            M    SEX #> 7  B: Placebo 24       21  735.4722          LOW BMRKR2 #> 8   A: Drug X 26       15  974.6402          LOW BMRKR2 #> 9  B: Placebo 23       14  731.8352       MEDIUM BMRKR2 #> 10  A: Drug X 26       17  964.2197       MEDIUM BMRKR2 #> 11 B: Placebo 26       22  654.8245         HIGH BMRKR2 #> 12  A: Drug X 17       12 1016.2982         HIGH BMRKR2 #>                       var_label row_type #> 1                  All Patients  content #> 2                  All Patients  content #> 3                           Sex analysis #> 4                           Sex analysis #> 5                           Sex analysis #> 6                           Sex analysis #> 7  Continuous Level Biomarker 2 analysis #> 8  Continuous Level Biomarker 2 analysis #> 9  Continuous Level Biomarker 2 analysis #> 10 Continuous Level Biomarker 2 analysis #> 11 Continuous Level Biomarker 2 analysis #> 12 Continuous Level Biomarker 2 analysis #>  #> $hr #>   arm n_tot n_tot_events        hr       lcl       ucl conf_level       pval #> 1       142          101 0.7108557 0.4779138 1.0573368       0.95 0.09049511 #> 2        78           55 0.5595391 0.3246658 0.9643271       0.95 0.03411759 #> 3        64           46 0.9102874 0.5032732 1.6464678       0.95 0.75582028 #> 4        50           36 0.7617717 0.3854349 1.5055617       0.95 0.43236030 #> 5        49           31 0.7651261 0.3641277 1.6077269       0.95 0.47860004 #> 6        43           34 0.6662356 0.3257413 1.3626456       0.95 0.26285846 #>           pval_label     subgroup    var                    var_label row_type #> 1 p-value (log-rank) All Patients    ALL                 All Patients  content #> 2 p-value (log-rank)            F    SEX                          Sex analysis #> 3 p-value (log-rank)            M    SEX                          Sex analysis #> 4 p-value (log-rank)          LOW BMRKR2 Continuous Level Biomarker 2 analysis #> 5 p-value (log-rank)       MEDIUM BMRKR2 Continuous Level Biomarker 2 analysis #> 6 p-value (log-rank)         HIGH BMRKR2 Continuous Level Biomarker 2 analysis #>   df_grouped <- extract_survival_subgroups(   variables = list(     tte = \"AVAL\",     is_event = \"is_event\",     arm = \"ARM\", subgroups = c(\"SEX\", \"BMRKR2\")   ),   data = adtte_f,   groups_lists = list(     BMRKR2 = list(       \"low\" = \"LOW\",       \"low/medium\" = c(\"LOW\", \"MEDIUM\"),       \"low/medium/high\" = c(\"LOW\", \"MEDIUM\", \"HIGH\")     )   ) ) df_grouped #> $survtime #>           arm  n n_events    median        subgroup    var #> 1  B: Placebo 73       57  727.8043    All Patients    ALL #> 2   A: Drug X 69       44  974.6402    All Patients    ALL #> 3  B: Placebo 40       31  599.1772               F    SEX #> 4   A: Drug X 38       24 1016.2982               F    SEX #> 5  B: Placebo 33       26  888.4916               M    SEX #> 6   A: Drug X 31       20  974.6402               M    SEX #> 7  B: Placebo 24       21  735.4722             low BMRKR2 #> 8   A: Drug X 26       15  974.6402             low BMRKR2 #> 9  B: Placebo 47       35  735.4722      low/medium BMRKR2 #> 10  A: Drug X 52       32  964.2197      low/medium BMRKR2 #> 11 B: Placebo 73       57  727.8043 low/medium/high BMRKR2 #> 12  A: Drug X 69       44  974.6402 low/medium/high BMRKR2 #>                       var_label row_type #> 1                  All Patients  content #> 2                  All Patients  content #> 3                           Sex analysis #> 4                           Sex analysis #> 5                           Sex analysis #> 6                           Sex analysis #> 7  Continuous Level Biomarker 2 analysis #> 8  Continuous Level Biomarker 2 analysis #> 9  Continuous Level Biomarker 2 analysis #> 10 Continuous Level Biomarker 2 analysis #> 11 Continuous Level Biomarker 2 analysis #> 12 Continuous Level Biomarker 2 analysis #>  #> $hr #>   arm n_tot n_tot_events        hr       lcl       ucl conf_level       pval #> 1       142          101 0.7108557 0.4779138 1.0573368       0.95 0.09049511 #> 2        78           55 0.5595391 0.3246658 0.9643271       0.95 0.03411759 #> 3        64           46 0.9102874 0.5032732 1.6464678       0.95 0.75582028 #> 4        50           36 0.7617717 0.3854349 1.5055617       0.95 0.43236030 #> 5        99           67 0.7472958 0.4600419 1.2139136       0.95 0.23764314 #> 6       142          101 0.7108557 0.4779138 1.0573368       0.95 0.09049511 #>           pval_label        subgroup    var                    var_label #> 1 p-value (log-rank)    All Patients    ALL                 All Patients #> 2 p-value (log-rank)               F    SEX                          Sex #> 3 p-value (log-rank)               M    SEX                          Sex #> 4 p-value (log-rank)             low BMRKR2 Continuous Level Biomarker 2 #> 5 p-value (log-rank)      low/medium BMRKR2 Continuous Level Biomarker 2 #> 6 p-value (log-rank) low/medium/high BMRKR2 Continuous Level Biomarker 2 #>   row_type #> 1  content #> 2 analysis #> 3 analysis #> 4 analysis #> 5 analysis #> 6 analysis #>"},{"path":"https://insightsengineering.github.io/tern/main/reference/extreme_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting Extreme Values ‚Äî extreme_format","title":"Formatting Extreme Values ‚Äî extreme_format","text":"Rtables Formatting Functions handle extreme values.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/extreme_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting Extreme Values ‚Äî extreme_format","text":"","code":"h_get_format_threshold(digits = 2L)  h_format_threshold(x, digits = 2L)"},{"path":"https://insightsengineering.github.io/tern/main/reference/extreme_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting Extreme Values ‚Äî extreme_format","text":"digits (integer) number decimal places display. x (number) value format.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/extreme_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Formatting Extreme Values ‚Äî extreme_format","text":"input, apply format specified number digits. value threshold, returns \"<0.01\" e.g. number digits 2. value threshold, returns \">999.99\" e.g. number digits 2. zero, returns \"0.00\".","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/extreme_format.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Formatting Extreme Values ‚Äî extreme_format","text":"h_get_format_threshold(): Internal helper function calculate threshold create formatted strings used Formatting Functions. Returns list elements threshold format_string. h_format_threshold(): Internal helper function apply threshold format value. Creates formatted string used Formatting Functions.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/extreme_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting Extreme Values ‚Äî extreme_format","text":"","code":"h_get_format_threshold(2L) #> $threshold #>    low   high  #>   0.01 999.99  #>  #> $format_string #>       low      high  #>   \"<0.01\" \">999.99\"  #>   h_format_threshold(0.001) #> [1] \"<0.01\" h_format_threshold(1000) #> [1] \">999.99\""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/f_conf_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to create label for confidence interval ‚Äî f_conf_level","text":"","code":"f_conf_level(conf_level)"},{"path":"https://insightsengineering.github.io/tern/main/reference/f_conf_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to create label for confidence interval ‚Äî f_conf_level","text":"conf_level (proportion) confidence level interval.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/f_conf_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to create label for confidence interval ‚Äî f_conf_level","text":"string","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/f_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to create label for p-value ‚Äî f_pval","text":"","code":"f_pval(test_mean)"},{"path":"https://insightsengineering.github.io/tern/main/reference/f_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to create label for p-value ‚Äî f_pval","text":"test_mean (number) mean value test null hypothesis.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/f_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to create label for p-value ‚Äî f_pval","text":"string","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_collapse_only.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapsing of Factor Levels and Keeping Only Those New Group Levels ‚Äî fct_collapse_only","title":"Collapsing of Factor Levels and Keeping Only Those New Group Levels ‚Äî fct_collapse_only","text":"collapses levels keeps new group levels, order provided. returned factor levels order given, possible missing level last (included missings). Note existing NA input vector replaced missing level. needed explicit_na() can called separately result.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_collapse_only.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapsing of Factor Levels and Keeping Only Those New Group Levels ‚Äî fct_collapse_only","text":"","code":"fct_collapse_only(.f, ..., .na_level = \"<Missing>\")"},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_collapse_only.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapsing of Factor Levels and Keeping Only Those New Group Levels ‚Äî fct_collapse_only","text":".f (factor character) original vector. ... (named character vectors) levels vector provided collapsed new level given respective name. .na_level (string) level use levels, missing new factor. Note level must contained new levels specified ....","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_collapse_only.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapsing of Factor Levels and Keeping Only Those New Group Levels ‚Äî fct_collapse_only","text":"modified factor collapsed levels. Values levels included given character vectors input set missing level.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_collapse_only.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapsing of Factor Levels and Keeping Only Those New Group Levels ‚Äî fct_collapse_only","text":"","code":"fct_collapse_only(factor(c(\"a\", \"b\", \"c\", \"d\")), TRT = \"b\", CTRL = c(\"c\", \"d\")) #> [1] <Missing> TRT       CTRL      CTRL      #> Levels: TRT CTRL <Missing>"},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_discard.html","id":null,"dir":"Reference","previous_headings":"","what":"Discard Certain Levels from a Factor ‚Äî fct_discard","title":"Discard Certain Levels from a Factor ‚Äî fct_discard","text":"discards observations well levels specified factor.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_discard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discard Certain Levels from a Factor ‚Äî fct_discard","text":"","code":"fct_discard(x, discard)"},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_discard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discard Certain Levels from a Factor ‚Äî fct_discard","text":"x (factor) original factor. discard (character) levels discard.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_discard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discard Certain Levels from a Factor ‚Äî fct_discard","text":"modified factor observations well levels discard dropped.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_discard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discard Certain Levels from a Factor ‚Äî fct_discard","text":"","code":"fct_discard(factor(c(\"a\", \"b\", \"c\")), \"c\") #> [1] a b #> Levels: a b"},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_explicit_na_if.html","id":null,"dir":"Reference","previous_headings":"","what":"Insertion of Explicit Missings in a Factor ‚Äî fct_explicit_na_if","title":"Insertion of Explicit Missings in a Factor ‚Äî fct_explicit_na_if","text":"inserts explicit missings factor based condition. Note also additional existing NA values explicitly converted given na_level.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_explicit_na_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insertion of Explicit Missings in a Factor ‚Äî fct_explicit_na_if","text":"","code":"fct_explicit_na_if(x, condition, na_level = \"<Missing>\")"},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_explicit_na_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insertion of Explicit Missings in a Factor ‚Äî fct_explicit_na_if","text":"x (factor) original factor. condition (logical) insert missings. na_level (string) level use missings.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_explicit_na_if.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insertion of Explicit Missings in a Factor ‚Äî fct_explicit_na_if","text":"modified factor inserted existing NA converted na_level.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/fct_explicit_na_if.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insertion of Explicit Missings in a Factor ‚Äî fct_explicit_na_if","text":"","code":"fct_explicit_na_if(factor(c(\"a\", \"b\", NA)), c(TRUE, FALSE, FALSE)) #> [1] <Missing> b         <Missing> #> Levels: a b <Missing>"},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_coxreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits for Cox Proportional Hazards Regression ‚Äî fit_coxreg","title":"Fits for Cox Proportional Hazards Regression ‚Äî fit_coxreg","text":"Fitting functions univariate multivariate Cox regression models.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_coxreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits for Cox Proportional Hazards Regression ‚Äî fit_coxreg","text":"","code":"fit_coxreg_univar(variables, data, at = list(), control = control_coxreg())  fit_coxreg_multivar(variables, data, control = control_coxreg())"},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_coxreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits for Cox Proportional Hazards Regression ‚Äî fit_coxreg","text":"variables (list) named list corresponds names variables found data, passed named list corresponding time, event, arm, strata, covariates terms. arm missing variables, Cox model(s) including covariates fitted corresponding effect estimates tabulated later. data (data.frame) dataset containing variables fit models. (list numeric) candidate covariate numeric, use specify value covariate effect estimated. control (list) list parameters returned helper function control_coxreg().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_coxreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits for Cox Proportional Hazards Regression ‚Äî fit_coxreg","text":"function fit_coxreg_univar returns coxreg.univar class object named list 5 elements: mod Cox regression models fitted survival::coxph(). data original data frame input. control original control input. vars variables used model. Value covariate effect estimated. function fit_coxreg_multivar returns coxreg.multivar class object named list 4 elements: mod Cox regression model fitted survival::coxph(). data original data frame input. control original control input. vars variables used model.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_coxreg.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Fits for Cox Proportional Hazards Regression ‚Äî fit_coxreg","text":"fit_coxreg_univar(): Fit series univariate Cox regression models given inputs. fit_coxreg_multivar(): Fit multi-variable Cox regression model.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_coxreg.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fits for Cox Proportional Hazards Regression ‚Äî fit_coxreg","text":"using fit_coxreg_univar two study arms.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_coxreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits for Cox Proportional Hazards Regression ‚Äî fit_coxreg","text":"","code":"library(survival)  set.seed(1, kind = \"Mersenne-Twister\")  # Testing dataset [survival::bladder]. dta_bladder <- with(   data = bladder[bladder$enum < 5, ],   data.frame(     time = stop,     status = event,     armcd = as.factor(rx),     covar1 = as.factor(enum),     covar2 = factor(       sample(as.factor(enum)),       levels = 1:4, labels = c(\"F\", \"F\", \"M\", \"M\")     )   ) ) labels <- c(\"armcd\" = \"ARM\", \"covar1\" = \"A Covariate Label\", \"covar2\" = \"Sex (F/M)\") formatters::var_labels(dta_bladder)[names(labels)] <- labels dta_bladder$age <- sample(20:60, size = nrow(dta_bladder), replace = TRUE)  plot(   survfit(Surv(time, status) ~ armcd + covar1, data = dta_bladder),   lty = 2:4,   xlab = \"Months\",   col = c(\"blue1\", \"blue2\", \"blue3\", \"blue4\", \"red1\", \"red2\", \"red3\", \"red4\") )   # fit_coxreg_univar  ## Cox regression: arm + 1 covariate. mod1 <- fit_coxreg_univar(   variables = list(     time = \"time\", event = \"status\", arm = \"armcd\",     covariates = \"covar1\"   ),   data = dta_bladder,   control = control_coxreg(conf_level = 0.91) )  ## Cox regression: arm + 1 covariate + interaction, 2 candidate covariates. mod2 <- fit_coxreg_univar(   variables = list(     time = \"time\", event = \"status\", arm = \"armcd\",     covariates = c(\"covar1\", \"covar2\")   ),   data = dta_bladder,   control = control_coxreg(conf_level = 0.91, interaction = TRUE) )  ## Cox regression: arm + 1 covariate, stratified analysis. mod3 <- fit_coxreg_univar(   variables = list(     time = \"time\", event = \"status\", arm = \"armcd\", strata = \"covar2\",     covariates = c(\"covar1\")   ),   data = dta_bladder,   control = control_coxreg(conf_level = 0.91) )  ## Cox regression: no arm, only covariates. mod4 <- fit_coxreg_univar(   variables = list(     time = \"time\", event = \"status\",     covariates = c(\"covar1\", \"covar2\")   ),   data = dta_bladder )  # fit_coxreg_multivar  ## Cox regression: multivariate Cox regression. multivar_model <- fit_coxreg_multivar(   variables = list(     time = \"time\", event = \"status\", arm = \"armcd\",     covariates = c(\"covar1\", \"covar2\")   ),   data = dta_bladder )  # Example without treatment arm. multivar_covs_model <- fit_coxreg_multivar(   variables = list(     time = \"time\", event = \"status\",     covariates = c(\"covar1\", \"covar2\")   ),   data = dta_bladder )"},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit for Logistic Regression ‚Äî fit_logistic","title":"Fit for Logistic Regression ‚Äî fit_logistic","text":"Fit (conditional) logistic regression model.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit for Logistic Regression ‚Äî fit_logistic","text":"","code":"fit_logistic(   data,   variables = list(response = \"Response\", arm = \"ARMCD\", covariates = NULL, interaction =     NULL, strata = NULL),   response_definition = \"response\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit for Logistic Regression ‚Äî fit_logistic","text":"data (data.frame) data frame model fit. variables (named list string) list additional analysis variables. response_definition (string) definition event terms response. used fitting (conditional) logistic regression model left hand side formula.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_logistic.html","id":"model-specification","dir":"Reference","previous_headings":"","what":"Model Specification","title":"Fit for Logistic Regression ‚Äî fit_logistic","text":"variables list needs include following elements: arm treatment arm variable name. response response arm variable name. Usually 0/1 variable. covariates either NULL (covariates) character vector covariate variable names. interaction either NULL (interaction) string single covariate variable name already included covariates. interaction treatment arm included model.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_logistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit for Logistic Regression ‚Äî fit_logistic","text":"","code":"library(dplyr)  adrs_f <- tern_ex_adrs %>%   filter(PARAMCD == \"BESRSPI\") %>%   filter(RACE %in% c(\"ASIAN\", \"WHITE\", \"BLACK OR AFRICAN AMERICAN\")) %>%   mutate(     Response = case_when(AVALC %in% c(\"PR\", \"CR\") ~ 1, TRUE ~ 0),     RACE = factor(RACE),     SEX = factor(SEX)   ) formatters::var_labels(adrs_f) <- c(formatters::var_labels(tern_ex_adrs), Response = \"Response\") mod1 <- fit_logistic(   data = adrs_f,   variables = list(     response = \"Response\",     arm = \"ARMCD\",     covariates = c(\"AGE\", \"RACE\")   ) ) #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred mod2 <- fit_logistic(   data = adrs_f,   variables = list(     response = \"Response\",     arm = \"ARMCD\",     covariates = c(\"AGE\", \"RACE\"),     interaction = \"AGE\"   ) ) #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred"},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_rsp_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Subgroup Treatment Effect Pattern (STEP) Fit for Binary (Response) Outcome ‚Äî fit_rsp_step","title":"Subgroup Treatment Effect Pattern (STEP) Fit for Binary (Response) Outcome ‚Äî fit_rsp_step","text":"fits Subgroup Treatment Effect Pattern logistic regression models binary (response) outcome. treatment arm variable must exactly 2 levels, first one taken reference estimated odds ratios comparison second level vs. first one. (conditional) logistic regression model fit : response ~ arm * poly(biomarker, degree) + covariates + strata(strata) degree specified control_step(). Note default degree 0 biomarker variable included model.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_rsp_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subgroup Treatment Effect Pattern (STEP) Fit for Binary (Response) Outcome ‚Äî fit_rsp_step","text":"","code":"fit_rsp_step(variables, data, control = c(control_step(), control_logistic()))"},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_rsp_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subgroup Treatment Effect Pattern (STEP) Fit for Binary (Response) Outcome ‚Äî fit_rsp_step","text":"variables (named list character) list analysis variables: needs response, arm, biomarker, optional covariates strata. data (data.frame) dataset containing variables summarize. control (named list) combined control list control_step() control_logistic().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_rsp_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subgroup Treatment Effect Pattern (STEP) Fit for Binary (Response) Outcome ‚Äî fit_rsp_step","text":"matrix class step. first part columns describe subgroup intervals used biomarker variable, including center intervals bounds. second part columns contain estimates treatment arm comparison.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_rsp_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subgroup Treatment Effect Pattern (STEP) Fit for Binary (Response) Outcome ‚Äî fit_rsp_step","text":"","code":"# Testing dataset with just two treatment arms. library(survival) library(dplyr)  adrs_f <- tern_ex_adrs %>%   filter(     PARAMCD == \"BESRSPI\",     ARM %in% c(\"B: Placebo\", \"A: Drug X\")   ) %>%   mutate(     # Reorder levels of ARM to have Placebo as reference arm for Odds Ratio calculations.     ARM = droplevels(forcats::fct_relevel(ARM, \"B: Placebo\")),     RSP = case_when(AVALC %in% c(\"PR\", \"CR\") ~ 1, TRUE ~ 0),     SEX = factor(SEX)   )  variables <- list(   arm = \"ARM\",   biomarker = \"BMRKR1\",   covariates = \"AGE\",   response = \"RSP\" )  # Fit default STEP models: Here a constant treatment effect is estimated in each subgroup. # We use a large enough bandwidth to avoid too small subgroups and linear separation in those. step_matrix <- fit_rsp_step(   variables = variables,   data = adrs_f,   control = c(control_logistic(), control_step(bandwidth = 0.5)) ) #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings dim(step_matrix) #> [1] 39 11 head(step_matrix) #>      Percentile Center Percentile Lower Percentile Upper Interval Center #> [1,]             0.025                0            0.525        1.472755 #> [2,]             0.050                0            0.550        2.028546 #> [3,]             0.075                0            0.575        2.204086 #> [4,]             0.100                0            0.600        2.799776 #> [5,]             0.125                0            0.625        2.969998 #> [6,]             0.150                0            0.650        3.149068 #>      Interval Lower Interval Upper  n    logor       se   ci_lower ci_upper #> [1,]      0.4459546       6.057928 75 1.230538 1.185904 -1.0937914 3.554868 #> [2,]      0.4459546       6.371236 78 1.244538 1.183795 -1.0756577 3.564734 #> [3,]      0.4459546       6.701030 82 1.302066 1.182851 -1.0162794 3.620411 #> [4,]      0.4459546       6.886642 85 1.361186 1.182169 -0.9558222 3.678194 #> [5,]      0.4459546       7.026219 89 1.231372 1.179518 -1.0804407 3.543184 #> [6,]      0.4459546       7.144031 92 1.242238 1.180350 -1.0712045 3.555681  # Specify different polynomial degree for the biomarker interaction to use more flexible local # models. Or specify different logistic regression options, including confidence level. step_matrix2 <- fit_rsp_step(   variables = variables,   data = adrs_f,   control = c(control_logistic(conf_level = 0.9), control_step(bandwidth = 0.6, degree = 1)) ) #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings  # Use a global constant model. This is helpful as a reference for the subgroup models. step_matrix3 <- fit_rsp_step(   variables = variables,   data = adrs_f,   control = c(control_logistic(), control_step(bandwidth = NULL, num_points = 2L)) )  # It is also possible to use strata, i.e. use conditional logistic regression models. variables2 <- list(   arm = \"ARM\",   biomarker = \"BMRKR1\",   covariates = \"AGE\",   response = \"RSP\",   strata = c(\"STRATA1\", \"STRATA2\") )  step_matrix4 <- fit_rsp_step(   variables = variables2,   data = adrs_f,   control = c(control_logistic(), control_step(bandwidth = 0.6)) ) #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings #> Warning: Fit warnings occurred, please consider using a simpler model, or larger `bandwidth`, less `num_points` in `control_step()` settings"},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_survival_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Subgroup Treatment Effect Pattern (STEP) Fit for Survival Outcome ‚Äî fit_survival_step","title":"Subgroup Treatment Effect Pattern (STEP) Fit for Survival Outcome ‚Äî fit_survival_step","text":"fits Subgroup Treatment Effect Pattern models survival outcome. treatment arm variable must exactly 2 levels, first one taken reference estimated hazard ratios comparison second level vs. first one. model fit : Surv(time, event) ~ arm * poly(biomarker, degree) + covariates + strata(strata) degree specified control_step(). Note default degree 0 biomarker variable included model.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_survival_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subgroup Treatment Effect Pattern (STEP) Fit for Survival Outcome ‚Äî fit_survival_step","text":"","code":"fit_survival_step(   variables,   data,   control = c(control_step(), control_coxph()) )"},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_survival_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subgroup Treatment Effect Pattern (STEP) Fit for Survival Outcome ‚Äî fit_survival_step","text":"variables (named list character) list analysis variables: needs time, event, arm, biomarker, optional covariates strata. data (data.frame) dataset containing variables summarize. control (named list) combined control list control_step() control_coxph().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_survival_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subgroup Treatment Effect Pattern (STEP) Fit for Survival Outcome ‚Äî fit_survival_step","text":"matrix class step. first part columns describe subgroup intervals used biomarker variable, including center intervals bounds. second part columns contain estimates treatment arm comparison.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/fit_survival_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subgroup Treatment Effect Pattern (STEP) Fit for Survival Outcome ‚Äî fit_survival_step","text":"","code":"# Testing dataset with just two treatment arms. library(dplyr)  adtte_f <- tern_ex_adtte %>%   filter(     PARAMCD == \"OS\",     ARM %in% c(\"B: Placebo\", \"A: Drug X\")   ) %>%   mutate(     # Reorder levels of ARM to display reference arm before treatment arm.     ARM = droplevels(forcats::fct_relevel(ARM, \"B: Placebo\")),     is_event = CNSR == 0   ) labels <- c(\"ARM\" = \"Treatment Arm\", \"is_event\" = \"Event Flag\") formatters::var_labels(adtte_f)[names(labels)] <- labels  variables <- list(   arm = \"ARM\",   biomarker = \"BMRKR1\",   covariates = c(\"AGE\", \"BMRKR2\"),   event = \"is_event\",   time = \"AVAL\" )  # Fit default STEP models: Here a constant treatment effect is estimated in each subgroup. step_matrix <- fit_survival_step(   variables = variables,   data = adtte_f ) dim(step_matrix) #> [1] 39 12 head(step_matrix) #>      Percentile Center Percentile Lower Percentile Upper Interval Center #> [1,]             0.025                0            0.275        1.472755 #> [2,]             0.050                0            0.300        2.028546 #> [3,]             0.075                0            0.325        2.204086 #> [4,]             0.100                0            0.350        2.799776 #> [5,]             0.125                0            0.375        2.969998 #> [6,]             0.150                0            0.400        3.149068 #>      Interval Lower Interval Upper  n events      loghr        se   ci_lower #> [1,]      0.4459546       4.182444 39     29 0.03729601 0.4243013 -0.7943192 #> [2,]      0.4459546       4.349471 43     31 0.23246622 0.3881347 -0.5282639 #> [3,]      0.4459546       4.626913 46     32 0.07952492 0.3813113 -0.6678314 #> [4,]      0.4459546       4.805767 50     35 0.09020455 0.3638368 -0.6229026 #> [5,]      0.4459546       4.929816 53     37 0.15522702 0.3477999 -0.5264483 #> [6,]      0.4459546       5.020539 57     41 0.11135760 0.3332843 -0.5418676 #>       ci_upper #> [1,] 0.8689112 #> [2,] 0.9931963 #> [3,] 0.8268813 #> [4,] 0.8033117 #> [5,] 0.8369023 #> [6,] 0.7645828  # Specify different polynomial degree for the biomarker interaction to use more flexible local # models. Or specify different Cox regression options. step_matrix2 <- fit_survival_step(   variables = variables,   data = adtte_f,   control = c(control_coxph(conf_level = 0.9), control_step(degree = 2)) )  # Use a global model with cubic interaction and only 5 points. step_matrix3 <- fit_survival_step(   variables = variables,   data = adtte_f,   control = c(control_coxph(), control_step(bandwidth = NULL, degree = 3, num_points = 5L)) )"},{"path":"https://insightsengineering.github.io/tern/main/reference/forest_viewport.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Viewport Tree for the Forest Plot ‚Äî forest_viewport","title":"Create a Viewport Tree for the Forest Plot ‚Äî forest_viewport","text":"Create Viewport Tree Forest Plot","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/forest_viewport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Viewport Tree for the Forest Plot ‚Äî forest_viewport","text":"","code":"forest_viewport(   tbl,   width_row_names = NULL,   width_columns = NULL,   width_forest = grid::unit(1, \"null\"),   gap_column = grid::unit(1, \"lines\"),   gap_header = grid::unit(1, \"lines\"),   mat_form = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/forest_viewport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Viewport Tree for the Forest Plot ‚Äî forest_viewport","text":"","code":"library(grid)  tbl <- rtable(   header = rheader(     rrow(\"\", \"E\", rcell(\"CI\", colspan = 2)),     rrow(\"\", \"A\", \"B\", \"C\")   ),   rrow(\"row 1\", 1, 0.8, 1.1),   rrow(\"row 2\", 1.4, 0.8, 1.6),   rrow(\"row 3\", 1.2, 0.8, 1.2) )  # Internal function - forest_viewport if (FALSE) { v <- forest_viewport(tbl)  grid::grid.newpage() showViewport(v) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/format_count_fraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting Count and Fraction ‚Äî format_count_fraction","title":"Formatting Count and Fraction ‚Äî format_count_fraction","text":"Formats count together fraction special consideration count 0.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_count_fraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting Count and Fraction ‚Äî format_count_fraction","text":"","code":"format_count_fraction(x, ...)"},{"path":"https://insightsengineering.github.io/tern/main/reference/format_count_fraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting Count and Fraction ‚Äî format_count_fraction","text":"x (integer) vector length 2, count fraction. ... required rtables interface.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_count_fraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatting Count and Fraction ‚Äî format_count_fraction","text":"string format count (fraction %). count 0 format 0.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/format_count_fraction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting Count and Fraction ‚Äî format_count_fraction","text":"","code":"format_count_fraction(x = c(2, 0.6667)) #> [1] \"2 (66.7%)\" format_count_fraction(x = c(0, 0)) #> [1] \"0\""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_count_fraction_fixed_dp.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting Count and Percentage with Fixed Single Decimal Place ‚Äî format_count_fraction_fixed_dp","title":"Formatting Count and Percentage with Fixed Single Decimal Place ‚Äî format_count_fraction_fixed_dp","text":"Formats count together fraction special consideration count 0.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_count_fraction_fixed_dp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting Count and Percentage with Fixed Single Decimal Place ‚Äî format_count_fraction_fixed_dp","text":"","code":"format_count_fraction_fixed_dp(x, ...)"},{"path":"https://insightsengineering.github.io/tern/main/reference/format_count_fraction_fixed_dp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting Count and Percentage with Fixed Single Decimal Place ‚Äî format_count_fraction_fixed_dp","text":"x (integer) vector length 2, count fraction. ... required rtables interface.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_count_fraction_fixed_dp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatting Count and Percentage with Fixed Single Decimal Place ‚Äî format_count_fraction_fixed_dp","text":"string format count (fraction %). count 0 format 0.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/format_count_fraction_fixed_dp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting Count and Percentage with Fixed Single Decimal Place ‚Äî format_count_fraction_fixed_dp","text":"","code":"format_count_fraction_fixed_dp(x = c(2, 0.6667)) #> [1] \"2 (66.7%)\" format_count_fraction_fixed_dp(x = c(2, 0.5)) #> [1] \"2 (50.0%)\" format_count_fraction_fixed_dp(x = c(0, 0)) #> [1] \"0\""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_extreme_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting a Single Extreme Value ‚Äî format_extreme_values","title":"Formatting a Single Extreme Value ‚Äî format_extreme_values","text":"Create Formatting Function single extreme value.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_extreme_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting a Single Extreme Value ‚Äî format_extreme_values","text":"","code":"format_extreme_values(digits = 2L)"},{"path":"https://insightsengineering.github.io/tern/main/reference/format_extreme_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting a Single Extreme Value ‚Äî format_extreme_values","text":"digits (integer) number decimal places display.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/format_extreme_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting a Single Extreme Value ‚Äî format_extreme_values","text":"","code":"format_fun <- format_extreme_values(2L) format_fun(x = 0.127) #> [1] \"0.13\" format_fun(x = Inf) #> [1] \">999.99\" format_fun(x = 0) #> [1] \"0.00\" format_fun(x = 0.009) #> [1] \"<0.01\""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_extreme_values_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting Extreme Values Part of a Confidence Interval ‚Äî format_extreme_values_ci","title":"Formatting Extreme Values Part of a Confidence Interval ‚Äî format_extreme_values_ci","text":"Formatting Function extreme values part confidence interval. Values formatted e.g. \"(xx.xx, xx.xx)\" number digits 2.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_extreme_values_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting Extreme Values Part of a Confidence Interval ‚Äî format_extreme_values_ci","text":"","code":"format_extreme_values_ci(digits = 2L)"},{"path":"https://insightsengineering.github.io/tern/main/reference/format_extreme_values_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting Extreme Values Part of a Confidence Interval ‚Äî format_extreme_values_ci","text":"digits (integer) number decimal places display.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/format_extreme_values_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting Extreme Values Part of a Confidence Interval ‚Äî format_extreme_values_ci","text":"","code":"format_fun <- format_extreme_values_ci(2L) format_fun(x = c(0.127, Inf)) #> [1] \"(0.13, >999.99)\" format_fun(x = c(0, 0.009)) #> [1] \"(0.00, <0.01)\""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting Fraction and Percentage ‚Äî format_fraction","title":"Formatting Fraction and Percentage ‚Äî format_fraction","text":"Formats fraction together ratio percent.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting Fraction and Percentage ‚Äî format_fraction","text":"","code":"format_fraction(x, ...)"},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting Fraction and Percentage ‚Äî format_fraction","text":"x (integer) elements num denom. ... required rtables interface.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatting Fraction and Percentage ‚Äî format_fraction","text":"string format num / denom (ratio %). num 0 format num / denom.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting Fraction and Percentage ‚Äî format_fraction","text":"","code":"format_fraction(x = c(num = 2L, denom = 3L)) #> [1] \"2/3 (66.7%)\" format_fraction(x = c(num = 0L, denom = 3L)) #> [1] \"0/3\""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction_fixed_dp.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting Fraction and Percentage with Fixed Single Decimal Place ‚Äî format_fraction_fixed_dp","title":"Formatting Fraction and Percentage with Fixed Single Decimal Place ‚Äî format_fraction_fixed_dp","text":"Formats fraction together ratio percent fixed single decimal place. Includes trailing zero case whole number percentages always keep one decimal place.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction_fixed_dp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting Fraction and Percentage with Fixed Single Decimal Place ‚Äî format_fraction_fixed_dp","text":"","code":"format_fraction_fixed_dp(x, ...)"},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction_fixed_dp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting Fraction and Percentage with Fixed Single Decimal Place ‚Äî format_fraction_fixed_dp","text":"x (integer) elements num denom. ... required rtables interface.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction_fixed_dp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatting Fraction and Percentage with Fixed Single Decimal Place ‚Äî format_fraction_fixed_dp","text":"string format num / denom (ratio %). num 0 format num / denom.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction_fixed_dp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting Fraction and Percentage with Fixed Single Decimal Place ‚Äî format_fraction_fixed_dp","text":"","code":"format_fraction_fixed_dp(x = c(num = 1L, denom = 2L)) #> [1] \"1/2 (50.0%)\" format_fraction_fixed_dp(x = c(num = 1L, denom = 4L)) #> [1] \"1/4 (25.0%)\" format_fraction_fixed_dp(x = c(num = 0L, denom = 3L)) #> [1] \"0/3\""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting Fraction with Lower Threshold ‚Äî format_fraction_threshold","title":"Formatting Fraction with Lower Threshold ‚Äî format_fraction_threshold","text":"Formats fraction second element input x fraction. applies lower threshold, just stated fraction smaller .","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting Fraction with Lower Threshold ‚Äî format_fraction_threshold","text":"","code":"format_fraction_threshold(threshold)"},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting Fraction with Lower Threshold ‚Äî format_fraction_threshold","text":"threshold (proportion) lower threshold.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatting Fraction with Lower Threshold ‚Äî format_fraction_threshold","text":"rtables Formatting Function takes numeric input x second element fraction formatted. fraction equal threshold, displayed percentage. positive threshold, returns \"<1\" e.g. threshold 0.01. zero, just \"0\" returned.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/format_fraction_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting Fraction with Lower Threshold ‚Äî format_fraction_threshold","text":"","code":"format_fun <- format_fraction_threshold(0.05) format_fun(x = c(20, 0.1)) #> [1] 10 format_fun(x = c(2, 0.01)) #> [1] \"<5\" format_fun(x = c(0, 0)) #> [1] \"0\""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_xx.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting: XX as Formatting Function ‚Äî format_xx","title":"Formatting: XX as Formatting Function ‚Äî format_xx","text":"Translate string x dots interpreted number place holders, others formatting elements.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_xx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting: XX as Formatting Function ‚Äî format_xx","text":"","code":"format_xx(str)"},{"path":"https://insightsengineering.github.io/tern/main/reference/format_xx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting: XX as Formatting Function ‚Äî format_xx","text":"str (string) template.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/format_xx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatting: XX as Formatting Function ‚Äî format_xx","text":"rtables formatting function.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/format_xx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting: XX as Formatting Function ‚Äî format_xx","text":"","code":"test <- list(c(1.658, 0.5761), c(1e1, 785.6))  z <- format_xx(\"xx (xx.x)\") sapply(test, z) #> [1] \"2 (0.6)\"    \"10 (785.6)\"  z <- format_xx(\"xx.x - xx.x\") sapply(test, z) #> [1] \"1.7 - 0.6\"  \"10 - 785.6\"  z <- format_xx(\"xx.x, incl. xx.x% NE\") sapply(test, z) #> [1] \"1.7, incl. 0.6% NE\"  \"10, incl. 785.6% NE\""},{"path":"https://insightsengineering.github.io/tern/main/reference/formatting_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional Formatting Functions ‚Äî formatting_functions","title":"Additional Formatting Functions ‚Äî formatting_functions","text":"summarizes additional Formatting Functions work rtables.","code":""},{"path":[]},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/g_forest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Forest Plot based on a Table ‚Äî g_forest","text":"","code":"g_forest(   tbl,   col_x = attr(tbl, \"col_x\"),   col_ci = attr(tbl, \"col_ci\"),   vline = 1,   forest_header = attr(tbl, \"forest_header\"),   xlim = c(0.1, 10),   logx = TRUE,   x_at = c(0.1, 1, 10),   width_row_names = NULL,   width_columns = NULL,   width_forest = grid::unit(1, \"null\"),   col_symbol_size = attr(tbl, \"col_symbol_size\"),   col = getOption(\"ggplot2.discrete.colour\")[1],   draw = TRUE,   newpage = TRUE )"},{"path":"https://insightsengineering.github.io/tern/main/reference/g_forest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Forest Plot based on a Table ‚Äî g_forest","text":"tbl (rtable) col_x (integer) column index estimator. default tries get tbl attribute col_x, otherwise needs manually specified. col_ci (integer) column index confidence intervals. default tries get tbl attribute col_ci, otherwise needs manually specified. vline (number) x coordinate vertical line, NULL line omitted. forest_header (character, length 2) text displayed left right vline, respectively. vline = NULL forest_header needs NULL . default tries get tbl attribute forest_header. xlim (numeric) limits x axis. logx (flag) show x-values logarithm scale. x_at (numeric) x-tick locations, NULL get automatically chosen. width_row_names (unit) width row names. NULL widths get automatically calculated. See grid::unit(). width_columns (unit) widths table columns. NULL widths get automatically calculated. See grid::unit(). width_forest (unit) width forest column. NULL widths get automatically calculated. See grid::unit(). col_symbol_size (integer) column index tbl containing data used determine relative size estimator plot symbol. Typically, symbol size proportional sample size used calculate estimator. NULL, symbol size used subgroups. default tries get tbl attribute col_symbol_size, otherwise needs manually specified. col (character) color(s). draw (flag) whether plot drawn. newpage (flag) whether plot drawn new page. considered draw = TRUE used.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_forest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Forest Plot based on a Table ‚Äî g_forest","text":"gtree object containing forest plot table","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_forest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Forest Plot based on a Table ‚Äî g_forest","text":"Create forest plot rtables::rtable() object column single value column 2 values.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_forest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Forest Plot based on a Table ‚Äî g_forest","text":"","code":"if (FALSE) { library(dplyr) library(forcats) library(nestcolor)  adrs <- tern_ex_adrs n_records <- 20 adrs_labels <- formatters::var_labels(adrs, fill = TRUE) adrs <- adrs %>%   filter(PARAMCD == \"BESRSPI\") %>%   filter(ARM %in% c(\"A: Drug X\", \"B: Placebo\")) %>%   slice(seq_len(n_records)) %>%   droplevels() %>%   mutate(     # Reorder levels of factor to make the placebo group the reference arm.     ARM = fct_relevel(ARM, \"B: Placebo\"),     rsp = AVALC == \"CR\"   ) formatters::var_labels(adrs) <- c(adrs_labels, \"Response\") df <- extract_rsp_subgroups(   variables = list(rsp = \"rsp\", arm = \"ARM\", subgroups = c(\"SEX\", \"STRATA2\")),   data = adrs ) # Full commonly used response table.  tbl <- basic_table() %>%   tabulate_rsp_subgroups(df) p <- g_forest(tbl)  draw_grob(p)  # Odds ratio only table.  tbl_or <- basic_table() %>%   tabulate_rsp_subgroups(df, vars = c(\"n_tot\", \"or\", \"ci\")) tbl_or p <- g_forest(   tbl_or,   forest_header = c(\"Comparison\\nBetter\", \"Treatment\\nBetter\") )  draw_grob(p)  # Survival forest plot example. adtte <- tern_ex_adtte # Save variable labels before data processing steps. adtte_labels <- formatters::var_labels(adtte, fill = TRUE) adtte_f <- adtte %>%   filter(     PARAMCD == \"OS\",     ARM %in% c(\"B: Placebo\", \"A: Drug X\"),     SEX %in% c(\"M\", \"F\")   ) %>%   mutate(     # Reorder levels of ARM to display reference arm before treatment arm.     ARM = droplevels(fct_relevel(ARM, \"B: Placebo\")),     SEX = droplevels(SEX),     AVALU = as.character(AVALU),     is_event = CNSR == 0   ) labels <- list(   \"ARM\" = adtte_labels[\"ARM\"],   \"SEX\" = adtte_labels[\"SEX\"],   \"AVALU\" = adtte_labels[\"AVALU\"],   \"is_event\" = \"Event Flag\" ) formatters::var_labels(adtte_f)[names(labels)] <- as.character(labels) df <- extract_survival_subgroups(   variables = list(     tte = \"AVAL\",     is_event = \"is_event\",     arm = \"ARM\", subgroups = c(\"SEX\", \"BMRKR2\")   ),   data = adtte_f ) table_hr <- basic_table() %>%   tabulate_survival_subgroups(df, time_unit = adtte_f$AVALU[1]) g_forest(table_hr) # Works with any `rtable`. tbl <- rtable(   header = c(\"E\", \"CI\", \"N\"),   rrow(\"\", 1, c(.8, 1.2), 200),   rrow(\"\", 1.2, c(1.1, 1.4), 50) ) g_forest(   tbl = tbl,   col_x = 1,   col_ci = 2,   xlim = c(0.5, 2),   x_at = c(0.5, 1, 2),   col_symbol_size = 3 ) tbl <- rtable(   header = rheader(     rrow(\"\", rcell(\"A\", colspan = 2)),     rrow(\"\", \"c1\", \"c2\")   ),   rrow(\"row 1\", 1, c(.8, 1.2)),   rrow(\"row 2\", 1.2, c(1.1, 1.4)) ) g_forest(   tbl = tbl,   col_x = 1,   col_ci = 2,   xlim = c(0.5, 2),   x_at = c(0.5, 1, 2),   vline = 1,   forest_header = c(\"Hello\", \"World\") ) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/g_km.html","id":null,"dir":"Reference","previous_headings":"","what":"Kaplan-Meier Plot ‚Äî g_km","title":"Kaplan-Meier Plot ‚Äî g_km","text":"survival model, graphic rendered along tabulated annotation including number patient risk given time median survival per group.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_km.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kaplan-Meier Plot ‚Äî g_km","text":"","code":"g_km(   df,   variables,   control_surv = control_surv_timepoint(),   col = NULL,   lty = NULL,   lwd = 0.5,   censor_show = TRUE,   pch = 3,   size = 2,   max_time = NULL,   xticks = NULL,   xlab = \"Days\",   yval = c(\"Survival\", \"Failure\"),   ylab = paste(yval, \"Probability\"),   title = NULL,   footnotes = NULL,   draw = TRUE,   newpage = TRUE,   gp = NULL,   vp = NULL,   name = NULL,   font_size = 12,   ci_ribbon = FALSE,   ggtheme = nestcolor::theme_nest(),   annot_at_risk = TRUE,   annot_surv_med = TRUE,   annot_coxph = FALSE,   annot_stats = NULL,   annot_stats_vlines = FALSE,   control_coxph_pw = control_coxph(),   position_coxph = c(0, 0.05),   position_surv_med = c(0.9, 0.9) )"},{"path":"https://insightsengineering.github.io/tern/main/reference/g_km.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kaplan-Meier Plot ‚Äî g_km","text":"df (data.frame) data set containing analysis variables. variables (named list) variable names. Details : tte (numeric) variable indicating time--event duration values. is_event (logical) event variable. TRUE event, FALSE time event censored. arm (factor) treatment group variable. strat (character NULL) variable names indicating stratification factors. control_surv (list) parameters comparison details, specified using helper function control_surv_timepoint. possible parameter options : conf_level (proportion) confidence level interval survival rate. conf_type (string) \"plain\" (default), \"log\", \"log-log\" confidence interval type, see survival::survfit(). Note option \"none\" longer supported. col (character) lines colors. Length vector equal number strata survival::survfit(). lty (numeric) line type. Length vector equal number strata survival::survfit(). lwd (numeric) line width. Length vector equal number strata survival::survfit(). censor_show (flag) whether show censored. pch (numeric, string) value character points symbol indicate censored cases. size (numeric) size censored point, class unit. max_time (numeric) maximum value show X axis. data values less threshold value plotted (defaults NULL). xticks (numeric, number, NULL) numeric vector ticks single number spacing ticks x axis. NULL (default), labeling::extended() used determine optimal tick position x axis. xlab (string) label x-axis. yval (string) value y-axis. Options Survival (default) Failure probability. ylab (string) label y-axis. title (string) title plot. footnotes (string) footnotes plot. draw (flag) whether plot drawn. newpage (flag) whether plot drawn new page. considered draw = TRUE used. gp \"gpar\" object, typically output     call function gpar.  basically     list graphical parameter settings. vp viewport object (NULL). name character identifier grob.  Used find     grob display list /child another grob. font_size (number) font size used. ci_ribbon (flag) draw confidence interval around Kaplan-Meier curve. ggtheme (theme) graphical theme provided ggplot2 control outlook Kaplan-Meier curve. annot_at_risk (flag) compute add annotation table reporting number patient risk matching main grid Kaplan-Meier curve. annot_surv_med (flag) compute add annotation table Kaplan-Meier curve estimating median survival time per group. annot_coxph (flag) add annotation table survival::coxph() model. annot_stats (string) statistics annotations add plot. Options median (median survival follow-time) min (minimum survival follow-time). annot_stats_vlines (flag) add vertical lines corresponding statistics specified annot_stats. annot_stats NULL lines added. control_coxph_pw (list) parameters comparison details, specified using helper function control_coxph(). possible parameter options : pval_method (string) p-value method testing hazard ratio = 1. Default method \"log-rank\", can also set \"wald\" \"likelihood\". ties (string) method tie handling. Default \"efron\", can also set \"breslow\" \"exact\". See survival::coxph() conf_level (proportion) confidence level interval HR. position_coxph (numeric) x y positions plotting survival::coxph() model. position_surv_med (numeric) x y positions plotting annotation table estimating median survival time per group.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_km.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kaplan-Meier Plot ‚Äî g_km","text":"grob class gTree.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_km.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kaplan-Meier Plot ‚Äî g_km","text":"","code":"if (FALSE) { library(dplyr) library(ggplot2) library(survival) library(grid) library(nestcolor)  df <- tern_ex_adtte %>%   filter(PARAMCD == \"OS\") %>%   mutate(is_event = CNSR == 0) variables <- list(tte = \"AVAL\", is_event = \"is_event\", arm = \"ARMCD\")  # 1. Example - basic option  res <- g_km(df = df, variables = variables) res <- g_km(df = df, variables = variables, yval = \"Failure\") res <- g_km(   df = df,   variables = variables,   control_surv = control_surv_timepoint(conf_level = 0.9),   col = c(\"grey25\", \"grey50\", \"grey75\") ) res <- g_km(df = df, variables = variables, ggtheme = theme_minimal()) res <- g_km(df = df, variables = variables, ggtheme = theme_minimal(), lty = 1:3) res <- g_km(df = df, variables = variables, max = 2000) res <- g_km(   df = df,   variables = variables,   annot_stats = c(\"min\", \"median\"),   annot_stats_vlines = TRUE )  # 2. Example - Arrange several KM curve on a single graph device  # 2.1 Use case: A general graph on the top, a zoom on the bottom. grid.newpage() lyt <- grid.layout(nrow = 2, ncol = 1) %>%   viewport(layout = .) %>%   pushViewport()  res <- g_km(   df = df, variables = variables, newpage = FALSE, annot_surv_med = FALSE,   vp = viewport(layout.pos.row = 1, layout.pos.col = 1) ) res <- g_km(   df = df, variables = variables, max = 1000, newpage = FALSE, annot_surv_med = FALSE,   ggtheme = theme_dark(),   vp = viewport(layout.pos.row = 2, layout.pos.col = 1) )  # 2.1 Use case: No annotations on top, annotated graph on bottom grid.newpage() lyt <- grid.layout(nrow = 2, ncol = 1) %>%   viewport(layout = .) %>%   pushViewport()  res <- g_km(   df = df, variables = variables, newpage = FALSE,   annot_surv_med = FALSE, annot_at_risk = FALSE,   vp = viewport(layout.pos.row = 1, layout.pos.col = 1) ) res <- g_km(   df = df, variables = variables, max = 2000, newpage = FALSE, annot_surv_med = FALSE,   annot_at_risk = TRUE,   ggtheme = theme_dark(),   vp = viewport(layout.pos.row = 2, layout.pos.col = 1) )  # Add annotation from a pairwise coxph analysis g_km(   df = df, variables = variables,   annot_coxph = TRUE )  g_km(   df = df, variables = c(variables, list(strat = \"SEX\")),   font_size = 15,   annot_coxph = TRUE,   control_coxph = control_coxph(pval_method = \"wald\", ties = \"exact\", conf_level = 0.99),   position_coxph = c(0.4, 0.5) )  # Change position of the treatment group annotation table. g_km(   df = df, variables = c(variables, list(strat = \"SEX\")),   font_size = 15,   annot_coxph = TRUE,   control_coxph = control_coxph(pval_method = \"wald\", ties = \"exact\", conf_level = 0.99),   position_surv_med = c(1, 0.7) ) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/g_lineplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Line plot with the optional table ‚Äî g_lineplot","title":"Line plot with the optional table ‚Äî g_lineplot","text":"Line plot optional table.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_lineplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Line plot with the optional table ‚Äî g_lineplot","text":"","code":"g_lineplot(   df,   alt_counts_df = NULL,   variables = control_lineplot_vars(),   mid = \"mean\",   interval = \"mean_ci\",   whiskers = c(\"mean_ci_lwr\", \"mean_ci_upr\"),   table = NULL,   sfun = tern::s_summary,   ...,   mid_type = \"pl\",   mid_point_size = 2,   position = ggplot2::position_dodge(width = 0.4),   legend_title = NULL,   legend_position = \"bottom\",   ggtheme = nestcolor::theme_nest(),   y_lab = NULL,   y_lab_add_paramcd = TRUE,   y_lab_add_unit = TRUE,   title = \"Plot of Mean and 95% Confidence Limits by Visit\",   subtitle = \"\",   subtitle_add_paramcd = TRUE,   subtitle_add_unit = TRUE,   caption = NULL,   table_format = summary_formats(),   table_labels = summary_labels(),   table_font_size = 3,   newpage = TRUE,   col = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/g_lineplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Line plot with the optional table ‚Äî g_lineplot","text":"df (data.frame) data set containing analysis variables. alt_counts_df (data.frame NULL) data set used () counts objects strata. variables (named character vector) variable names df data set. Details : x (character) name x-axis variable. y (character) name y-axis variable. strata (character) name grouping variable, .e. treatment arm. Can NA indicate lack groups. paramcd (character) name variable parameter's code. Used y-axis label plot's subtitle. Can NA paramcd added y-axis label subtitle. y_unit (character) name variable units y. Used y-axis label plot's subtitle. Can NA y unit added y-axis label subtitle. mid (character NULL) names statistics plotted midpoints. statistics indicated mid variable must present object returned sfun, double numeric type vector length one. interval (character NULL) names statistics plotted intervals. statistics indicated interval variable must present object returned sfun, double numeric type vector length two. whiskers (character) names interval whiskers plotted. Must match names attribute interval element list returned sfun. possible specify one whisker , lower upper. table (character NULL) names statistics displayed table plot. statistics indicated table variable must present object returned sfun. sfun (closure) function compute values required statistics. must return named list atomic vectors. names list elements refer names statistics used mid, interval, table. must able accept input vector data statistics computed. ... optional arguments sfun. mid_type (character) controls type mid plot, can point (p), line (l), point line (pl). mid_point_size (integer double) controls font size point mid plot. position (character call) geom element position adjustment, either string, result call position adjustment function. legend_title (character string) legend title. legend_position (character) position plot legend (none, left, right, bottom, top, two-element numeric vector). ggtheme (theme) graphical theme provided ggplot2 control styling plot. y_lab (character) y-axis label. equal NULL, label added. y_lab_add_paramcd (logical) paramcd, .e. unique(df[[variables[\"paramcd\"]]]) added y-axis label y_lab? y_lab_add_unit (logical) y unit, .e. unique(df[[variables[\"y_unit\"]]]) added y-axis label y_lab? title (character) plot title. subtitle (character) plot subtitle. subtitle_add_paramcd (logical) paramcd, .e. unique(df[[variables[\"paramcd\"]]]) added plot's subtitle subtitle? subtitle_add_unit (logical) y unit, .e. unique(df[[variables[\"y_unit\"]]]) added plot's subtitle subtitle? caption (character) optional caption plot. table_format (named character NULL) format patterns descriptive statistics used (optional) table appended plot. passed directly h_format_row function format parameter. Names table_format must match names statistics returned sfun function. table_labels (named character NULL) labels descriptive statistics used (optional) table appended plot. Names table_labels must match names statistics returned sfun function. table_font_size (integer double) controls font size values table. newpage (logical) plot drawn new page? col (character) colors.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_lineplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Line plot with the optional table ‚Äî g_lineplot","text":"ggplot","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_lineplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Line plot with the optional table ‚Äî g_lineplot","text":"Wojciech Wojciak wojciech.wojciak@contractors.roche.com","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_lineplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Line plot with the optional table ‚Äî g_lineplot","text":"","code":"library(nestcolor)  adsl <- tern_ex_adsl adlb <- tern_ex_adlb %>% dplyr::filter(ANL01FL == \"Y\", PARAMCD == \"ALT\", AVISIT != \"SCREENING\") adlb$AVISIT <- droplevels(adlb$AVISIT) adlb <- dplyr::mutate(adlb, AVISIT = forcats::fct_reorder(AVISIT, AVISITN, min))  # Mean with CI g_lineplot(adlb, adsl, subtitle = \"Laboratory Test:\")   # Mean with CI, no stratification g_lineplot(adlb, variables = control_lineplot_vars(strata = NA))   # Mean, upper whisker of CI, no strata counts N g_lineplot(   adlb,   whiskers = \"mean_ci_upr\",   title = \"Plot of Mean and Upper 95% Confidence Limit by Visit\" )   # Median with CI g_lineplot(   adlb,   adsl,   mid = \"median\",   interval = \"median_ci\",   whiskers = c(\"median_ci_lwr\", \"median_ci_upr\"),   title = \"Plot of Median and 95% Confidence Limits by Visit\" )   # Mean, +/- SD g_lineplot(adlb, adsl,   interval = \"mean_sdi\",   whiskers = c(\"mean_sdi_lwr\", \"mean_sdi_upr\"),   title = \"Plot of Median +/- SD by Visit\" )   # Mean with CI plot with stats table g_lineplot(adlb, adsl, table = c(\"n\", \"mean\", \"mean_ci\"))   # Mean with CI, table and customized confidence level g_lineplot(   adlb,   adsl,   table = c(\"n\", \"mean\", \"mean_ci\"),   control = control_summarize_vars(conf_level = 0.80),   title = \"Plot of Mean and 80% Confidence Limits by Visit\" )   # Mean with CI, table, filtered data adlb_f <- dplyr::filter(adlb, ARMCD != \"ARM A\" | AVISIT == \"BASELINE\") g_lineplot(adlb_f, table = c(\"n\", \"mean\"))"},{"path":"https://insightsengineering.github.io/tern/main/reference/g_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a STEP Graph ‚Äî g_step","title":"Create a STEP Graph ‚Äî g_step","text":"Based STEP results, creates ggplot graph showing estimated HR along continuous biomarker value subgroups.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a STEP Graph ‚Äî g_step","text":"","code":"g_step(   df,   use_percentile = \"Percentile Center\" %in% names(df),   est = list(col = \"blue\", lty = 1),   ci_ribbon = list(fill = getOption(\"ggplot2.discrete.colour\")[1], alpha = 0.5),   col = getOption(\"ggplot2.discrete.colour\") )"},{"path":"https://insightsengineering.github.io/tern/main/reference/g_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a STEP Graph ‚Äî g_step","text":"df (tibble) result tidy.step(). use_percentile (flag) whether use percentiles x axis actual biomarker values. est (named list)col lty settings estimate line. ci_ribbon (named list NULL)fill alpha settings confidence interval ribbon area, NULL plot CI ribbon. col (character) colors.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a STEP Graph ‚Äî g_step","text":"ggplot2 object.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/g_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a STEP Graph ‚Äî g_step","text":"","code":"library(nestcolor) library(survival) lung$sex <- factor(lung$sex)  # Survival example. vars <- list(   time = \"time\",   event = \"status\",   arm = \"sex\",   biomarker = \"age\" )  step_matrix <- fit_survival_step(   variables = vars,   data = lung,   control = c(control_coxph(), control_step(num_points = 10, degree = 2)) ) step_data <- broom::tidy(step_matrix)  # Default plot. g_step(step_data)   # Add the reference 1 horizontal line. library(ggplot2) g_step(step_data) +   ggplot2::geom_hline(ggplot2::aes(yintercept = 1), linetype = 2)   # Use actual values instead of percentiles, different color for estimate and no CI, # use log scale for y axis. g_step(   step_data,   use_percentile = FALSE,   est = list(col = \"blue\", lty = 1),   ci_ribbon = NULL ) + scale_y_log10()   # Adding another curve based on additional column. step_data$extra <- exp(step_data$`Percentile Center`) g_step(step_data) +   ggplot2::geom_line(ggplot2::aes(y = extra), linetype = 2, color = \"green\")   # Response example. vars <- list(   response = \"status\",   arm = \"sex\",   biomarker = \"age\" )  step_matrix <- fit_rsp_step(   variables = vars,   data = lung,   control = c(     control_logistic(response_definition = \"I(response == 2)\"),     control_step()   ) ) step_data <- broom::tidy(step_matrix) g_step(step_data)"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/g_waterfall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Horizontal Waterfall Plot ‚Äî g_waterfall","text":"","code":"g_waterfall(   height,   id,   col_var = NULL,   col = getOption(\"ggplot2.discrete.colour\"),   xlab = NULL,   ylab = NULL,   col_legend_title = NULL,   title = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/g_waterfall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Horizontal Waterfall Plot ‚Äî g_waterfall","text":"height (`numeric``) vector containing values plotted waterfall bars. id (character) vector containing IDs use x-axis label waterfall bars. col_var (factor, character NULL) categorical variable bar coloring. NULL default. col (character) colors. xlab (character) x label. Default \"ID\". ylab (character) y label. Default \"Value\". col_legend_title (character) text displayed legend title. title (character) text displayed plot title.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_waterfall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Horizontal Waterfall Plot ‚Äî g_waterfall","text":"(ggplot object) waterfall plot.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_waterfall.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Horizontal Waterfall Plot ‚Äî g_waterfall","text":"basic waterfall plot visualizes quantity height ordered value markup.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_waterfall.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Horizontal Waterfall Plot ‚Äî g_waterfall","text":"Yuyao Song (songy) yuyao.song@roche.com","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/g_waterfall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Horizontal Waterfall Plot ‚Äî g_waterfall","text":"","code":"library(dplyr) library(nestcolor)  g_waterfall(height = c(3, 5, -1), id = letters[1:3])   g_waterfall(   height = c(3, 5, -1),   id = letters[1:3],   col_var = letters[1:3] )   adsl_f <- tern_ex_adsl %>%   select(USUBJID, STUDYID, ARM, ARMCD, SEX)  adrs_f <- tern_ex_adrs %>%   filter(PARAMCD == \"OVRINV\") %>%   mutate(pchg = rnorm(n(), 10, 50))  adrs_f <- head(adrs_f, 30) adrs_f <- adrs_f[!duplicated(adrs_f$USUBJID), ] head(adrs_f) #> # A tibble: 5 √ó 30 #>   STUDYID COUNTRY SITEID SUBJID   AGE SEX   ARMCD ARM      ACTARMCD ACTARM RACE  #>   <chr>   <fct>   <chr>  <chr>  <dbl> <fct> <fct> <fct>    <fct>    <fct>  <fct> #> 1 AB12345 BRA     BRA-1  id-105  37.8 F     ARM A A: Drug‚Ä¶ ARM A    A: Dr‚Ä¶ ASIAN #> 2 AB12345 BRA     BRA-1  id-171  29.8 F     ARM B B: Plac‚Ä¶ ARM B    B: Pl‚Ä¶ ASIAN #> 3 AB12345 BRA     BRA-1  id-177  38.9 F     ARM B B: Plac‚Ä¶ ARM B    B: Pl‚Ä¶ ASIAN #> 4 AB12345 BRA     BRA-1  id-23   41.3 F     ARM A A: Drug‚Ä¶ ARM A    A: Dr‚Ä¶ AMER‚Ä¶ #> 5 AB12345 BRA     BRA-1  id-59   26.7 F     ARM A A: Drug‚Ä¶ ARM A    A: Dr‚Ä¶ ASIAN #> # ‚Ñπ 19 more variables: TRTSDTM <dttm>, TRTEDTM <dttm>, EOSDY <dbl>, #> #   STRATA1 <fct>, STRATA2 <fct>, BMRKR1 <dbl>, BMRKR2 <fct>, REGION1 <fct>, #> #   SAFFL <fct>, USUBJID <chr>, AVISIT <fct>, PARAMCD <fct>, PARAM <fct>, #> #   AVALC <fct>, AVAL <int>, ADTM <date>, AVISITN <dbl>, DTHFL <fct>, #> #   pchg <dbl>  g_waterfall(   height = adrs_f$pchg,   id = adrs_f$USUBJID,   col_var = adrs_f$AVALC )   g_waterfall(   height = adrs_f$pchg,   id = paste(\"asdfdsfdsfsd\", adrs_f$USUBJID),   col_var = adrs_f$SEX )   g_waterfall(   height = adrs_f$pchg,   id = paste(\"asdfdsfdsfsd\", adrs_f$USUBJID),   xlab = \"ID\",   ylab = \"Percentage Change\",   title = \"Waterfall plot\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/get_covariates.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to return a named list of covariate names. ‚Äî get_covariates","title":"Utility function to return a named list of covariate names. ‚Äî get_covariates","text":"Utility function return named list covariate names.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/get_covariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to return a named list of covariate names. ‚Äî get_covariates","text":"","code":"get_covariates(covariates)"},{"path":"https://insightsengineering.github.io/tern/main/reference/get_covariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to return a named list of covariate names. ‚Äî get_covariates","text":"covariates (character) vector can contain single variable names (\"X1\"), /interaction terms indicated \"X1 * X2\".","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/get_covariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to return a named list of covariate names. ‚Äî get_covariates","text":"named list character vector.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/get_smooths.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth Function with Optional Grouping ‚Äî get_smooths","title":"Smooth Function with Optional Grouping ‚Äî get_smooths","text":"produces loess smoothed estimates y Student confidence intervals.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/get_smooths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth Function with Optional Grouping ‚Äî get_smooths","text":"","code":"get_smooths(df, x, y, groups = NULL, level = 0.95)"},{"path":"https://insightsengineering.github.io/tern/main/reference/get_smooths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth Function with Optional Grouping ‚Äî get_smooths","text":"df (data.frame) data set containing analysis variables. x (character) value x column name. y (character) value y column name. groups (character) vector optional grouping variables names. level (numeric) level confidence interval use (0.95 default).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/get_smooths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth Function with Optional Grouping ‚Äî get_smooths","text":"data.frame original x, smoothed y, ylow, yhigh optional groups variables formatted factor type.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/groups_list_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert List of Groups to Data Frame ‚Äî groups_list_to_df","title":"Convert List of Groups to Data Frame ‚Äî groups_list_to_df","text":"converts list group levels data frame format expected rtables::add_combo_levels().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/groups_list_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert List of Groups to Data Frame ‚Äî groups_list_to_df","text":"","code":"groups_list_to_df(groups_list)"},{"path":"https://insightsengineering.github.io/tern/main/reference/groups_list_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert List of Groups to Data Frame ‚Äî groups_list_to_df","text":"groups_list (named list character) specifies new group levels via names levels belong character vectors elements list.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/groups_list_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert List of Groups to Data Frame ‚Äî groups_list_to_df","text":"tibble::tibble() required format.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/groups_list_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert List of Groups to Data Frame ‚Äî groups_list_to_df","text":"","code":"grade_groups <- list(   \"Any Grade (%)\" = c(\"1\", \"2\", \"3\", \"4\", \"5\"),   \"Grade 3-4 (%)\" = c(\"3\", \"4\"),   \"Grade 5 (%)\" = \"5\" ) # Internal function - groups_list_to_df if (FALSE) { groups_list_to_df(grade_groups) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_adlb_worsen.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to Prepare ADLB with Worst Labs ‚Äî h_adlb_worsen","title":"Helper Function to Prepare ADLB with Worst Labs ‚Äî h_adlb_worsen","text":"Helper function prepare df generate patient count shift table","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_adlb_worsen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Prepare ADLB with Worst Labs ‚Äî h_adlb_worsen","text":"","code":"h_adlb_worsen(   adlb,   worst_flag_low = NULL,   worst_flag_high = NULL,   direction_var )"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_adlb_worsen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Prepare ADLB with Worst Labs ‚Äî h_adlb_worsen","text":"adlb (data.frame)ADLB dataframe worst_flag_low (named vector) Worst low post-baseline lab grade flag variable worst_flag_high (named vector) Worst high post-baseline lab grade flag variable direction_var (string) Direction variable specifying direction shift table interest. lab records flagged L, H B included shift table. L: low direction H: high direction B: low high directions","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_adlb_worsen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to Prepare ADLB with Worst Labs ‚Äî h_adlb_worsen","text":"h_adlb_worsen() returns adlb  data.frame containing worst labs specified according worst_flag_low worst_flag_high direction specified according direction_var. instance, lab needed low direction , records flagged worst_flag_low selected. lab needed low high directions, worst low records selected low direction, worst high record selected high direction.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_adlb_worsen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function to Prepare ADLB with Worst Labs ‚Äî h_adlb_worsen","text":"","code":"library(dplyr)  # The direction variable, GRADDR, is based on metadata adlb <- tern_ex_adlb %>%   mutate(     GRADDR = case_when(       PARAMCD == \"ALT\" ~ \"B\",       PARAMCD == \"CRP\" ~ \"L\",       PARAMCD == \"IGA\" ~ \"H\"     )   ) %>%   filter(SAFFL == \"Y\" & ONTRTFL == \"Y\" & GRADDR != \"\")  df <- h_adlb_worsen(   adlb,   worst_flag_low = c(\"WGRLOFL\" = \"Y\"),   worst_flag_high = c(\"WGRHIFL\" = \"Y\"),   direction_var = \"GRADDR\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_adsl_adlb_merge_using_worst_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function for Deriving Analysis Datasets for LBT13 and LBT14 ‚Äî h_adsl_adlb_merge_using_worst_flag","title":"Helper Function for Deriving Analysis Datasets for LBT13 and LBT14 ‚Äî h_adsl_adlb_merge_using_worst_flag","text":"Helper function merges ADSL ADLB datasets missing lab test records inserted output dataset.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_adsl_adlb_merge_using_worst_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function for Deriving Analysis Datasets for LBT13 and LBT14 ‚Äî h_adsl_adlb_merge_using_worst_flag","text":"","code":"h_adsl_adlb_merge_using_worst_flag(   adsl,   adlb,   worst_flag = c(WGRHIFL = \"Y\"),   by_visit = FALSE,   no_fillin_visits = c(\"SCREENING\", \"BASELINE\") )"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_adsl_adlb_merge_using_worst_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function for Deriving Analysis Datasets for LBT13 and LBT14 ‚Äî h_adsl_adlb_merge_using_worst_flag","text":"adsl (data.frame)ADSL dataframe. adlb (data.frame)ADLB dataframe. worst_flag (named vector) Worst post-baseline lab flag variable. by_visit (logical) defaults FALSE generate worst grade per patient. worst grade per patient per visit specified worst_flag, by_visit TRUE generate worst grade patient per visit. no_fillin_visits (named character) Visits considered post-baseline worst toxicity grade. Defaults c(\"SCREENING\", \"BASELINE\").","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_adsl_adlb_merge_using_worst_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function for Deriving Analysis Datasets for LBT13 and LBT14 ‚Äî h_adsl_adlb_merge_using_worst_flag","text":"df containing variables shared adlb adsl along variables relevant analysis: PARAM, PARAMCD, ATOXGR, BTOXGR.  Optionally AVISIT, AVISITN included by_visit = TRUE no_fillin_visits = c(\"SCREENING\", \"BASELINE\").","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_adsl_adlb_merge_using_worst_flag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper Function for Deriving Analysis Datasets for LBT13 and LBT14 ‚Äî h_adsl_adlb_merge_using_worst_flag","text":"result data missing records created following situations: Patients present adsl lab data adlb (baseline post-baseline). Patients post-baseline lab values. Patients without post-baseline values flagged worst.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_adsl_adlb_merge_using_worst_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function for Deriving Analysis Datasets for LBT13 and LBT14 ‚Äî h_adsl_adlb_merge_using_worst_flag","text":"","code":"# `h_adsl_adlb_merge_using_worst_flag` adlb_out <- h_adsl_adlb_merge_using_worst_flag(   tern_ex_adsl,   tern_ex_adlb,   worst_flag = c(\"WGRHIFL\" = \"Y\") )  # `h_adsl_adlb_merge_using_worst_flag` by visit example adlb_out_by_visit <- h_adsl_adlb_merge_using_worst_flag(   tern_ex_adsl,   tern_ex_adlb,   worst_flag = c(\"WGRLOVFL\" = \"Y\"),   by_visit = TRUE )"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_ancova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Return Results of a Linear Model ‚Äî h_ancova","text":"","code":"h_ancova(.var, .df_row, variables, interaction_item = NULL)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_ancova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Return Results of a Linear Model ‚Äî h_ancova","text":".var (string) single variable name passed rtables requested statistics function. .df_row (data.frame) data set includes variables called .var variables. variables (named list strings) list additional analysis variables, expected elements: arm (string) group variable, covariate adjusted means multiple groups summarized. Specifically, first level arm variable taken reference group. covariates (character) vector can contain single variable names (\"X1\"), /interaction terms indicated \"X1 * X2\". interaction_item (character) name variable interactions arm. interaction needed, default option NULL.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_ancova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function to Return Results of a Linear Model ‚Äî h_ancova","text":"","code":"h_ancova(   .var = \"Sepal.Length\",   .df_row = iris,   variables = list(arm = \"Species\", covariates = c(\"Petal.Length * Petal.Width\", \"Sepal.Width\")) ) #>  Species    emmean     SE  df lower.CL upper.CL #>  setosa       6.15 0.3371 143     5.49     6.82 #>  versicolor   5.72 0.0668 143     5.59     5.85 #>  virginica    5.41 0.1488 143     5.11     5.70 #>  #> Confidence level used: 0.95"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_append_grade_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for s_count_occurrences_by_grade() ‚Äî h_append_grade_groups","title":"Helper function for s_count_occurrences_by_grade() ‚Äî h_append_grade_groups","text":"Helper function s_count_occurrences_by_grade() insert grade groupings list individual grade frequencies. order final result follows order grade_groups. elements -grade group (), .e. grade group equal refs moved end. Grade groups names must unique.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_append_grade_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for s_count_occurrences_by_grade() ‚Äî h_append_grade_groups","text":"","code":"h_append_grade_groups(grade_groups, refs, remove_single = TRUE)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_append_grade_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for s_count_occurrences_by_grade() ‚Äî h_append_grade_groups","text":"grade_groups (named list character) containing groupings grades. refs (named list numeric) name corresponds reference grade level entry represents count. remove_single (logical)TRUE include elements one-element grade groups output list; case grade groups names included output.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_append_grade_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for s_count_occurrences_by_grade() ‚Äî h_append_grade_groups","text":"","code":"h_append_grade_groups(   list(     \"Any Grade\" = as.character(1:5),     \"Grade 1-2\" = c(\"1\", \"2\"),     \"Grade 3-4\" = c(\"3\", \"4\")   ),   list(\"1\" = 10, \"2\" = 20, \"3\" = 30, \"4\" = 40, \"5\" = 50) ) #> $`Any Grade` #> [1] 150 #>  #> $`Grade 1-2` #> [1] 30 #>  #> $`1` #> [1] 10 #>  #> $`2` #> [1] 20 #>  #> $`Grade 3-4` #> [1] 70 #>  #> $`3` #> [1] 30 #>  #> $`4` #> [1] 40 #>  #> $`5` #> [1] 50 #>   h_append_grade_groups(   list(     \"Any Grade\" = as.character(5:1),     \"Grade A\" = \"5\",     \"Grade B\" = c(\"4\", \"3\")   ),   list(\"1\" = 10, \"2\" = 20, \"3\" = 30, \"4\" = 40, \"5\" = 50) ) #> $`Any Grade` #> [1] 150 #>  #> $`Grade A` #> [1] 50 #>  #> $`Grade B` #> [1] 70 #>  #> $`4` #> [1] 40 #>  #> $`3` #> [1] 30 #>  #> $`2` #> [1] 20 #>  #> $`1` #> [1] 10 #>   h_append_grade_groups(   list(     \"Any Grade\" = as.character(1:5),     \"Grade 1-2\" = c(\"1\", \"2\"),     \"Grade 3-4\" = c(\"3\", \"4\")   ),   list(\"1\" = 10, \"2\" = 5, \"3\" = 0) ) #> $`Any Grade` #> [1] 15 #>  #> $`Grade 1-2` #> [1] 15 #>  #> $`1` #> [1] 10 #>  #> $`2` #> [1] 5 #>  #> $`Grade 3-4` #> [1] 0 #>  #> $`3` #> [1] 0 #>"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_col_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain Column Indices ‚Äî h_col_indices","title":"Obtain Column Indices ‚Äî h_col_indices","text":"Helper function extract column indices VTableTree given vector column names.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_col_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain Column Indices ‚Äî h_col_indices","text":"","code":"h_col_indices(table_tree, col_names)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_col_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain Column Indices ‚Äî h_col_indices","text":"table_tree (VTableTree) table extract indices . col_names (character) vector column names.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_col_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain Column Indices ‚Äî h_col_indices","text":"vector column indices.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_count_cumulative.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function for s_count_cumulative() ‚Äî h_count_cumulative","title":"Helper Function for s_count_cumulative() ‚Äî h_count_cumulative","text":"Helper function calculate count fraction x values lower upper tail given threshold.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_count_cumulative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function for s_count_cumulative() ‚Äî h_count_cumulative","text":"","code":"h_count_cumulative(   x,   threshold,   lower_tail = TRUE,   include_eq = TRUE,   na.rm = TRUE,   .N_col )"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_count_cumulative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function for s_count_cumulative() ‚Äî h_count_cumulative","text":"x (numeric) vector numbers want analyze. threshold (number) cutoff value threshold count values x. lower_tail (logical) whether count lower tail, default TRUE. include_eq (logical) whether include value equal threshold count, default TRUE. na.rm (flag) whether NA values removed x prior analysis. .N_col (count) denominator fraction calculation.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_count_cumulative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function for s_count_cumulative() ‚Äî h_count_cumulative","text":"named vector items: count count values less , less equal , greater , greater equal threshold user specification. fraction fraction count.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_count_cumulative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function for s_count_cumulative() ‚Äî h_count_cumulative","text":"","code":"set.seed(1, kind = \"Mersenne-Twister\") x <- c(sample(1:10, 10), NA) .N_col <- length(x) h_count_cumulative(x, 5, .N_col = .N_col) #>     count  fraction  #> 5.0000000 0.4545455  h_count_cumulative(x, 5, lower_tail = FALSE, include_eq = FALSE, na.rm = FALSE, .N_col = .N_col) #>     count  fraction  #> 6.0000000 0.5454545  h_count_cumulative(x, 0, lower_tail = FALSE, .N_col = .N_col) #>      count   fraction  #> 10.0000000  0.9090909  h_count_cumulative(x, 100, lower_tail = FALSE, .N_col = .N_col) #>    count fraction  #>        0        0"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_cox_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Functions for Cox Proportional Hazards Regression ‚Äî h_cox_regression","title":"Helper Functions for Cox Proportional Hazards Regression ‚Äî h_cox_regression","text":"Helper functions used fit_coxreg_univar() fit_coxreg_multivar().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_cox_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions for Cox Proportional Hazards Regression ‚Äî h_cox_regression","text":"","code":"h_coxreg_univar_formulas(variables, interaction = FALSE)  h_coxreg_multivar_formula(variables)  h_coxreg_univar_extract(effect, covar, data, mod, control = control_coxreg())  h_coxreg_multivar_extract(var, data, mod, control = control_coxreg())"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_cox_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions for Cox Proportional Hazards Regression ‚Äî h_cox_regression","text":"variables (named list string) list additional analysis variables. interaction (flag) TRUE, model includes interaction studied treatment candidate covariate. Note univariate models without treatment arm, multivariate models, interaction can used needs FALSE. effect (string) treatment variable. covar (string) name covariate model. data (data.frame) dataset containing variables summarize. mod (coxph) Cox regression model fitted survival::coxph(). control (list) list controls returned control_coxreg(). var (string) single variable name passed rtables requested statistics function.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_cox_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Functions for Cox Proportional Hazards Regression ‚Äî h_cox_regression","text":"function h_coxreg_univar_formulas returns character vector coercible formulas (e.g stats::.formula()). function h_coxreg_univar_formulas returns character vector coercible formulas (e.g stats::.formula()).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_cox_regression.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper Functions for Cox Proportional Hazards Regression ‚Äî h_cox_regression","text":"h_coxreg_univar_formulas(): Helper Cox Regression Formula Creates list formulas. used internally fit_coxreg_univar() comparison univariate Cox regression models. h_coxreg_multivar_formula(): Helper Multi-variable Cox Regression Formula Creates formulas string. used internally fit_coxreg_multivar() comparison multi-variable Cox regression models. Interactions included multi-variable Cox regression model. h_coxreg_univar_extract(): Utility function help tabulate result univariate Cox regression model. h_coxreg_multivar_extract(): Tabulation Multi-variable Cox Regressions Utility function help tabulate result multi-variable Cox regression model treatment/covariate variable.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_cox_regression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Functions for Cox Proportional Hazards Regression ‚Äî h_cox_regression","text":"","code":"# `h_coxreg_univar_formulas`  ## Simple formulas. h_coxreg_univar_formulas(   variables = list(     time = \"time\", event = \"status\", arm = \"armcd\", covariates = c(\"X\", \"y\")   ) ) #>                                        ref  #>     \"survival::Surv(time, status) ~ armcd\"  #>                                          X  #> \"survival::Surv(time, status) ~ armcd + X\"  #>                                          y  #> \"survival::Surv(time, status) ~ armcd + y\"   ## Addition of an optional strata. h_coxreg_univar_formulas(   variables = list(     time = \"time\", event = \"status\", arm = \"armcd\", covariates = c(\"X\", \"y\"),     strata = \"SITE\"   ) ) #>                                                       ref  #>     \"survival::Surv(time, status) ~ armcd + strata(SITE)\"  #>                                                         X  #> \"survival::Surv(time, status) ~ armcd + X + strata(SITE)\"  #>                                                         y  #> \"survival::Surv(time, status) ~ armcd + y + strata(SITE)\"   ## Inclusion of the interaction term. h_coxreg_univar_formulas(   variables = list(     time = \"time\", event = \"status\", arm = \"armcd\", covariates = c(\"X\", \"y\"),     strata = \"SITE\"   ),   interaction = TRUE ) #>                                                       ref  #>     \"survival::Surv(time, status) ~ armcd + strata(SITE)\"  #>                                                         X  #> \"survival::Surv(time, status) ~ armcd * X + strata(SITE)\"  #>                                                         y  #> \"survival::Surv(time, status) ~ armcd * y + strata(SITE)\"   ## Only covariates fitted in separate models. h_coxreg_univar_formulas(   variables = list(     time = \"time\", event = \"status\", covariates = c(\"X\", \"y\")   ) ) #>                                      X                                      y  #> \"survival::Surv(time, status) ~ 1 + X\" \"survival::Surv(time, status) ~ 1 + y\"   # `h_coxreg_multivar_formula`  h_coxreg_multivar_formula(   variables = list(     time = \"AVAL\", event = \"event\", arm = \"ARMCD\", covariates = c(\"RACE\", \"AGE\")   ) ) #> [1] \"survival::Surv(AVAL, event) ~ ARMCD + RACE + AGE\"  # Addition of an optional strata. h_coxreg_multivar_formula(   variables = list(     time = \"AVAL\", event = \"event\", arm = \"ARMCD\", covariates = c(\"RACE\", \"AGE\"),     strata = \"SITE\"   ) ) #> [1] \"survival::Surv(AVAL, event) ~ ARMCD + RACE + AGE + strata(SITE)\"  # Example without treatment arm. h_coxreg_multivar_formula(   variables = list(     time = \"AVAL\", event = \"event\", covariates = c(\"RACE\", \"AGE\"),     strata = \"SITE\"   ) ) #> [1] \"survival::Surv(AVAL, event) ~ 1 + RACE + AGE + strata(SITE)\" library(survival)  dta_simple <- data.frame(   time = c(5, 5, 10, 10, 5, 5, 10, 10),   status = c(0, 0, 1, 0, 0, 1, 1, 1),   armcd = factor(LETTERS[c(1, 1, 1, 1, 2, 2, 2, 2)], levels = c(\"A\", \"B\")),   var1 = c(45, 55, 65, 75, 55, 65, 85, 75),   var2 = c(\"F\", \"M\", \"F\", \"M\", \"F\", \"M\", \"F\", \"U\") ) mod <- coxph(Surv(time, status) ~ armcd + var1, data = dta_simple) result <- h_coxreg_univar_extract(   effect = \"armcd\", covar = \"armcd\", mod = mod, data = dta_simple ) result #>       effect  term       term_label level n       hr       lcl      ucl #> 1 Treatment: armcd B vs control (A)     B 8 6.551448 0.4606904 93.16769 #>       pval #> 1 0.165209  mod <- coxph(Surv(time, status) ~ armcd + var1, data = dta_simple) result <- h_coxreg_multivar_extract(   var = \"var1\", mod = mod, data = dta_simple ) result #>        pval        hr      lcl      ucl level n term term_label #> 2 0.4456195 0.9423284 0.808931 1.097724  var1 8 var1       var1"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_data_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: tidy survival fit ‚Äî h_data_plot","title":"Helper function: tidy survival fit ‚Äî h_data_plot","text":"Convert survival fit data data frame designed plotting within g_km.  starts broom::tidy() result, : post-processes strata column factor, extends stratum additional first row time 0 probability 1 downstream plot lines start coordinates, adds censor column, filters rows max_time.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_data_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: tidy survival fit ‚Äî h_data_plot","text":"","code":"h_data_plot(fit_km, armval = \"All\", max_time = NULL)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_data_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: tidy survival fit ‚Äî h_data_plot","text":"fit_km (survfit) result survival::survfit(). armval (string) used strata name treatment arm variable one level. Default \"\". max_time (numeric) maximum value show X axis. data values less threshold value plotted (defaults NULL).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_data_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function: tidy survival fit ‚Äî h_data_plot","text":"","code":"if (FALSE) { library(dplyr) library(survival)  # Test with multiple arms tern_ex_adtte %>%   filter(PARAMCD == \"OS\") %>%   survfit(form = Surv(AVAL, 1 - CNSR) ~ ARMCD, data = .) %>%   h_data_plot()  # Test with single arm tern_ex_adtte %>%   filter(PARAMCD == \"OS\", ARMCD == \"ARM B\") %>%   survfit(form = Surv(AVAL, 1 - CNSR) ~ ARMCD, data = .) %>%   h_data_plot(armval = \"ARM B\") }"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_decompose_gg.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot Decomposition ‚Äî h_decompose_gg","title":"ggplot Decomposition ‚Äî h_decompose_gg","text":"elements composing ggplot extracted organized list containing: panel (panel), y-axis label (yaxis, ylab), idem x-axis (xaxis, xlab), legend (guide).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_decompose_gg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot Decomposition ‚Äî h_decompose_gg","text":"","code":"h_decompose_gg(gg)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_decompose_gg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot Decomposition ‚Äî h_decompose_gg","text":"gg (ggplot) graphic decompose.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_decompose_gg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot Decomposition ‚Äî h_decompose_gg","text":"","code":"if (FALSE) { library(dplyr) library(survival) library(grid)  fit_km <- tern_ex_adtte %>%   filter(PARAMCD == \"OS\") %>%   survfit(form = Surv(AVAL, 1 - CNSR) ~ ARMCD, data = .) data_plot <- h_data_plot(fit_km = fit_km) xticks <- h_xticks(data = data_plot) gg <- h_ggkm(   data = data_plot,   yval = \"Survival\",   censor_show = TRUE,   xticks = xticks, xlab = \"Days\", ylab = \"Survival Probability\",   title = \"tt\",   footnotes = \"ff\" )  g_el <- h_decompose_gg(gg) grid::grid.newpage() grid.rect(gp = grid::gpar(lty = 1, col = \"red\", fill = \"gray85\", lwd = 5)) grid::grid.draw(g_el$panel)  grid::grid.newpage() grid.rect(gp = grid::gpar(lty = 1, col = \"royalblue\", fill = \"gray85\", lwd = 5)) grid::grid.draw(with(g_el, cbind(ylab, yaxis))) }"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_format_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to get the right formatting in the optional table in g_lineplot. ‚Äî h_format_row","text":"","code":"h_format_row(x, format, labels = NULL)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_format_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to get the right formatting in the optional table in g_lineplot. ‚Äî h_format_row","text":"x (named list) list numerical values formatted optionally labeled. Elements x must numeric vectors. format (named character NULL) format patterns x. Names format must match names x. parameter passed directly rtables::format_rcell function format parameter. labels (named character NULL) optional labels x. Names labels must match names x. label specified element x, function tries use label names (order) attribute element (depending one exists NULL NA NaN). none attributes attached given element x, label automatically generated.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_format_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to get the right formatting in the optional table in g_lineplot. ‚Äî h_format_row","text":"1-row data.frame object","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_format_row.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Helper function to get the right formatting in the optional table in g_lineplot. ‚Äî h_format_row","text":"Wojciech Wojciak wojciech.wojciak@contractors.roche.com","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_format_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to get the right formatting in the optional table in g_lineplot. ‚Äî h_format_row","text":"","code":"mean_ci <- c(48, 51) x <- list(mean = 50, mean_ci = mean_ci) format <- c(mean = \"xx.x\", mean_ci = \"(xx.xx, xx.xx)\") labels <- c(mean = \"My Mean\") h_format_row(x, format, labels) #>   My Mean             V1 #> 1    50.0 (48.00, 51.00)  attr(mean_ci, \"label\") <- \"Mean 95% CI\" x <- list(mean = 50, mean_ci = mean_ci) h_format_row(x, format, labels) #>   My Mean    Mean 95% CI #> 1    50.0 (48.00, 51.00)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_g_ipp.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function To Create Simple Line Plot over Time ‚Äî h_g_ipp","title":"Helper Function To Create Simple Line Plot over Time ‚Äî h_g_ipp","text":"Function generates simple line plot displaying parameter trends time.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_g_ipp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function To Create Simple Line Plot over Time ‚Äî h_g_ipp","text":"","code":"h_g_ipp(   df,   xvar,   yvar,   xlab,   ylab,   id_var,   title = \"Individual Patient Plots\",   subtitle = \"\",   caption = NULL,   add_baseline_hline = FALSE,   yvar_baseline = \"BASE\",   ggtheme = nestcolor::theme_nest(),   col = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_g_ipp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function To Create Simple Line Plot over Time ‚Äî h_g_ipp","text":"df (data.frame) data set containing analysis variables. xvar (string) time point variable plotted x-axis. yvar (string) continuous analysis variable plotted y-axis. xlab (string) plot label x-axis. ylab (string) plot label y-axis. id_var (string) variable used patient identifier. title (string) title plot. subtitle (string) subtitle plot. caption (character scalar) optional caption plot. add_baseline_hline (flag) adds horizontal line baseline y-value plot TRUE. yvar_baseline (string) variable baseline values . Ignored add_baseline_hline FALSE. ggtheme (theme) optional graphical theme function provided ggplot2 control outlook plot. Use ggplot2::theme() tweak display. col (character) lines colors.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_g_ipp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function To Create Simple Line Plot over Time ‚Äî h_g_ipp","text":"","code":"library(dplyr) library(nestcolor)  # Select a small sample of data to plot. adlb <- tern_ex_adlb %>%   filter(PARAMCD == \"ALT\", !(AVISIT %in% c(\"SCREENING\", \"BASELINE\"))) %>%   slice(1:36)  p <- h_g_ipp(   df = adlb,   xvar = \"AVISIT\",   yvar = \"AVAL\",   xlab = \"Visit\",   id_var = \"USUBJID\",   ylab = \"SGOT/ALT (U/L)\",   add_baseline_hline = TRUE ) p"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_ggkm.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: KM plot ‚Äî h_ggkm","title":"Helper function: KM plot ‚Äî h_ggkm","text":"Draw Kaplan-Meier plot using ggplot2.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_ggkm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: KM plot ‚Äî h_ggkm","text":"","code":"h_ggkm(   data,   xticks = NULL,   yval = \"Survival\",   censor_show,   xlab,   ylab,   title,   footnotes = NULL,   max_time = NULL,   lwd = 1,   lty = NULL,   pch = 3,   size = 2,   col = NULL,   ci_ribbon = FALSE,   ggtheme = nestcolor::theme_nest() )"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_ggkm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: KM plot ‚Äî h_ggkm","text":"data (data.frame) survival data pre-processed h_data_plot. xticks (numeric, number, NULL) numeric vector ticks single number spacing ticks x axis. NULL (default), labeling::extended() used determine optimal tick position x axis. yval (string) value y-axis. Options Survival (default) Failure probability. censor_show (flag) whether show censored. xlab (string) label x-axis. ylab (string) label y-axis. title (string) title plot. footnotes (string) footnotes plot. max_time (numeric) maximum value show X axis. data values less threshold value plotted (defaults NULL). lwd (numeric) line width. Length vector equal number strata survival::survfit(). lty (numeric) line type. Length vector equal number strata survival::survfit(). pch (numeric, string) value character points symbol indicate censored cases. size (numeric) size censored point, class unit. col (character) lines colors. Length vector equal number strata survival::survfit(). ci_ribbon (flag) draw confidence interval around Kaplan-Meier curve. ggtheme (theme) graphical theme provided ggplot2 control outlook Kaplan-Meier curve.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_ggkm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function: KM plot ‚Äî h_ggkm","text":"","code":"if (FALSE) { library(dplyr) library(survival)  fit_km <- tern_ex_adtte %>%   filter(PARAMCD == \"OS\") %>%   survfit(form = Surv(AVAL, 1 - CNSR) ~ ARMCD, data = .) data_plot <- h_data_plot(fit_km = fit_km) xticks <- h_xticks(data = data_plot) gg <- h_ggkm(   data = data_plot,   censor_show = TRUE,   xticks = xticks,   xlab = \"Days\",   yval = \"Survival\",   ylab = \"Survival Probability\",   title = \"Survival\" ) gg }"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_glm_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Functions for Poisson Models. ‚Äî h_glm_count","title":"Helper Functions for Poisson Models. ‚Äî h_glm_count","text":"Helper functions can used return results various Poisson models.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_glm_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions for Poisson Models. ‚Äî h_glm_count","text":"","code":"h_glm_poisson(.var, .df_row, variables, weights)  h_glm_quasipoisson(.var, .df_row, variables, weights)  h_glm_count(.var, .df_row, variables, distribution, weights)  h_ppmeans(obj, .df_row, arm, conf_level)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_glm_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions for Poisson Models. ‚Äî h_glm_count","text":".var (string) single variable name passed rtables requested statistics function. .df_row (data.frame) data set includes variables called .var variables. variables (named list strings) list additional analysis variables, expected elements: arm (string) group variable, covariate adjusted means multiple groups summarized. Specifically, first level arm variable taken reference group. covariates (character) vector can contain single variable names (\"X1\"), /interaction terms indicated \"X1 * X2\". offset (numeric) numeric vector scalar adding offset. obj (glm.fit) fitted model object used derive mean rate estimates treatment arm. conf_level (numeric) value used derive confidence interval rate. `weights`(`character`) character vector specifying weights used averaging predictions. `distribution`(`character`) character value specifying distribution used regression (poisson, quasipoisson). `arm` (string) group variable, covariate adjusted means multiple groups summarized. Specifically, first level arm variable taken reference group.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_glm_count.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper Functions for Poisson Models. ‚Äî h_glm_count","text":"h_glm_poisson(): Helper function return results poisson model. h_glm_quasipoisson(): Helper function return results quasipoisson model. h_glm_count(): Helper function return results selected model (poisson, quasipoisson, negative binomial). h_ppmeans(): Helper function return estimated means.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_glm_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Functions for Poisson Models. ‚Äî h_glm_count","text":"","code":"# Internal function - h_glm_poisson if (FALSE) { h_glm_poisson(   .var = \"AVAL\",   .df_row = anl,   variables = list(arm = \"ARM\", offset = \"lgTMATRSK\", covariates = NULL) ) }   # Internal function - h_glm_quasipoisson if (FALSE) { h_glm_quasipoisson(   .var = \"AVAL\",   .df_row = anl,   variables = list(arm = \"ARM\", offset = \"lgTMATRSK\", covariates = c(\"REGION1\")) ) }  # Internal function - h_glm_count if (FALSE) { h_glm_count(   .var = \"AVAL\",   .df_row = anl,   variables = list(arm = \"ARMCD\", offset = \"lgTMATRSK\", covariates = NULL),   distribution = \"poisson\" ) }  # Internal function - h_ppmeans if (FALSE) { fits <- h_glm_count(   .var = \"AVAL\",   .df_row = anl,   variables = list(arm = \"ARMCD\", offset = \"lgTMATRSK\", covariates = c(\"REGION1\")),   distribution = \"quasipoisson\" )  h_ppmeans(   obj = fits$glm_fit,   .df_row = anl,   arm = \"ARM\",   conf_level = 0.95 ) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_coxph.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function: CoxPH Grob ‚Äî h_grob_coxph","title":"Helper Function: CoxPH Grob ‚Äî h_grob_coxph","text":"Grob rtable output h_tbl_coxph_pairwise","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_coxph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function: CoxPH Grob ‚Äî h_grob_coxph","text":"","code":"h_grob_coxph(   ...,   x = 0,   y = 0,   ttheme = gridExtra::ttheme_default(base_size = 12, padding = grid::unit(c(1, 0.5),     \"lines\"), core = list(bg_params = list(fill = c(\"grey95\", \"grey90\"), alpha = 0.5))) )"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_coxph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function: CoxPH Grob ‚Äî h_grob_coxph","text":"... arguments passed h_tbl_coxph_pairwise(). x numeric value 0 1 specifying x-location. y numeric value 0 1 specifying y-location. ttheme (list) see gridExtra::ttheme_default().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_coxph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function: CoxPH Grob ‚Äî h_grob_coxph","text":"","code":"if (FALSE) { library(dplyr) library(survival) library(grid)  grid::grid.newpage() grid.rect(gp = grid::gpar(lty = 1, col = \"pink\", fill = \"gray85\", lwd = 1)) data <- tern_ex_adtte %>%   filter(PARAMCD == \"OS\") %>%   mutate(is_event = CNSR == 0) tbl_grob <- h_grob_coxph(   df = data,   variables = list(tte = \"AVAL\", is_event = \"is_event\", arm = \"ARMCD\"),   control_coxph_pw = control_coxph(conf_level = 0.9), x = 0.5, y = 0.5 ) grid::grid.draw(tbl_grob) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_median_surv.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function: Survival Estimation Grob ‚Äî h_grob_median_surv","title":"Helper Function: Survival Estimation Grob ‚Äî h_grob_median_surv","text":"survival fit transformed grob containing table groups rows characterized N, median 95% confidence interval.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_median_surv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function: Survival Estimation Grob ‚Äî h_grob_median_surv","text":"","code":"h_grob_median_surv(   fit_km,   armval = \"All\",   x = 0.9,   y = 0.9,   ttheme = gridExtra::ttheme_default() )"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_median_surv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function: Survival Estimation Grob ‚Äî h_grob_median_surv","text":"fit_km (survfit) result survival::survfit(). armval (string) used strata name treatment arm variable one level. Default \"\". x numeric value 0 1 specifying x-location. y numeric value 0 1 specifying y-location. ttheme (list) see gridExtra::ttheme_default().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_median_surv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function: Survival Estimation Grob ‚Äî h_grob_median_surv","text":"","code":"if (FALSE) { library(dplyr) library(survival) library(grid)  grid::grid.newpage() grid.rect(gp = grid::gpar(lty = 1, col = \"pink\", fill = \"gray85\", lwd = 1)) tern_ex_adtte %>%   filter(PARAMCD == \"OS\") %>%   survfit(form = Surv(AVAL, 1 - CNSR) ~ ARMCD, data = .) %>%   h_grob_median_surv() %>%   grid::grid.draw() }"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_tbl_at_risk.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper: Patient-at-Risk Grobs ‚Äî h_grob_tbl_at_risk","title":"Helper: Patient-at-Risk Grobs ‚Äî h_grob_tbl_at_risk","text":"Two Graphical Objects obtained, one corresponding row labeling second number patient risk.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_tbl_at_risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper: Patient-at-Risk Grobs ‚Äî h_grob_tbl_at_risk","text":"","code":"h_grob_tbl_at_risk(data, annot_tbl, xlim)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_tbl_at_risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper: Patient-at-Risk Grobs ‚Äî h_grob_tbl_at_risk","text":"data (data.frame) survival data pre-processed h_data_plot. annot_tbl (data.frame) annotation prepared survival::summary.survfit() includes number patients risk given time points. xlim (numeric) maximum value x-axis (used ensure risk table aligns KM graph).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_tbl_at_risk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper: Patient-at-Risk Grobs ‚Äî h_grob_tbl_at_risk","text":"","code":"if (FALSE) { library(dplyr) library(survival) library(grid)  fit_km <- tern_ex_adtte %>%   filter(PARAMCD == \"OS\") %>%   survfit(form = Surv(AVAL, 1 - CNSR) ~ ARMCD, data = .)  data_plot <- h_data_plot(fit_km = fit_km)  xticks <- h_xticks(data = data_plot)  gg <- h_ggkm(   data = data_plot,   censor_show = TRUE,   xticks = xticks, xlab = \"Days\", ylab = \"Survival Probability\",   title = \"tt\", footnotes = \"ff\", yval = \"Survival\" )  # The annotation table reports the patient at risk for a given strata and # time (`xticks`). annot_tbl <- summary(fit_km, time = xticks) if (is.null(fit_km$strata)) {   annot_tbl <- with(annot_tbl, data.frame(n.risk = n.risk, time = time, strata = \"All\")) } else {   strata_lst <- strsplit(sub(\"=\", \"equals\", levels(annot_tbl$strata)), \"equals\")   levels(annot_tbl$strata) <- matrix(unlist(strata_lst), ncol = 2, byrow = TRUE)[, 2]   annot_tbl <- data.frame(     n.risk = annot_tbl$n.risk,     time = annot_tbl$time,     strata = annot_tbl$strata   ) }  # The annotation table is transformed into a grob. tbl <- h_grob_tbl_at_risk(data = data_plot, annot_tbl = annot_tbl, xlim = max(xticks))  # For the representation, the layout is estimated for which the decomposition # of the graphic element is necessary. g_el <- h_decompose_gg(gg) lyt <- h_km_layout(data = data_plot, g_el = g_el, title = \"t\", footnotes = \"f\")  grid::grid.newpage() pushViewport(viewport(layout = lyt, height = .95, width = .95)) grid.rect(gp = grid::gpar(lty = 1, col = \"purple\", fill = \"gray85\", lwd = 1)) pushViewport(viewport(layout.pos.row = 4, layout.pos.col = 2)) grid.rect(gp = grid::gpar(lty = 1, col = \"orange\", fill = \"gray85\", lwd = 1)) grid::grid.draw(tbl$at_risk) popViewport() pushViewport(viewport(layout.pos.row = 4, layout.pos.col = 1)) grid.rect(gp = grid::gpar(lty = 1, col = \"green3\", fill = \"gray85\", lwd = 1)) grid::grid.draw(tbl$label) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_y_annot.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper: Grid Object with y-axis Annotation ‚Äî h_grob_y_annot","title":"Helper: Grid Object with y-axis Annotation ‚Äî h_grob_y_annot","text":"Build y-axis annotation decomposed ggplot.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_y_annot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper: Grid Object with y-axis Annotation ‚Äî h_grob_y_annot","text":"","code":"h_grob_y_annot(ylab, yaxis)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_y_annot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper: Grid Object with y-axis Annotation ‚Äî h_grob_y_annot","text":"ylab (gtable) y-lab graphical object derived ggplot. yaxis (gtable) y-axis graphical object derived ggplot.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_grob_y_annot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper: Grid Object with y-axis Annotation ‚Äî h_grob_y_annot","text":"","code":"if (FALSE) { library(dplyr) library(survival) library(grid)  fit_km <- tern_ex_adtte %>%   filter(PARAMCD == \"OS\") %>%   survfit(form = Surv(AVAL, 1 - CNSR) ~ ARMCD, data = .) data_plot <- h_data_plot(fit_km = fit_km) xticks <- h_xticks(data = data_plot) gg <- h_ggkm(   data = data_plot,   censor_show = TRUE,   xticks = xticks, xlab = \"Days\", ylab = \"Survival Probability\",   title = \"title\", footnotes = \"footnotes\", yval = \"Survival\" )  g_el <- h_decompose_gg(gg)  grid::grid.newpage() pvp <- grid::plotViewport(margins = c(5, 4, 2, 20)) pushViewport(pvp) grid::grid.draw(h_grob_y_annot(ylab = g_el$ylab, yaxis = g_el$yaxis)) grid.rect(gp = grid::gpar(lty = 1, col = \"gray35\", fill = NA)) }"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_incidence_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions for Incidence Rate ‚Äî h_incidence_rate","text":"","code":"h_incidence_rate_normal(person_years, n_events, alpha = 0.05)  h_incidence_rate_normal_log(person_years, n_events, alpha = 0.05)  h_incidence_rate_exact(person_years, n_events, alpha = 0.05)  h_incidence_rate_byar(person_years, n_events, alpha = 0.05)  h_incidence_rate(person_years, n_events, control = control_incidence_rate())"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_incidence_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions for Incidence Rate ‚Äî h_incidence_rate","text":"person_years (numeric) total person-years risk. n_events (integer) number events observed. alpha (numeric) two-sided alpha-level confidence interval. control (list) parameters estimation details, specified using helper function control_incidence_rate(). Possible parameter options : conf_level: (proportion) confidence level estimated incidence rate. conf_type: (string)normal (default), normal_log, exact, byar confidence interval type. time_unit_input: (string)day, week, month, year (default) indicating time unit data input. time_unit_output: (numeric) time unit desired output (person-years).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_incidence_rate.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper Functions for Incidence Rate ‚Äî h_incidence_rate","text":"h_incidence_rate_normal(): Helper function estimate incidence rate associated confidence interval based normal approximation incidence rate. Unit one person-year. h_incidence_rate_normal_log(): Helper function estimate incidence rate associated confidence interval based normal approximation logarithm incidence rate. Unit one person-year. h_incidence_rate_exact(): Helper function estimate incidence rate associated exact confidence interval. Unit one person-year. h_incidence_rate_byar(): Helper function estimate incidence rate associated Byar's confidence interval. Unit one person-year. h_incidence_rate(): Helper function estimate incidence rate associated confidence interval.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_incidence_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Functions for Incidence Rate ‚Äî h_incidence_rate","text":"","code":"h_incidence_rate_normal(200, 2) #> $rate #> [1] 0.01 #>  #> $rate_ci #> [1] -0.003859038  0.023859038 #>   h_incidence_rate_normal_log(200, 2) #> $rate #> [1] 0.01 #>  #> $rate_ci #> [1] 0.002500977 0.039984382 #>   h_incidence_rate_exact(200, 2) #> $rate #> [1] 0.01 #>  #> $rate_ci #> [1] 0.001211046 0.036123438 #>   h_incidence_rate_byar(200, 2) #> $rate #> [1] 0.01 #>  #> $rate_ci #> [1] 0.001994207 0.032054171 #>   # Internal function - h_incidence_rate if (FALSE) { h_incidence_rate(200, 2)  h_incidence_rate(   200,   2,   control_incidence_rate(     conf_level = 0.9,     conf_type = \"normal_log\",     time_unit_output = 100   ) ) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_km_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper: KM Layout ‚Äî h_km_layout","title":"Helper: KM Layout ‚Äî h_km_layout","text":"Prepares (5 rows) x (2 cols) layout Kaplan-Meier curve.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_km_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper: KM Layout ‚Äî h_km_layout","text":"","code":"h_km_layout(data, g_el, title, footnotes, annot_at_risk = TRUE)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_km_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper: KM Layout ‚Äî h_km_layout","text":"data (data.frame) survival data pre-processed h_data_plot. g_el (list gtable) list obtained h_decompose_gg(). title (string) title plot. footnotes (string) footnotes plot. annot_at_risk (flag) compute add annotation table reporting number patient risk matching main grid Kaplan-Meier curve.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_km_layout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper: KM Layout ‚Äî h_km_layout","text":"layout corresponds grid two columns five rows unequal dimensions. dimension fixed, curve flexible accommodate remaining free space. left column gets annotation ggplot (y-axis) names strata patient risk tabulation. main constraint width columns must allow writing strata name. right column receive ggplot, legend, x-axis patient risk table.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_km_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper: KM Layout ‚Äî h_km_layout","text":"","code":"if (FALSE) { library(dplyr) library(survival)  fit_km <- tern_ex_adtte %>%   filter(PARAMCD == \"OS\") %>%   survfit(form = Surv(AVAL, 1 - CNSR) ~ ARMCD, data = .) data_plot <- h_data_plot(fit_km = fit_km) xticks <- h_xticks(data = data_plot) gg <- h_ggkm(   data = data_plot,   censor_show = TRUE,   xticks = xticks, xlab = \"Days\", ylab = \"Survival Probability\",   title = \"tt\", footnotes = \"ff\", yval = \"Survival\" ) g_el <- h_decompose_gg(gg) lyt <- h_km_layout(data = data_plot, g_el = g_el, title = \"t\", footnotes = \"f\") grid.show.layout(lyt) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_logistic_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Functions for Multi-Variable Logistic Regression ‚Äî h_logistic_regression","title":"Helper Functions for Multi-Variable Logistic Regression ‚Äî h_logistic_regression","text":"Helper functions used calculations logistic regression.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_logistic_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions for Multi-Variable Logistic Regression ‚Äî h_logistic_regression","text":"","code":"h_get_interaction_vars(fit_glm)  h_interaction_coef_name(   interaction_vars,   first_var_with_level,   second_var_with_level )  h_or_cat_interaction(   odds_ratio_var,   interaction_var,   fit_glm,   conf_level = 0.95 )  h_or_cont_interaction(   odds_ratio_var,   interaction_var,   fit_glm,   at = NULL,   conf_level = 0.95 )  h_or_interaction(   odds_ratio_var,   interaction_var,   fit_glm,   at = NULL,   conf_level = 0.95 )  h_simple_term_labels(terms, table)  h_interaction_term_labels(terms1, terms2, table, any = FALSE)  h_glm_simple_term_extract(x, fit_glm)  h_glm_interaction_extract(x, fit_glm)  h_glm_inter_term_extract(odds_ratio_var, interaction_var, fit_glm, ...)  h_logistic_simple_terms(x, fit_glm, conf_level = 0.95)  h_logistic_inter_terms(x, fit_glm, conf_level = 0.95, at = NULL)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_logistic_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions for Multi-Variable Logistic Regression ‚Äî h_logistic_regression","text":"fit_glm (glm) logistic regression model fitted stats::glm() \"binomial\" family. Limited functionality also available conditional logistic regression models fitted survival::clogit(), currently used extract_rsp_biomarkers(). interaction_vars (character length 2) interaction variable names. first_var_with_level (character length 2) first variable name interaction level. second_var_with_level (character length 2) second variable name interaction level. odds_ratio_var (string) odds ratio variable. interaction_var (string) interaction variable. conf_level (proportion) confidence level interval. (NULL numeric) optional values interaction variable. Otherwise median used. terms (character) simple terms. table (table) table containing numbers terms. terms1 (character) terms first dimension (rows). terms2 (character) terms second dimension (rows). (flag) whether term1 term2 can fulfilled count number patients. case can scalar (strings). x (string character) variable interaction term fit_glm (depending helper function). ... additional arguments lower level functions.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_logistic_regression.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper Functions for Multi-Variable Logistic Regression ‚Äî h_logistic_regression","text":"h_get_interaction_vars(): Helper function extract interaction variable names fitted model assuming one interaction term. h_interaction_coef_name(): Helper function get right coefficient name interaction variable names given levels. main value order first second variable checked interaction_vars input. h_or_cat_interaction(): Helper function calculate odds ratio estimates case odds ratio interaction variable categorical. h_or_cont_interaction(): Helper function calculate odds ratio estimates case either odds ratio interaction variable continuous. h_or_interaction(): Helper function calculate odds ratio estimates case interaction. wrapper h_or_cont_interaction() h_or_cat_interaction(). h_simple_term_labels(): Helper function construct term labels simple terms table numbers patients. h_interaction_term_labels(): Helper function construct term labels interaction terms table numbers patients. h_glm_simple_term_extract(): Helper function tabulate main effect results (conditional) logistic regression model. h_glm_interaction_extract(): Helper function tabulate interaction term results logistic regression model. h_glm_inter_term_extract(): Helper function tabulate interaction results logistic regression model. basically wrapper h_or_interaction() h_glm_simple_term_extract() puts results right data frame format. h_logistic_simple_terms(): Helper function tabulate results including odds ratios confidence intervals simple terms. h_logistic_inter_terms(): Helper function tabulate results including odds ratios confidence intervals interaction terms.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_logistic_regression.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Helper Functions for Multi-Variable Logistic Regression ‚Äî h_logistic_regression","text":"provide function case variables continuous arise table, treatment arm variable always involved categorical.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_logistic_regression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Functions for Multi-Variable Logistic Regression ‚Äî h_logistic_regression","text":"","code":"library(dplyr) library(broom)  adrs_f <- tern_ex_adrs %>%   filter(PARAMCD == \"BESRSPI\") %>%   filter(RACE %in% c(\"ASIAN\", \"WHITE\", \"BLACK OR AFRICAN AMERICAN\")) %>%   mutate(     Response = case_when(AVALC %in% c(\"PR\", \"CR\") ~ 1, TRUE ~ 0),     RACE = factor(RACE),     SEX = factor(SEX)   ) formatters::var_labels(adrs_f) <- c(formatters::var_labels(tern_ex_adrs), Response = \"Response\") mod1 <- fit_logistic(   data = adrs_f,   variables = list(     response = \"Response\",     arm = \"ARMCD\",     covariates = c(\"AGE\", \"RACE\")   ) ) #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred mod2 <- fit_logistic(   data = adrs_f,   variables = list(     response = \"Response\",     arm = \"ARMCD\",     covariates = c(\"AGE\", \"RACE\"),     interaction = \"AGE\"   ) ) #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred h_glm_simple_term_extract(\"AGE\", mod1) #>   variable variable_label term term_label interaction interaction_label #> 1      AGE            Age  AGE        Age                               #>   reference reference_label  estimate  std_error df     pvalue #> 1                           0.1698216 0.09524116  1 0.07457501 #>   is_variable_summary is_term_summary #> 1               FALSE            TRUE h_glm_simple_term_extract(\"ARMCD\", mod1) #>   variable   variable_label  term              term_label interaction #> 1    ARMCD Planned Arm Code ARM A Reference ARM A, n = 64             #> 2    ARMCD Planned Arm Code ARM B           ARM B, n = 68             #> 3    ARMCD Planned Arm Code ARM C           ARM C, n = 52             #>   interaction_label reference reference_label  estimate std_error df    pvalue #> 1                                                                  2 0.3004308 #> 2                                             -1.774769  1.144405  1 0.1209443 #> 3                                               17.1922  3626.588  1 0.9962176 #>   is_variable_summary is_term_summary #> 1                TRUE           FALSE #> 2               FALSE            TRUE #> 3               FALSE            TRUE  h_glm_interaction_extract(\"ARMCD:AGE\", mod2) #>    variable                        variable_label  term              term_label #> 1 ARMCD:AGE Interaction of Planned Arm Code * Age ARM A Reference ARM A, n = 64 #> 2 ARMCD:AGE Interaction of Planned Arm Code * Age ARM B           ARM B, n = 68 #> 3 ARMCD:AGE Interaction of Planned Arm Code * Age ARM C           ARM C, n = 52 #>   interaction interaction_label reference reference_label   estimate std_error #> 1                                                                              #> 2                                                          0.3081205 0.2062392 #> 3                                                         0.02948826  548.5923 #>   df    pvalue is_variable_summary is_term_summary #> 1  2 0.3275837                TRUE           FALSE #> 2  1 0.1351767               FALSE            TRUE #> 3  1 0.9999571               FALSE            TRUE  h_glm_inter_term_extract(\"AGE\", \"ARMCD\", mod2) #>   variable variable_label term term_label interaction interaction_label #> 1      AGE            Age  AGE        Age                               #> 2      AGE            Age  AGE        Age       ARMCD  Planned Arm Code #> 3      AGE            Age  AGE        Age       ARMCD  Planned Arm Code #> 4      AGE            Age  AGE        Age       ARMCD  Planned Arm Code #>   reference reference_label    estimate std_error odds_ratio       lcl      ucl #> 1                           -0.03873898 0.1514322         NA        NA       NA #> 2     ARM A           ARM A          NA        NA  0.9620018 0.7149514 1.294420 #> 3     ARM B           ARM B          NA        NA  1.3091545 1.0021802 1.710157 #> 4     ARM C           ARM C          NA        NA  0.9907919 0.0000000      Inf #>   df   pvalue is_variable_summary is_term_summary is_reference_summary #> 1  1 0.798092               FALSE            TRUE                FALSE #> 2 NA       NA               FALSE           FALSE                 TRUE #> 3 NA       NA               FALSE           FALSE                 TRUE #> 4 NA       NA               FALSE           FALSE                 TRUE  h_logistic_simple_terms(\"AGE\", mod1) #>   variable variable_label term term_label interaction interaction_label #> 1      AGE            Age  AGE        Age                               #>   reference reference_label  estimate  std_error df     pvalue #> 1                           0.1698216 0.09524116  1 0.07457501 #>   is_variable_summary is_term_summary odds_ratio       lcl      ucl #> 1               FALSE            TRUE   1.185093 0.9832935 1.428308 #>                     ci #> 1 0.9832935, 1.4283084 h_logistic_inter_terms(c(\"RACE\", \"AGE\", \"ARMCD\", \"AGE:ARMCD\"), mod2) #>        variable                        variable_label                      term #> 1          RACE                                  Race                     ASIAN #> 2          RACE                                  Race BLACK OR AFRICAN AMERICAN #> 3          RACE                                  Race                     WHITE #> 13        ARMCD                      Planned Arm Code                     ARM A #> 23        ARMCD                      Planned Arm Code                     ARM B #> ARM B     ARMCD                      Planned Arm Code                     ARM B #> 33        ARMCD                      Planned Arm Code                     ARM C #> ARM C     ARMCD                      Planned Arm Code                     ARM C #> 11          AGE                                   Age                       AGE #> 21          AGE                                   Age                       AGE #> 31          AGE                                   Age                       AGE #> 4           AGE                                   Age                       AGE #> 12    AGE:ARMCD Interaction of Planned Arm Code * Age                     ARM A #> 22    AGE:ARMCD Interaction of Planned Arm Code * Age                     ARM B #> 32    AGE:ARMCD Interaction of Planned Arm Code * Age                     ARM C #>                              term_label interaction interaction_label reference #> 1              Reference ASIAN, n = 110                                         #> 2     BLACK OR AFRICAN AMERICAN, n = 40                                         #> 3                         WHITE, n = 34                                         #> 13              Reference ARM A, n = 64                                         #> 23                        ARM B, n = 68                                         #> ARM B                     ARM B, n = 68         AGE               Age        35 #> 33                        ARM C, n = 52                                         #> ARM C                     ARM C, n = 52         AGE               Age        35 #> 11                                  Age                                         #> 21                                  Age       ARMCD  Planned Arm Code     ARM A #> 31                                  Age       ARMCD  Planned Arm Code     ARM B #> 4                                   Age       ARMCD  Planned Arm Code     ARM C #> 12              Reference ARM A, n = 64                                         #> 22                        ARM B, n = 68                                         #> 32                        ARM C, n = 52                                         #>       reference_label    estimate std_error df     pvalue odds_ratio        lcl #> 1                                            2  0.9361139                       #> 2                        18.15018  3944.701  1  0.9963288   76299564          0 #> 3                      -0.3727152  1.025808  1  0.7163522  0.6888614 0.09224926 #> 13                                           2   0.253914         NA         NA #> 23                      -11.52715   6.96188  1 0.09777185         NA         NA #> ARM B              35          NA        NA NA         NA  0.4757148 0.03361147 #> 33                       16.33327  20278.39  1  0.9993573         NA         NA #> ARM C              35          NA        NA NA         NA   34808099          0 #> 11                    -0.03873898 0.1514322  1   0.798092         NA         NA #> 21              ARM A          NA        NA NA         NA  0.9620018  0.7149514 #> 31              ARM B          NA        NA NA         NA   1.309155    1.00218 #> 4               ARM C          NA        NA NA         NA  0.9907919          0 #> 12                                          NA         NA         NA         NA #> 22                      0.3081205 0.2062392  1  0.1351767         NA         NA #> 32                     0.02948826  548.5923  1  0.9999571         NA         NA #>            ucl is_variable_summary is_term_summary is_reference_summary #> 1                             TRUE           FALSE                FALSE #> 2          Inf               FALSE            TRUE                FALSE #> 3     5.143998               FALSE            TRUE                FALSE #> 13          NA                TRUE           FALSE                FALSE #> 23          NA               FALSE            TRUE                FALSE #> ARM B 6.732956               FALSE           FALSE                 TRUE #> 33          NA               FALSE            TRUE                FALSE #> ARM C      Inf               FALSE           FALSE                 TRUE #> 11          NA               FALSE            TRUE                FALSE #> 21     1.29442               FALSE           FALSE                 TRUE #> 31    1.710157               FALSE           FALSE                 TRUE #> 4          Inf               FALSE           FALSE                 TRUE #> 12          NA                TRUE           FALSE                FALSE #> 22          NA               FALSE            TRUE                FALSE #> 32          NA               FALSE            TRUE                FALSE #>                           ci #> 1                            #> 2                     0, Inf #> 3     0.09224926, 5.14399810 #> 13                    NA, NA #> 23                    NA, NA #> ARM B 0.03361147, 6.73295611 #> 33                    NA, NA #> ARM C                 0, Inf #> 11                    NA, NA #> 21      0.7149514, 1.2944200 #> 31        1.002180, 1.710157 #> 4                     0, Inf #> 12                    NA, NA #> 22                    NA, NA #> 32                    NA, NA"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_map_for_count_abnormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to create a map dataframe that can be used in trim_levels_to_map split function. ‚Äî h_map_for_count_abnormal","title":"Helper Function to create a map dataframe that can be used in trim_levels_to_map split function. ‚Äî h_map_for_count_abnormal","text":"Helper Function create map dataframe input dataset, can used argument trim_levels_to_map split function. Based different method, map constructed differently.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_map_for_count_abnormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to create a map dataframe that can be used in trim_levels_to_map split function. ‚Äî h_map_for_count_abnormal","text":"","code":"h_map_for_count_abnormal(   df,   variables = list(anl = \"ANRIND\", split_rows = c(\"PARAM\"), range_low = \"ANRLO\",     range_high = \"ANRHI\"),   abnormal = list(low = c(\"LOW\", \"LOW LOW\"), high = c(\"HIGH\", \"HIGH HIGH\")),   method = c(\"default\", \"range\"),   na_level = \"<Missing>\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_map_for_count_abnormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to create a map dataframe that can be used in trim_levels_to_map split function. ‚Äî h_map_for_count_abnormal","text":"df (data.frame) data set containing analysis variables. variables (named list string) list additional analysis variables. abnormal (named list) identifying abnormal range level(s) df. Based levels abnormality input dataset, can something like list(Low = \"LOW LOW\", High = \"HIGH HIGH\") abnormal = list(Low = \"LOW\", High = \"HIGH\")) method (string) indicates returned map constructed. Can either \"default\" \"range\". method \"default\", returned map abnormal directions observed df, records normal values excluded avoid error creating layout. method \"range\", returned map based rule least one observation low range > 0 low direction least one observation high range missing high direction. na_level (string) used replace NA empty values factors custom string.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_map_for_count_abnormal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function to create a map dataframe that can be used in trim_levels_to_map split function. ‚Äî h_map_for_count_abnormal","text":"","code":"adlb <- df_explicit_na(tern_ex_adlb)  h_map_for_count_abnormal(   df = adlb,   variables = list(anl = \"ANRIND\", split_rows = c(\"LBCAT\", \"PARAM\")),   abnormal = list(low = c(\"LOW\"), high = c(\"HIGH\")),   method = \"default\",   na_level = \"<Missing>\" ) #>        LBCAT                                PARAM ANRIND #> 1  CHEMISTRY Alanine Aminotransferase Measurement    LOW #> 4  CHEMISTRY Alanine Aminotransferase Measurement   HIGH #> 7  CHEMISTRY Alanine Aminotransferase Measurement NORMAL #> 2  CHEMISTRY       C-Reactive Protein Measurement    LOW #> 3  CHEMISTRY       C-Reactive Protein Measurement   HIGH #> 8  CHEMISTRY       C-Reactive Protein Measurement NORMAL #> 5 IMMUNOLOGY         Immunoglobulin A Measurement    LOW #> 6 IMMUNOLOGY         Immunoglobulin A Measurement   HIGH #> 9 IMMUNOLOGY         Immunoglobulin A Measurement NORMAL  df <- data.frame(   USUBJID = c(rep(\"1\", 4), rep(\"2\", 4), rep(\"3\", 4)),   AVISIT = c(     rep(\"WEEK 1\", 2),     rep(\"WEEK 2\", 2),     rep(\"WEEK 1\", 2),     rep(\"WEEK 2\", 2),     rep(\"WEEK 1\", 2),     rep(\"WEEK 2\", 2)   ),   PARAM = rep(c(\"ALT\", \"CPR\"), 6),   ANRIND = c(     \"NORMAL\", \"NORMAL\", \"LOW\",     \"HIGH\", \"LOW\", \"LOW\", \"HIGH\", \"HIGH\", rep(\"NORMAL\", 4)   ),   ANRLO = rep(5, 12),   ANRHI = rep(20, 12) ) df$ANRIND <- factor(df$ANRIND, levels = c(\"LOW\", \"HIGH\", \"NORMAL\")) h_map_for_count_abnormal(   df = df,   variables = list(     anl = \"ANRIND\",     split_rows = c(\"PARAM\"),     range_low = \"ANRLO\",     range_high = \"ANRHI\"   ),   abnormal = list(low = c(\"LOW\"), high = c(\"HIGH\")),   method = \"range\",   na_level = \"<Missing>\" ) #>   PARAM ANRIND #> 1   ALT    LOW #> 3   ALT   HIGH #> 5   ALT NORMAL #> 2   CPR    LOW #> 4   CPR   HIGH #> 6   CPR NORMAL"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_odds_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Functions for Odds Ratio Estimation ‚Äî h_odds_ratio","title":"Helper Functions for Odds Ratio Estimation ‚Äî h_odds_ratio","text":"Functions calculate odds ratios estimate_odds_ratio().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_odds_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions for Odds Ratio Estimation ‚Äî h_odds_ratio","text":"","code":"or_glm(data, conf_level)  or_clogit(data, conf_level)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_odds_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions for Odds Ratio Estimation ‚Äî h_odds_ratio","text":"data (data.frame) data frame containing least variables rsp grp, optionally strata or_clogit(). conf_level (proportion) confidence level interval.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_odds_ratio.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper Functions for Odds Ratio Estimation ‚Äî h_odds_ratio","text":"or_glm(): estimates odds ratio based stats::glm(). Note must exactly 2 groups data specified grp variable. or_clogit(): estimates odds ratio based survival::clogit(). done whole data set including groups, since results pairwise comparisons groups.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_odds_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Functions for Odds Ratio Estimation ‚Äî h_odds_ratio","text":"","code":"# Data with 2 groups. data <- data.frame(   rsp = as.logical(c(1, 1, 0, 1, 0, 0, 1, 1)),   grp = letters[c(1, 1, 1, 2, 2, 2, 1, 2)],   strata = letters[c(1, 2, 1, 2, 2, 2, 1, 2)],   stringsAsFactors = TRUE )  # Odds ratio based on glm. or_glm(data, conf_level = 0.95) #> $or_ci #>        est        lcl        ucl  #> 0.33333333 0.01669735 6.65441589  #>  #> $n_tot #> n_tot  #>     8  #>  # Data with 3 groups. data <- data.frame(   rsp = as.logical(c(1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0)),   grp = letters[c(1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3)],   strata = LETTERS[c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)],   stringsAsFactors = TRUE )  # Odds ratio based on stratified estimation by conditional logistic regression. or_clogit(data, conf_level = 0.95) #> $or_ci #> $or_ci$b #>        est        lcl        ucl  #> 0.28814553 0.02981009 2.78522598  #>  #> $or_ci$c #>       est       lcl       ucl  #> 0.5367919 0.0673365 4.2791881  #>  #>  #> $n_tot #> n_tot  #>    20  #>"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_pkparam_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort PK PARAM variable ‚Äî h_pkparam_sort","text":"","code":"h_pkparam_sort(pk_data, key_var = \"PARAMCD\")"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_pkparam_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort PK PARAM variable ‚Äî h_pkparam_sort","text":"pk_data (data.frame) Pharmacokinetics dataframe key_var (character) key variable used merge pk_data metadata created d_pkparam()","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_pkparam_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort PK PARAM variable ‚Äî h_pkparam_sort","text":"dataframe PK PARAM variable ordered","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_pkparam_sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort PK PARAM variable ‚Äî h_pkparam_sort","text":"","code":"library(dplyr)  adpp <- tern_ex_adpp %>% mutate(PKPARAM = factor(paste0(PARAM, \" (\", AVALU, \")\"))) pk_ordered_data <- h_pkparam_sort(adpp)"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_prop_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions to Calculate Proportion Difference ‚Äî h_prop_diff","text":"","code":"prop_diff_wald(rsp, grp, conf_level = 0.95, correct = FALSE)  prop_diff_ha(rsp, grp, conf_level)  prop_diff_nc(rsp, grp, conf_level, correct = FALSE)  prop_diff_cmh(rsp, grp, strata, conf_level = 0.95)  prop_diff_strat_nc(   rsp,   grp,   strata,   weights_method = c(\"cmh\", \"wilson_h\"),   conf_level = 0.95,   correct = FALSE )"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_prop_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions to Calculate Proportion Difference ‚Äî h_prop_diff","text":"rsp (logical) whether subject responder . grp (factor) vector assigning observations one two groups (e.g. reference treatment group). conf_level (proportion) confidence level interval. correct logical include continuity correction. information, see stats::prop.test(). strata (factor) variable one level per stratum length rsp. weights_method (string) weights method. Can either \"cmh\" \"heuristic\" directs way weights estimated.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_prop_diff.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper Functions to Calculate Proportion Difference ‚Äî h_prop_diff","text":"prop_diff_wald(): Wald interval follows usual textbook definition single proportion confidence interval using normal approximation. possible include continuity correction Wald's interval. prop_diff_ha(): Anderson-Hauck confidence interval. prop_diff_nc(): Newcombe confidence interval. based Wilson score confidence interval single binomial proportion. prop_diff_cmh(): Calculates weighted difference. defined difference response rates experimental treatment group control treatment group, adjusted stratification factors applying Cochran-Mantel-Haenszel (CMH) weights. CMH chi-squared test, use stats::mantelhaen.test(). prop_diff_strat_nc(): Calculates stratified Newcombe confidence interval difference response rates experimental treatment group control treatment group, adjusted stratification factors. implementation follows closely one proposed Yan Su (2010) . Weights can estimated heuristic proposed prop_strat_wilson() CMH-derived weights (see prop_diff_cmh()).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_prop_diff.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Helper Functions to Calculate Proportion Difference ‚Äî h_prop_diff","text":"Yan X, Su XG (2010). ‚ÄúStratified Wilson Newcombe Confidence Intervals Multiple Binomial Proportions.‚Äù Stat. Biopharm. Res., 2(3), 329--335.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_prop_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Functions to Calculate Proportion Difference ‚Äî h_prop_diff","text":"","code":"# Wald confidence interval set.seed(2) rsp <- sample(c(TRUE, FALSE), replace = TRUE, size = 20) grp <- factor(c(rep(\"A\", 10), rep(\"B\", 10))) prop_diff_wald(rsp = rsp, grp = grp, conf_level = 0.95, correct = FALSE) #> $diff #> [1] 0 #>  #> $diff_ci #> [1] -0.4382613  0.4382613 #>   # Anderson-Hauck confidence interval ## \"Mid\" case: 3/4 respond in group A, 1/2 respond in group B. rsp <- c(TRUE, FALSE, FALSE, TRUE, TRUE, TRUE) grp <- factor(c(\"A\", \"B\", \"A\", \"B\", \"A\", \"A\"), levels = c(\"B\", \"A\")) prop_diff_ha(rsp = rsp, grp = grp, conf_level = 0.90) #> $diff #> [1] 0.25 #>  #> $diff_ci #> [1] -0.9195011  1.0000000 #>   ## Edge case: Same proportion of response in A and B. rsp <- c(TRUE, FALSE, TRUE, FALSE) grp <- factor(c(\"A\", \"A\", \"B\", \"B\"), levels = c(\"A\", \"B\")) prop_diff_ha(rsp = rsp, grp = grp, conf_level = 0.6) #> $diff #> [1] 0 #>  #> $diff_ci #> [1] -0.8451161  0.8451161 #>   # Newcombe confidence interval  set.seed(1) rsp <- c(   sample(c(TRUE, FALSE), size = 40, prob = c(3 / 4, 1 / 4), replace = TRUE),   sample(c(TRUE, FALSE), size = 40, prob = c(1 / 2, 1 / 2), replace = TRUE) ) grp <- factor(rep(c(\"A\", \"B\"), each = 40), levels = c(\"B\", \"A\")) table(rsp, grp) #>        grp #> rsp      B  A #>   FALSE 20 10 #>   TRUE  20 30 prop_diff_nc(rsp = rsp, grp = grp, conf_level = 0.9) #> $diff #> [1] 0.25 #>  #> $diff_ci #> [1] 0.07193388 0.40725819 #>   # Cochran-Mantel-Haenszel confidence interval  set.seed(2) rsp <- sample(c(TRUE, FALSE), 100, TRUE) grp <- sample(c(\"Placebo\", \"Treatment\"), 100, TRUE) grp <- factor(grp, levels = c(\"Placebo\", \"Treatment\")) strata_data <- data.frame(   \"f1\" = sample(c(\"a\", \"b\"), 100, TRUE),   \"f2\" = sample(c(\"x\", \"y\", \"z\"), 100, TRUE),   stringsAsFactors = TRUE )  prop_diff_cmh(   rsp = rsp, grp = grp, strata = interaction(strata_data),   conf_level = 0.90 ) #> $prop #>   Placebo Treatment  #> 0.5331117 0.3954251  #>  #> $prop_ci #> $prop_ci$Placebo #> [1] 0.4306536 0.6355698 #>  #> $prop_ci$Treatment #> [1] 0.2890735 0.5017768 #>  #>  #> $diff #> [1] -0.1376866 #>  #> $diff_ci #> [1] -0.285363076  0.009989872 #>  #> $weights #>       a.x       b.x       a.y       b.y       a.z       b.z  #> 0.1148388 0.2131696 0.1148388 0.2131696 0.1767914 0.1671918  #>  #> $n1 #> a.x b.x a.y b.y a.z b.z  #>   4  11   8  11  13  11  #>  #> $n2 #> a.x b.x a.y b.y a.z b.z  #>   8   9   4   9   6   6  #>   # Stratified Newcombe confidence interval  set.seed(2) data_set <- data.frame(   \"rsp\" = sample(c(TRUE, FALSE), 100, TRUE),   \"f1\" = sample(c(\"a\", \"b\"), 100, TRUE),   \"f2\" = sample(c(\"x\", \"y\", \"z\"), 100, TRUE),   \"grp\" = sample(c(\"Placebo\", \"Treatment\"), 100, TRUE),   stringsAsFactors = TRUE )  prop_diff_strat_nc(   rsp = data_set$rsp, grp = data_set$grp, strata = interaction(data_set[2:3]),   weights_method = \"cmh\",   conf_level = 0.90 ) #> $diff #> [1] -0.05777672 #>  #> $diff_ci #>      lower      upper  #> -0.2236537  0.1119331  #>   prop_diff_strat_nc(   rsp = data_set$rsp, grp = data_set$grp, strata = interaction(data_set[2:3]),   weights_method = \"wilson_h\",   conf_level = 0.90 ) #> $diff #> [1] -0.07771884 #>  #> $diff_ci #>      lower      upper  #> -0.2540844  0.1027720  #>"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_prop_diff_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Functions to Test Proportion Differences ‚Äî h_prop_diff_test","title":"Helper Functions to Test Proportion Differences ‚Äî h_prop_diff_test","text":"Helper functions implement various tests difference two proportions.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_prop_diff_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions to Test Proportion Differences ‚Äî h_prop_diff_test","text":"","code":"prop_chisq(tbl)  prop_cmh(ary)  prop_schouten(tbl)  prop_fisher(tbl)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_prop_diff_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions to Test Proportion Differences ‚Äî h_prop_diff_test","text":"tbl (matrix) matrix two groups rows binary response (TRUE/FALSE) columns. ary (array, 3 dimensions) array two groups rows, binary response (TRUE/FALSE) columns, strata third dimension.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_prop_diff_test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper Functions to Test Proportion Differences ‚Äî h_prop_diff_test","text":"prop_chisq(): performs Chi-Squared test. Internally calls stats::prop.test(). prop_cmh(): performs stratified Cochran-Mantel-Haenszel test. Internally calls stats::mantelhaen.test(). Note strata less two observations automatically discarded. prop_schouten(): performs Chi-Squared test Schouten correction. prop_fisher(): performs Fisher's exact test. Internally calls stats::fisher.test().","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_prop_diff_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Functions to Test Proportion Differences ‚Äî h_prop_diff_test","text":"","code":"# Non-stratified proportion difference test  ## Data A <- 20 B <- 20 set.seed(1) rsp <- c(   sample(c(TRUE, FALSE), size = A, prob = c(3 / 4, 1 / 4), replace = TRUE),   sample(c(TRUE, FALSE), size = A, prob = c(1 / 2, 1 / 2), replace = TRUE) ) grp <- c(rep(\"A\", A), rep(\"B\", B)) tbl <- table(grp, rsp)  ## Chi-Squared test # Internal function - prop_chisq if (FALSE) { prop_chisq(tbl) }  # Stratified proportion difference test  ## Data rsp <- sample(c(TRUE, FALSE), 100, TRUE) grp <- factor(rep(c(\"A\", \"B\"), each = 50)) strata <- factor(rep(c(\"V\", \"W\", \"X\", \"Y\", \"Z\"), each = 20)) tbl <- table(grp, rsp, strata)  ## Cochran-Mantel-Haenszel test # Internal function - prop_cmh if (FALSE) { prop_cmh(tbl) }  ## Chi-Squared test + Schouten correction. # Internal function - prop_schouten if (FALSE) { prop_schouten(tbl) }  ## Fisher's exact test # Internal function - prop_fisher if (FALSE) { prop_fisher(tbl) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_proportions.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Functions for Calculating Proportion Confidence Intervals ‚Äî h_proportions","title":"Helper Functions for Calculating Proportion Confidence Intervals ‚Äî h_proportions","text":"Functions calculate different proportion confidence intervals use estimate_proportion().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_proportions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions for Calculating Proportion Confidence Intervals ‚Äî h_proportions","text":"","code":"prop_wilson(rsp, conf_level, correct = FALSE)  prop_strat_wilson(   rsp,   strata,   weights = NULL,   conf_level = 0.95,   max_iterations = NULL,   correct = FALSE )  prop_clopper_pearson(rsp, conf_level)  prop_wald(rsp, conf_level, correct = FALSE)  prop_agresti_coull(rsp, conf_level)  prop_jeffreys(rsp, conf_level)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_proportions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions for Calculating Proportion Confidence Intervals ‚Äî h_proportions","text":"rsp (logical) whether subject responder . conf_level (proportion) confidence level interval. correct (flag) apply continuity correction. strata (factor) variable one level per stratum length rsp. weights (numeric NULL) weights level strata. NULL, estimated using iterative algorithm proposed Yan Su (2010)  minimizes weighted squared length confidence interval. max_iterations (count) maximum number iterations iterative procedure used find estimates optimal weights.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_proportions.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper Functions for Calculating Proportion Confidence Intervals ‚Äî h_proportions","text":"prop_wilson(): Wilson interval calls stats::prop.test(). Also referred Wilson score interval. prop_strat_wilson(): Calculates stratified Wilson confidence interval unequal proportions described Yan Su (2010) prop_clopper_pearson(): Clopper-Pearson interval calls stats::binom.test(). Also referred exact method. prop_wald(): Wald interval follows usual textbook definition single proportion confidence interval using normal approximation. prop_agresti_coull(): Agresti-Coull interval created Alan Agresti Brent Coull can understood (95% CI) adding two successes two failures data, using Wald formula construct CI. prop_jeffreys(): Jeffreys interval equal-tailed interval based non-informative Jeffreys prior binomial proportion.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_proportions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Helper Functions for Calculating Proportion Confidence Intervals ‚Äî h_proportions","text":"Yan X, Su XG (2010). ‚ÄúStratified Wilson Newcombe Confidence Intervals Multiple Binomial Proportions.‚Äù Stat. Biopharm. Res., 2(3), 329--335.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_proportions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Functions for Calculating Proportion Confidence Intervals ‚Äî h_proportions","text":"","code":"rsp <- c(   TRUE, TRUE, TRUE, TRUE, TRUE,   FALSE, FALSE, FALSE, FALSE, FALSE ) prop_wilson(rsp, conf_level = 0.9) #> [1] 0.2692718 0.7307282  # Stratified Wilson confidence interval with unequal probabilities  set.seed(1) rsp <- sample(c(TRUE, FALSE), 100, TRUE) strata_data <- data.frame(   \"f1\" = sample(c(\"a\", \"b\"), 100, TRUE),   \"f2\" = sample(c(\"x\", \"y\", \"z\"), 100, TRUE),   stringsAsFactors = TRUE ) strata <- interaction(strata_data) n_strata <- ncol(table(rsp, strata)) # Number of strata  prop_strat_wilson(   rsp = rsp, strata = strata,   conf_level = 0.90 ) #> $conf_int #>     lower     upper  #> 0.4072891 0.5647887  #>  #> $weights #>       a.x       b.x       a.y       b.y       a.z       b.z  #> 0.2074199 0.1776464 0.1915610 0.1604678 0.1351096 0.1277952  #>   # Not automatic setting of weights prop_strat_wilson(   rsp = rsp, strata = strata,   weights = rep(1 / n_strata, n_strata),   conf_level = 0.90 ) #> $conf_int #>     lower     upper  #> 0.4190436 0.5789733  #>  prop_clopper_pearson(rsp, conf_level = .95) #> [1] 0.3886442 0.5919637  prop_wald(rsp, conf_level = 0.95) #> [1] 0.3920214 0.5879786 prop_wald(rsp, conf_level = 0.95, correct = TRUE) #> [1] 0.3870214 0.5929786  prop_agresti_coull(rsp, conf_level = 0.95) #> [1] 0.3942193 0.5865206  prop_jeffreys(rsp, conf_level = 0.95) #> [1] 0.3934779 0.5870917"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_response_biomarkers_subgroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Functions for Tabulating Biomarker Effects on Binary Response by Subgroup ‚Äî h_response_biomarkers_subgroups","title":"Helper Functions for Tabulating Biomarker Effects on Binary Response by Subgroup ‚Äî h_response_biomarkers_subgroups","text":"Helper functions documented separately confuse user reading user-facing functions.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_response_biomarkers_subgroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions for Tabulating Biomarker Effects on Binary Response by Subgroup ‚Äî h_response_biomarkers_subgroups","text":"","code":"h_rsp_to_logistic_variables(variables, biomarker)  h_logistic_mult_cont_df(variables, data, control = control_logistic())  h_tab_rsp_one_biomarker(df, vars)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_response_biomarkers_subgroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions for Tabulating Biomarker Effects on Binary Response by Subgroup ‚Äî h_response_biomarkers_subgroups","text":"variables (named list string) list additional analysis variables. biomarker (string) name biomarker variable. data (data.frame) dataset containing variables summarize. control (named list) controls response definition confidence level produced control_logistic(). df (data.frame) results single biomarker, part returned extract_rsp_biomarkers() (needs couple columns added high-level function relative returned h_logistic_mult_cont_df(), see example). vars (character) name statistics reported among n_tot (total number patients per group), n_rsp (total number responses per group), prop (total response proportion per group), (odds ratio), ci (confidence interval odds ratio) pval (p value effect). Note, statistics n_tot, ci required.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_response_biomarkers_subgroups.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper Functions for Tabulating Biomarker Effects on Binary Response by Subgroup ‚Äî h_response_biomarkers_subgroups","text":"h_rsp_to_logistic_variables(): helps converting \"response\" function variable list \"logistic regression\" variable list. reason currently inconsistency variable names accepted extract_rsp_subgroups() fit_logistic(). h_logistic_mult_cont_df(): prepares estimates number responses, patients overall response rate, well odds ratio estimates, confidence intervals p-values, multiple biomarkers given single data set. variables corresponds names variables found data, passed named list requires elements rsp biomarkers (vector continuous biomarker variables) optionally covariates strat. h_tab_rsp_one_biomarker(): prepares single sub-table given df_sub containing results single biomarker.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_response_biomarkers_subgroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Functions for Tabulating Biomarker Effects on Binary Response by Subgroup ‚Äî h_response_biomarkers_subgroups","text":"","code":"library(dplyr) library(forcats)  adrs <- tern_ex_adrs adrs_labels <- formatters::var_labels(adrs)  adrs_f <- adrs %>%   filter(PARAMCD == \"BESRSPI\") %>%   mutate(rsp = AVALC == \"CR\") formatters::var_labels(adrs_f) <- c(adrs_labels, \"Response\")  # This is how the variable list is converted internally. h_rsp_to_logistic_variables(   variables = list(     rsp = \"RSP\",     covariates = c(\"A\", \"B\"),     strat = \"D\"   ),   biomarker = \"AGE\" ) #> $response #> [1] \"RSP\" #>  #> $arm #> [1] \"AGE\" #>  #> $covariates #> [1] \"A\" \"B\" #>  #> $strata #> [1] \"D\" #>   # For a single population, estimate separately the effects # of two biomarkers. df <- h_logistic_mult_cont_df(   variables = list(     rsp = \"rsp\",     biomarkers = c(\"BMRKR1\", \"AGE\"),     covariates = \"SEX\"   ),   data = adrs_f ) df #>   biomarker              biomarker_label n_tot n_rsp prop        or       lcl #> 1    BMRKR1 Continuous Level Biomarker 1   200   164 0.82 0.9755036 0.8804862 #> 2       AGE                          Age   200   164 0.82 0.9952416 0.9462617 #>        ucl conf_level      pval     pval_label #> 1 1.080775       0.95 0.6352602 p-value (Wald) #> 2 1.046757       0.95 0.8530389 p-value (Wald)  # If the data set is empty, still the corresponding rows with missings are returned. h_coxreg_mult_cont_df(   variables = list(     rsp = \"rsp\",     biomarkers = c(\"BMRKR1\", \"AGE\"),     covariates = \"SEX\",     strat = \"STRATA1\"   ),   data = adrs_f[NULL, ] ) #>   biomarker              biomarker_label n_tot n_tot_events median hr lcl ucl #> 1    BMRKR1 Continuous Level Biomarker 1     0            0     NA NA  NA  NA #> 2       AGE                          Age     0            0     NA NA  NA  NA #>   conf_level pval     pval_label #> 1       0.95   NA p-value (Wald) #> 2       0.95   NA p-value (Wald)  # Starting from above `df`, zoom in on one biomarker and add required columns. df1 <- df[1, ] df1$subgroup <- \"All patients\" df1$row_type <- \"content\" df1$var <- \"ALL\" df1$var_label <- \"All patients\"  # Internal function - h_tab_rsp_one_biomarker if (FALSE) { h_tab_rsp_one_biomarker(   df1,   vars = c(\"n_tot\", \"n_rsp\", \"prop\", \"or\", \"ci\", \"pval\") ) }"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_response_subgroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions for Tabulating Binary Response by Subgroup ‚Äî h_response_subgroups","text":"","code":"h_proportion_df(rsp, arm)  h_proportion_subgroups_df(   variables,   data,   groups_lists = list(),   label_all = \"All Patients\" )  h_odds_ratio_df(rsp, arm, strata_data = NULL, conf_level = 0.95, method = NULL)  h_odds_ratio_subgroups_df(   variables,   data,   groups_lists = list(),   conf_level = 0.95,   method = NULL,   label_all = \"All Patients\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_response_subgroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions for Tabulating Binary Response by Subgroup ‚Äî h_response_subgroups","text":"rsp (logical) whether subject responder . arm (factor) treatment group variable. variables (named list string) list additional analysis variables. data (data.frame) dataset containing variables summarize. groups_lists (named list list) optionally contains subgroups variable list, specifies new group levels via names levels belong character vectors elements list. label_all (string) label total population analysis. strata_data (factor, data.frame NULL) required stratified analysis performed. conf_level (proportion) confidence level interval. method (string) specifies test used calculate p-value difference two proportions. options, see s_test_proportion_diff(). Default NULL test performed.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_response_subgroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper Functions for Tabulating Binary Response by Subgroup ‚Äî h_response_subgroups","text":"Helper functions tabulate data frame statistics response rate odds ratio population subgroups. Main functionality prepare data use layout creating function.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_response_subgroups.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper Functions for Tabulating Binary Response by Subgroup ‚Äî h_response_subgroups","text":"h_proportion_df(): helper prepare data frame binary responses arm. h_proportion_subgroups_df(): summarizes proportion binary responses arm across subgroups data frame. variables corresponds names variables found data, passed named list requires elements rsp, arm optionally subgroups. groups_lists optionally specifies groupings subgroups variables. h_odds_ratio_df(): helper prepare data frame estimates odds ratio treatment control arm. h_odds_ratio_subgroups_df(): summarizes estimates odds ratio treatment control arm across subgroups data frame. variables corresponds names variables found data, passed named list requires elements rsp, arm optionally subgroups strat. groups_lists optionally specifies groupings subgroups variables.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_response_subgroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Functions for Tabulating Binary Response by Subgroup ‚Äî h_response_subgroups","text":"","code":"library(dplyr) library(forcats)  adrs <- tern_ex_adrs adrs_labels <- formatters::var_labels(adrs)  adrs_f <- adrs %>%   filter(PARAMCD == \"BESRSPI\") %>%   filter(ARM %in% c(\"A: Drug X\", \"B: Placebo\")) %>%   droplevels() %>%   mutate(     # Reorder levels of factor to make the placebo group the reference arm.     ARM = fct_relevel(ARM, \"B: Placebo\"),     rsp = AVALC == \"CR\"   ) formatters::var_labels(adrs_f) <- c(adrs_labels, \"Response\")  h_proportion_df(   c(TRUE, FALSE, FALSE),   arm = factor(c(\"A\", \"A\", \"B\"), levels = c(\"A\", \"B\")) ) #>   arm n n_rsp prop #> 1   A 2     1  0.5 #> 2   B 1     0  0.0 h_proportion_subgroups_df(   variables = list(rsp = \"rsp\", arm = \"ARM\", subgroups = c(\"SEX\", \"BMRKR2\")),   data = adrs_f ) #>           arm  n n_rsp      prop     subgroup    var #> 1  B: Placebo 73    50 0.6849315 All Patients    ALL #> 2   A: Drug X 69    59 0.8550725 All Patients    ALL #> 3  B: Placebo 40    25 0.6250000            F    SEX #> 4   A: Drug X 38    36 0.9473684            F    SEX #> 5  B: Placebo 33    25 0.7575758            M    SEX #> 6   A: Drug X 31    23 0.7419355            M    SEX #> 7  B: Placebo 24    13 0.5416667          LOW BMRKR2 #> 8   A: Drug X 26    21 0.8076923          LOW BMRKR2 #> 9  B: Placebo 23    17 0.7391304       MEDIUM BMRKR2 #> 10  A: Drug X 26    23 0.8846154       MEDIUM BMRKR2 #> 11 B: Placebo 26    20 0.7692308         HIGH BMRKR2 #> 12  A: Drug X 17    15 0.8823529         HIGH BMRKR2 #>                       var_label row_type #> 1                  All Patients  content #> 2                  All Patients  content #> 3                           Sex analysis #> 4                           Sex analysis #> 5                           Sex analysis #> 6                           Sex analysis #> 7  Continuous Level Biomarker 2 analysis #> 8  Continuous Level Biomarker 2 analysis #> 9  Continuous Level Biomarker 2 analysis #> 10 Continuous Level Biomarker 2 analysis #> 11 Continuous Level Biomarker 2 analysis #> 12 Continuous Level Biomarker 2 analysis  # Define groupings for BMRKR2 levels. h_proportion_subgroups_df(   variables = list(rsp = \"rsp\", arm = \"ARM\", subgroups = c(\"SEX\", \"BMRKR2\")),   data = adrs_f,   groups_lists = list(     BMRKR2 = list(       \"low\" = \"LOW\",       \"low/medium\" = c(\"LOW\", \"MEDIUM\"),       \"low/medium/high\" = c(\"LOW\", \"MEDIUM\", \"HIGH\")     )   ) ) #>           arm  n n_rsp      prop        subgroup    var #> 1  B: Placebo 73    50 0.6849315    All Patients    ALL #> 2   A: Drug X 69    59 0.8550725    All Patients    ALL #> 3  B: Placebo 40    25 0.6250000               F    SEX #> 4   A: Drug X 38    36 0.9473684               F    SEX #> 5  B: Placebo 33    25 0.7575758               M    SEX #> 6   A: Drug X 31    23 0.7419355               M    SEX #> 7  B: Placebo 24    13 0.5416667             low BMRKR2 #> 8   A: Drug X 26    21 0.8076923             low BMRKR2 #> 9  B: Placebo 47    30 0.6382979      low/medium BMRKR2 #> 10  A: Drug X 52    44 0.8461538      low/medium BMRKR2 #> 11 B: Placebo 73    50 0.6849315 low/medium/high BMRKR2 #> 12  A: Drug X 69    59 0.8550725 low/medium/high BMRKR2 #>                       var_label row_type #> 1                  All Patients  content #> 2                  All Patients  content #> 3                           Sex analysis #> 4                           Sex analysis #> 5                           Sex analysis #> 6                           Sex analysis #> 7  Continuous Level Biomarker 2 analysis #> 8  Continuous Level Biomarker 2 analysis #> 9  Continuous Level Biomarker 2 analysis #> 10 Continuous Level Biomarker 2 analysis #> 11 Continuous Level Biomarker 2 analysis #> 12 Continuous Level Biomarker 2 analysis # Unstratatified analysis. h_odds_ratio_df(   c(TRUE, FALSE, FALSE, TRUE),   arm = factor(c(\"A\", \"A\", \"B\", \"B\"), levels = c(\"A\", \"B\")) ) #>   arm n_tot or        lcl      ucl conf_level #> 1         4  1 0.01984252 50.39681       0.95  # Include p-value. h_odds_ratio_df(adrs_f$rsp, adrs_f$ARM, method = \"chisq\") #>   arm n_tot    or      lcl      ucl conf_level       pval #> 1       142 2.714 1.180449 6.239827       0.95 0.01643036 #>                   pval_label #> 1 p-value (Chi-Squared Test)  # Stratatified analysis. h_odds_ratio_df(   rsp = adrs_f$rsp,   arm = adrs_f$ARM,   strata_data = adrs_f[, c(\"STRATA1\", \"STRATA2\")],   method = \"cmh\" ) #>   arm n_tot       or      lcl      ucl conf_level       pval #> 1       142 2.665586 1.146149 6.199324       0.95 0.02019665 #>                               pval_label #> 1 p-value (Cochran-Mantel-Haenszel Test) # Unstratified analysis. h_odds_ratio_subgroups_df(   variables = list(rsp = \"rsp\", arm = \"ARM\", subgroups = c(\"SEX\", \"BMRKR2\")),   data = adrs_f ) #>   arm n_tot        or       lcl       ucl conf_level     subgroup    var #> 1       142  2.714000 1.1804488  6.239827       0.95 All Patients    ALL #> 2        78 10.800000 2.2669576 51.452218       0.95            F    SEX #> 3        64  0.920000 0.2966470  2.853223       0.95            M    SEX #> 4        50  3.553846 1.0047370 12.570277       0.95          LOW BMRKR2 #> 5        49  2.705882 0.5911718 12.385232       0.95       MEDIUM BMRKR2 #> 6        43  2.250000 0.3970298 12.750933       0.95         HIGH BMRKR2 #>                      var_label row_type #> 1                 All Patients  content #> 2                          Sex analysis #> 3                          Sex analysis #> 4 Continuous Level Biomarker 2 analysis #> 5 Continuous Level Biomarker 2 analysis #> 6 Continuous Level Biomarker 2 analysis  # Stratified analysis. h_odds_ratio_subgroups_df(   variables = list(     rsp = \"rsp\",     arm = \"ARM\",     subgroups = c(\"SEX\", \"BMRKR2\"),     strat = c(\"STRATA1\", \"STRATA2\")   ),   data = adrs_f ) #>   arm n_tot        or       lcl       ucl conf_level     subgroup    var #> 1       142 2.6655860 1.1461490  6.199324       0.95 All Patients    ALL #> 2        78 7.7065093 1.5817529 37.547132       0.95            F    SEX #> 3        64 0.9572284 0.2990954  3.063525       0.95            M    SEX #> 4        50 3.0323726 0.8833232 10.409875       0.95          LOW BMRKR2 #> 5        49 2.1264996 0.4312008 10.486995       0.95       MEDIUM BMRKR2 #> 6        43 2.5134820 0.4351747 14.517370       0.95         HIGH BMRKR2 #>                      var_label row_type #> 1                 All Patients  content #> 2                          Sex analysis #> 3                          Sex analysis #> 4 Continuous Level Biomarker 2 analysis #> 5 Continuous Level Biomarker 2 analysis #> 6 Continuous Level Biomarker 2 analysis  # Define groupings of BMRKR2 levels. h_odds_ratio_subgroups_df(   variables = list(     rsp = \"rsp\",     arm = \"ARM\",     subgroups = c(\"SEX\", \"BMRKR2\")   ),   data = adrs_f,   groups_lists = list(     BMRKR2 = list(       \"low\" = \"LOW\",       \"low/medium\" = c(\"LOW\", \"MEDIUM\"),       \"low/medium/high\" = c(\"LOW\", \"MEDIUM\", \"HIGH\")     )   ) ) #>   arm n_tot        or      lcl       ucl conf_level        subgroup    var #> 1       142  2.714000 1.180449  6.239827       0.95    All Patients    ALL #> 2        78 10.800000 2.266958 51.452218       0.95               F    SEX #> 3        64  0.920000 0.296647  2.853223       0.95               M    SEX #> 4        50  3.553846 1.004737 12.570277       0.95             low BMRKR2 #> 5        99  3.116667 1.193409  8.139385       0.95      low/medium BMRKR2 #> 6       142  2.714000 1.180449  6.239827       0.95 low/medium/high BMRKR2 #>                      var_label row_type #> 1                 All Patients  content #> 2                          Sex analysis #> 3                          Sex analysis #> 4 Continuous Level Biomarker 2 analysis #> 5 Continuous Level Biomarker 2 analysis #> 6 Continuous Level Biomarker 2 analysis"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_split_by_subgroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Dataframe by Subgroups ‚Äî h_split_by_subgroups","title":"Split Dataframe by Subgroups ‚Äî h_split_by_subgroups","text":"Split dataframe non-nested list subsets.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_split_by_subgroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Dataframe by Subgroups ‚Äî h_split_by_subgroups","text":"","code":"h_split_by_subgroups(data, subgroups, groups_lists = list())"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_split_by_subgroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Dataframe by Subgroups ‚Äî h_split_by_subgroups","text":"data (data.frame) dataset split. subgroups (character) names factor variables data used create subsets. Unused levels present data dropped. Note order vector determines order downstream table. groups_lists (named list list) optionally contains subgroups variable list, specifies new group levels via names levels belong character vectors elements list.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_split_by_subgroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Dataframe by Subgroups ‚Äî h_split_by_subgroups","text":"list subset data (df) metadata subset (df_labels).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_split_by_subgroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split Dataframe by Subgroups ‚Äî h_split_by_subgroups","text":"Main functionality prepare data use forest plot layouts.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_split_by_subgroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Dataframe by Subgroups ‚Äî h_split_by_subgroups","text":"","code":"df <- data.frame(   x = c(1:5),   y = factor(c(\"A\", \"B\", \"A\", \"B\", \"A\"), levels = c(\"A\", \"B\", \"C\")),   z = factor(c(\"C\", \"C\", \"D\", \"D\", \"D\"), levels = c(\"D\", \"C\")) ) formatters::var_labels(df) <- paste(\"label for\", names(df))  h_split_by_subgroups(   data = df,   subgroups = c(\"y\", \"z\") ) #> $y.A #> $y.A$df #>   x y z #> 1 1 A C #> 2 3 A D #> 3 5 A D #>  #> $y.A$df_labels #>   subgroup var   var_label #> 1        A   y label for y #>  #>  #> $y.B #> $y.B$df #>   x y z #> 1 2 B C #> 2 4 B D #>  #> $y.B$df_labels #>   subgroup var   var_label #> 1        B   y label for y #>  #>  #> $z.D #> $z.D$df #>   x y z #> 1 3 A D #> 2 4 B D #> 3 5 A D #>  #> $z.D$df_labels #>   subgroup var   var_label #> 1        D   z label for z #>  #>  #> $z.C #> $z.C$df #>   x y z #> 1 1 A C #> 2 2 B C #>  #> $z.C$df_labels #>   subgroup var   var_label #> 1        C   z label for z #>  #>   h_split_by_subgroups(   data = df,   subgroups = c(\"y\", \"z\"),   groups_lists = list(     y = list(\"AB\" = c(\"A\", \"B\"), \"C\" = \"C\")   ) ) #> $y.AB #> $y.AB$df #>   x y z #> 1 1 A C #> 2 2 B C #> 3 3 A D #> 4 4 B D #> 5 5 A D #>  #> $y.AB$df_labels #>   subgroup var   var_label #> 1       AB   y label for y #>  #>  #> $z.D #> $z.D$df #>   x y z #> 1 3 A D #> 2 4 B D #> 3 5 A D #>  #> $z.D$df_labels #>   subgroup var   var_label #> 1        D   z label for z #>  #>  #> $z.C #> $z.C$df #>   x y z #> 1 1 A C #> 2 2 B C #>  #> $z.C$df_labels #>   subgroup var   var_label #> 1        C   z label for z #>  #>"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_split_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Split parameters ‚Äî h_split_param","title":"Split parameters ‚Äî h_split_param","text":"divides data vector param groups defined f based specified values. relevant rtables layers distribute parameters .stats ' .formats lists items corresponding specific analysis function.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_split_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split parameters ‚Äî h_split_param","text":"","code":"h_split_param(param, value, f)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_split_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split parameters ‚Äî h_split_param","text":"param (vector) parameter split. value (vector) value used split. f (list vectors) reference make split","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_split_param.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split parameters ‚Äî h_split_param","text":"","code":"f <- list(   surv = c(\"pt_at_risk\", \"event_free_rate\", \"rate_se\", \"rate_ci\"),   surv_diff = c(\"rate_diff\", \"rate_diff_ci\", \"ztest_pval\") )  .stats <- c(\"pt_at_risk\", \"rate_diff\") h_split_param(.stats, .stats, f = f) #> $surv #> [1] \"pt_at_risk\" #>  #> $surv_diff #> [1] \"rate_diff\" #>   # $surv # [1] \"pt_at_risk\" # # $surv_diff # [1] \"rate_diff\"  .formats <- c(\"pt_at_risk\" = \"xx\", \"event_free_rate\" = \"xxx\") h_split_param(.formats, names(.formats), f = f) #> $surv #>      pt_at_risk event_free_rate  #>            \"xx\"           \"xxx\"  #>  #> $surv_diff #> NULL #>   # $surv # pt_at_risk event_free_rate # \"xx\"           \"xxx\" # # $surv_diff # NULL"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_stack_by_baskets.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to create a new SMQ variable in ADAE by stacking\nSMQ and/or CQ records. ‚Äî h_stack_by_baskets","title":"Helper Function to create a new SMQ variable in ADAE by stacking\nSMQ and/or CQ records. ‚Äî h_stack_by_baskets","text":"Helper Function create new SMQ variable ADAE consists adverse events belonging selected Standardized/Customized queries. new dataset contain records adverse events belonging selected baskets.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_stack_by_baskets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to create a new SMQ variable in ADAE by stacking\nSMQ and/or CQ records. ‚Äî h_stack_by_baskets","text":"","code":"h_stack_by_baskets(   df,   baskets = grep(\"^(SMQ|CQ).+NAM$\", names(df), value = TRUE),   smq_varlabel = \"Standardized MedDRA Query\",   keys = c(\"STUDYID\", \"USUBJID\", \"ASTDTM\", \"AEDECOD\", \"AESEQ\"),   aag_summary = NULL,   na_level = \"<Missing>\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_stack_by_baskets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to create a new SMQ variable in ADAE by stacking\nSMQ and/or CQ records. ‚Äî h_stack_by_baskets","text":"df (data.frame) data set containing analysis variables. baskets (character) variable names selected Standardized/Customized queries. smq_varlabel (string) label new variable created. keys (character) names key variables returned along new variable created. aag_summary (data.frame) containing SMQ baskets levels interest final SMQ variable. useful levels interest observed df dataset. two columns dataset named basket basket_name. na_level (string) used replace NA empty values factors custom string.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_stack_by_baskets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function to create a new SMQ variable in ADAE by stacking\nSMQ and/or CQ records. ‚Äî h_stack_by_baskets","text":"","code":"adae <- tern_ex_adae[1:20, ] %>% df_explicit_na() h_stack_by_baskets(df = adae) #> # A tibble: 8 √ó 6 #>   STUDYID USUBJID               ASTDTM              AEDECOD       AESEQ SMQ      #>   <fct>   <fct>                 <dttm>              <fct>         <int> <fct>    #> 1 AB12345 AB12345-BRA-11-id-8   2021-12-05 02:02:07 dcd D.2.1.5.3     2 D.2.1.5‚Ä¶ #> 2 AB12345 AB12345-BRA-12-id-120 2020-02-05 01:42:29 dcd D.2.1.5.3     2 D.2.1.5‚Ä¶ #> 3 AB12345 AB12345-BRA-1-id-171  2022-11-29 12:18:31 dcd C.1.1.1.3     2 C.1.1.1‚Ä¶ #> 4 AB12345 AB12345-BRA-1-id-23   2020-07-10 07:32:49 dcd B.2.2.3.1     3 C.1.1.1‚Ä¶ #> 5 AB12345 AB12345-BRA-1-id-59   2021-10-10 23:54:46 dcd C.1.1.1.3     4 C.1.1.1‚Ä¶ #> 6 AB12345 AB12345-BRA-1-id-9    2021-06-01 14:39:09 dcd C.1.1.1.3     1 C.1.1.1‚Ä¶ #> 7 AB12345 AB12345-BRA-11-id-8   2021-12-21 02:02:07 dcd C.1.1.1.3     3 C.1.1.1‚Ä¶ #> 8 AB12345 AB12345-BRA-12-id-120 2020-10-01 01:42:29 dcd C.1.1.1.3     3 C.1.1.1‚Ä¶  aag <- data.frame(   NAMVAR = c(\"CQ01NAM\", \"CQ02NAM\", \"SMQ01NAM\", \"SMQ02NAM\"),   REFNAME = c(     \"D.2.1.5.3/A.1.1.1.1 AESI\", \"X.9.9.9.9/Y.8.8.8.8 AESI\",     \"C.1.1.1.3/B.2.2.3.1 AESI\", \"C.1.1.1.3/B.3.3.3.3 AESI\"   ),   SCOPE = c(\"\", \"\", \"BROAD\", \"BROAD\"),   stringsAsFactors = FALSE )  basket_name <- character(nrow(aag)) cq_pos <- grep(\"^(CQ).+NAM$\", aag$NAMVAR) smq_pos <- grep(\"^(SMQ).+NAM$\", aag$NAMVAR) basket_name[cq_pos] <- aag$REFNAME[cq_pos] basket_name[smq_pos] <- paste0(   aag$REFNAME[smq_pos], \"(\", aag$SCOPE[smq_pos], \")\" )  aag_summary <- data.frame(   basket = aag$NAMVAR,   basket_name = basket_name,   stringsAsFactors = TRUE )  result <- h_stack_by_baskets(df = adae, aag_summary = aag_summary) #> Warning: There are 0 basket levels in common between aag_summary$basket_name and df. all(levels(aag_summary$basket_name) %in% levels(result$SMQ)) #> [1] TRUE  h_stack_by_baskets(   df = adae,   aag_summary = NULL,   keys = c(\"STUDYID\", \"USUBJID\", \"AEDECOD\", \"ARM\"),   baskets = \"SMQ01NAM\" ) #> # A tibble: 6 √ó 5 #>   STUDYID USUBJID               AEDECOD       ARM            SMQ                 #>   <fct>   <fct>                 <fct>         <fct>          <fct>               #> 1 AB12345 AB12345-BRA-1-id-171  dcd C.1.1.1.3 B: Placebo     C.1.1.1.3/B.2.2.3.‚Ä¶ #> 2 AB12345 AB12345-BRA-1-id-23   dcd B.2.2.3.1 A: Drug X      C.1.1.1.3/B.2.2.3.‚Ä¶ #> 3 AB12345 AB12345-BRA-1-id-59   dcd C.1.1.1.3 A: Drug X      C.1.1.1.3/B.2.2.3.‚Ä¶ #> 4 AB12345 AB12345-BRA-1-id-9    dcd C.1.1.1.3 C: Combination C.1.1.1.3/B.2.2.3.‚Ä¶ #> 5 AB12345 AB12345-BRA-11-id-8   dcd C.1.1.1.3 A: Drug X      C.1.1.1.3/B.2.2.3.‚Ä¶ #> 6 AB12345 AB12345-BRA-12-id-120 dcd C.1.1.1.3 A: Drug X      C.1.1.1.3/B.2.2.3.‚Ä¶"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Functions for Subgroup Treatment Effect Pattern (STEP) Calculations ‚Äî h_step","title":"Helper Functions for Subgroup Treatment Effect Pattern (STEP) Calculations ‚Äî h_step","text":"Helper functions used internally STEP calculations.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions for Subgroup Treatment Effect Pattern (STEP) Calculations ‚Äî h_step","text":"","code":"h_step_window(x, control = control_step())  h_step_trt_effect(data, model, variables, x)  h_step_survival_formula(variables, control = control_step())  h_step_survival_est(   formula,   data,   variables,   x,   subset = rep(TRUE, nrow(data)),   control = control_coxph() )  h_step_rsp_formula(variables, control = c(control_step(), control_logistic()))  h_step_rsp_est(   formula,   data,   variables,   x,   subset = rep(TRUE, nrow(data)),   control = control_logistic() )"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions for Subgroup Treatment Effect Pattern (STEP) Calculations ‚Äî h_step","text":"x (numeric) biomarker value(s) use (without NA). control (named list) output control_step(). data (data.frame) dataset containing variables summarize. model regression model object. variables (named list string) list additional analysis variables. formula (formula) regression model formula. subset (logical) subset vector.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_step.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper Functions for Subgroup Treatment Effect Pattern (STEP) Calculations ‚Äî h_step","text":"h_step_window(): creates windows STEP, based control settings provided. Returns list containing window-selection matrix sel interval information matrix interval. h_step_trt_effect(): calculates estimated treatment effect estimate linear predictor scale corresponding standard error STEP model fitted data given variables specification, single biomarker value x. works coxph glm models, .e. calculating log hazard ratio log odds ratio estimates. returns vector elements est se. h_step_survival_formula(): builds model formula used survival STEP calculations. h_step_survival_est(): estimates model formula built based variables data given subset control parameters Cox regression, returns matrix number observations n, events well log hazard ratio estimates loghr, standard error se Wald confidence interval bounds ci_lower ci_upper. One row included biomarker value x. h_step_rsp_formula(): builds model formula used response STEP calculations. h_step_rsp_est(): estimates model formula built based variables data given subset control parameters logistic regression, returns matrix number observations n well log odds ratio estimates logor, standard error se Wald confidence interval bounds ci_lower ci_upper. One row included biomarker value x.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_survival_biomarkers_subgroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Functions for Tabulating Biomarker Effects on Survival by Subgroup ‚Äî h_survival_biomarkers_subgroups","title":"Helper Functions for Tabulating Biomarker Effects on Survival by Subgroup ‚Äî h_survival_biomarkers_subgroups","text":"Helper functions documented separately confuse user reading user-facing functions.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_survival_biomarkers_subgroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions for Tabulating Biomarker Effects on Survival by Subgroup ‚Äî h_survival_biomarkers_subgroups","text":"","code":"h_surv_to_coxreg_variables(variables, biomarker)  h_coxreg_mult_cont_df(variables, data, control = control_coxreg())  h_tab_surv_one_biomarker(df, vars, time_unit)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_survival_biomarkers_subgroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions for Tabulating Biomarker Effects on Survival by Subgroup ‚Äî h_survival_biomarkers_subgroups","text":"variables (named list string) list additional analysis variables. biomarker (string) name biomarker variable. data (data.frame) dataset containing variables summarize. control (list) list parameters returned helper function control_coxreg(). df (data.frame) results single biomarker, part returned extract_survival_biomarkers() (needs couple columns added high-level function relative returned h_coxreg_mult_cont_df(), see example). vars (character) names statistics reported among: n_tot_events: total number events per group. n_tot: total number observations per group. median: median survival time. hr: hazard ratio. ci: confidence interval hazard ratio. pval: p-value effect. Note, one statistics n_tot n_tot_events, well hr ci required. time_unit (string) label unit median survival time. Default NULL skips displaying unit.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_survival_biomarkers_subgroups.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper Functions for Tabulating Biomarker Effects on Survival by Subgroup ‚Äî h_survival_biomarkers_subgroups","text":"h_surv_to_coxreg_variables(): helps converting \"survival\" function variable list \"Cox regression\" variable list. reason currently inconsistency variable names accepted extract_survival_subgroups() fit_coxreg_multivar(). h_coxreg_mult_cont_df(): prepares estimates number events, patients median survival times, well hazard ratio estimates, confidence intervals p-values, multiple biomarkers given single data set. variables corresponds names variables found data, passed named list requires elements tte, is_event, biomarkers (vector continuous biomarker variables) optionally subgroups strat. h_tab_surv_one_biomarker(): prepares single sub-table given df_sub containing results single biomarker.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_survival_biomarkers_subgroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Functions for Tabulating Biomarker Effects on Survival by Subgroup ‚Äî h_survival_biomarkers_subgroups","text":"","code":"library(dplyr) library(forcats)  adtte <- tern_ex_adtte  # Save variable labels before data processing steps. adtte_labels <- formatters::var_labels(adtte, fill = FALSE)  adtte_f <- adtte %>%   filter(PARAMCD == \"OS\") %>%   mutate(     AVALU = as.character(AVALU),     is_event = CNSR == 0   ) labels <- c(\"AVALU\" = adtte_labels[[\"AVALU\"]], \"is_event\" = \"Event Flag\") formatters::var_labels(adtte_f)[names(labels)] <- labels  # This is how the variable list is converted internally. h_surv_to_coxreg_variables(   variables = list(     tte = \"AVAL\",     is_event = \"EVNT\",     covariates = c(\"A\", \"B\"),     strata = \"D\"   ),   biomarker = \"AGE\" ) #> $time #> [1] \"AVAL\" #>  #> $event #> [1] \"EVNT\" #>  #> $arm #> [1] \"AGE\" #>  #> $covariates #> [1] \"A\" \"B\" #>  #> $strata #> [1] \"D\" #>   # For a single population, estimate separately the effects # of two biomarkers. df <- h_coxreg_mult_cont_df(   variables = list(     tte = \"AVAL\",     is_event = \"is_event\",     biomarkers = c(\"BMRKR1\", \"AGE\"),     covariates = \"SEX\",     strata = c(\"STRATA1\", \"STRATA2\")   ),   data = adtte_f ) df #>   biomarker              biomarker_label n_tot n_tot_events   median       hr #> 1    BMRKR1 Continuous Level Biomarker 1   200          141 753.5176 1.000189 #> 2       AGE                          Age   200          141 753.5176 1.008267 #>         lcl      ucl conf_level      pval     pval_label #> 1 0.9511092 1.051802       0.95 0.9941244 p-value (Wald) #> 2 0.9845155 1.032591       0.95 0.4984743 p-value (Wald)  # If the data set is empty, still the corresponding rows with missings are returned. h_coxreg_mult_cont_df(   variables = list(     tte = \"AVAL\",     is_event = \"is_event\",     biomarkers = c(\"BMRKR1\", \"AGE\"),     covariates = \"REGION1\",     strata = c(\"STRATA1\", \"STRATA2\")   ),   data = adtte_f[NULL, ] ) #>   biomarker              biomarker_label n_tot n_tot_events median hr lcl ucl #> 1    BMRKR1 Continuous Level Biomarker 1     0            0     NA NA  NA  NA #> 2       AGE                          Age     0            0     NA NA  NA  NA #>   conf_level pval     pval_label #> 1       0.95   NA p-value (Wald) #> 2       0.95   NA p-value (Wald)  # Starting from above `df`, zoom in on one biomarker and add required columns. df1 <- df[1, ] df1$subgroup <- \"All patients\" df1$row_type <- \"content\" df1$var <- \"ALL\" df1$var_label <- \"All patients\" h_tab_surv_one_biomarker(   df1,   vars = c(\"n_tot\", \"n_tot_events\", \"median\", \"hr\", \"ci\", \"pval\"),   time_unit = \"days\" ) #>                Total n   Total Events   Median (days)   Hazard Ratio   95% Wald CI    p-value (Wald) #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> All patients     200         141            753.5           1.00       (0.95, 1.05)       0.9941"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_survival_duration_subgroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Functions for Tabulating Survival Duration by Subgroup ‚Äî h_survival_duration_subgroups","title":"Helper Functions for Tabulating Survival Duration by Subgroup ‚Äî h_survival_duration_subgroups","text":"Helper functions tabulate data frame statistics median survival time hazard ratio population subgroups.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_survival_duration_subgroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions for Tabulating Survival Duration by Subgroup ‚Äî h_survival_duration_subgroups","text":"","code":"h_survtime_df(tte, is_event, arm)  h_survtime_subgroups_df(   variables,   data,   groups_lists = list(),   label_all = \"All Patients\" )  h_coxph_df(tte, is_event, arm, strata_data = NULL, control = control_coxph())  h_coxph_subgroups_df(   variables,   data,   groups_lists = list(),   control = control_coxph(),   label_all = \"All Patients\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_survival_duration_subgroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions for Tabulating Survival Duration by Subgroup ‚Äî h_survival_duration_subgroups","text":"tte (numeric) contains time--event duration values. is_event (logical)TRUE event, FALSE time event censored. arm (factor) treatment group variable. variables (named list string) list additional analysis variables. data (data.frame) dataset containing variables summarize. groups_lists (named list list) optionally contains subgroups variable list, specifies new group levels via names levels belong character vectors elements list. label_all (string) label total population analysis. strata_data (factor, data.frame NULL) required stratified analysis performed. control (list) parameters comparison details, specified using helper function control_coxph(). possible parameter options : pval_method (string) p-value method testing hazard ratio = 1. Default method \"log-rank\" comes survival::survdiff(), can also set \"wald\" \"likelihood\" (survival::coxph()). ties (string) specifying method tie handling. Default \"efron\", can also set \"breslow\" \"exact\". See survival::coxph() conf_level (proportion) confidence level interval HR.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_survival_duration_subgroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper Functions for Tabulating Survival Duration by Subgroup ‚Äî h_survival_duration_subgroups","text":"Main functionality prepare data use layout creating function.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_survival_duration_subgroups.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper Functions for Tabulating Survival Duration by Subgroup ‚Äî h_survival_duration_subgroups","text":"h_survtime_df(): helper prepare data frame median survival times arm. h_survtime_subgroups_df(): summarizes median survival times arm across subgroups data frame. variables corresponds names variables found data, passed named list requires elements tte, is_event, arm optionally subgroups. groups_lists optionally specifies groupings subgroups variables. h_coxph_df(): helper prepare data frame estimates treatment hazard ratio. h_coxph_subgroups_df(): summarizes estimates treatment hazard ratio across subgroups data frame. variables corresponds names variables found data, passed named list requires elements tte, is_event, arm optionally subgroups strat. groups_lists optionally specifies groupings subgroups variables.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_survival_duration_subgroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Functions for Tabulating Survival Duration by Subgroup ‚Äî h_survival_duration_subgroups","text":"","code":"library(dplyr) library(forcats)  adtte <- tern_ex_adtte  # Save variable labels before data processing steps. adtte_labels <- formatters::var_labels(adtte)  adtte_f <- adtte %>%   filter(     PARAMCD == \"OS\",     ARM %in% c(\"B: Placebo\", \"A: Drug X\"),     SEX %in% c(\"M\", \"F\")   ) %>%   mutate(     # Reorder levels of ARM to display reference arm before treatment arm.     ARM = droplevels(fct_relevel(ARM, \"B: Placebo\")),     SEX = droplevels(SEX),     is_event = CNSR == 0   ) labels <- c(\"ARM\" = adtte_labels[[\"ARM\"]], \"SEX\" = adtte_labels[[\"SEX\"]], \"is_event\" = \"Event Flag\") formatters::var_labels(adtte_f)[names(labels)] <- labels  # Extract median survival time for one group. h_survtime_df(   tte = adtte_f$AVAL,   is_event = adtte_f$is_event,   arm = adtte_f$ARM ) #>          arm  n n_events   median #> 1 B: Placebo 73       57 727.8043 #> 2  A: Drug X 69       44 974.6402  # Extract median survival time for multiple groups. h_survtime_subgroups_df(   variables = list(     tte = \"AVAL\",     is_event = \"is_event\",     arm = \"ARM\",     subgroups = c(\"SEX\", \"BMRKR2\")   ),   data = adtte_f ) #>           arm  n n_events    median     subgroup    var #> 1  B: Placebo 73       57  727.8043 All Patients    ALL #> 2   A: Drug X 69       44  974.6402 All Patients    ALL #> 3  B: Placebo 40       31  599.1772            F    SEX #> 4   A: Drug X 38       24 1016.2982            F    SEX #> 5  B: Placebo 33       26  888.4916            M    SEX #> 6   A: Drug X 31       20  974.6402            M    SEX #> 7  B: Placebo 24       21  735.4722          LOW BMRKR2 #> 8   A: Drug X 26       15  974.6402          LOW BMRKR2 #> 9  B: Placebo 23       14  731.8352       MEDIUM BMRKR2 #> 10  A: Drug X 26       17  964.2197       MEDIUM BMRKR2 #> 11 B: Placebo 26       22  654.8245         HIGH BMRKR2 #> 12  A: Drug X 17       12 1016.2982         HIGH BMRKR2 #>                       var_label row_type #> 1                  All Patients  content #> 2                  All Patients  content #> 3                           Sex analysis #> 4                           Sex analysis #> 5                           Sex analysis #> 6                           Sex analysis #> 7  Continuous Level Biomarker 2 analysis #> 8  Continuous Level Biomarker 2 analysis #> 9  Continuous Level Biomarker 2 analysis #> 10 Continuous Level Biomarker 2 analysis #> 11 Continuous Level Biomarker 2 analysis #> 12 Continuous Level Biomarker 2 analysis  # Define groupings for BMRKR2 levels. h_survtime_subgroups_df(   variables = list(     tte = \"AVAL\",     is_event = \"is_event\",     arm = \"ARM\",     subgroups = c(\"SEX\", \"BMRKR2\")   ),   data = adtte_f,   groups_lists = list(     BMRKR2 = list(       \"low\" = \"LOW\",       \"low/medium\" = c(\"LOW\", \"MEDIUM\"),       \"low/medium/high\" = c(\"LOW\", \"MEDIUM\", \"HIGH\")     )   ) ) #>           arm  n n_events    median        subgroup    var #> 1  B: Placebo 73       57  727.8043    All Patients    ALL #> 2   A: Drug X 69       44  974.6402    All Patients    ALL #> 3  B: Placebo 40       31  599.1772               F    SEX #> 4   A: Drug X 38       24 1016.2982               F    SEX #> 5  B: Placebo 33       26  888.4916               M    SEX #> 6   A: Drug X 31       20  974.6402               M    SEX #> 7  B: Placebo 24       21  735.4722             low BMRKR2 #> 8   A: Drug X 26       15  974.6402             low BMRKR2 #> 9  B: Placebo 47       35  735.4722      low/medium BMRKR2 #> 10  A: Drug X 52       32  964.2197      low/medium BMRKR2 #> 11 B: Placebo 73       57  727.8043 low/medium/high BMRKR2 #> 12  A: Drug X 69       44  974.6402 low/medium/high BMRKR2 #>                       var_label row_type #> 1                  All Patients  content #> 2                  All Patients  content #> 3                           Sex analysis #> 4                           Sex analysis #> 5                           Sex analysis #> 6                           Sex analysis #> 7  Continuous Level Biomarker 2 analysis #> 8  Continuous Level Biomarker 2 analysis #> 9  Continuous Level Biomarker 2 analysis #> 10 Continuous Level Biomarker 2 analysis #> 11 Continuous Level Biomarker 2 analysis #> 12 Continuous Level Biomarker 2 analysis  # Extract hazard ratio for one group. h_coxph_df(adtte_f$AVAL, adtte_f$is_event, adtte_f$ARM) #>   arm n_tot n_tot_events        hr       lcl      ucl conf_level       pval #> 1       142          101 0.7108557 0.4779138 1.057337       0.95 0.09049511 #>           pval_label #> 1 p-value (log-rank)  # Extract hazard ratio for one group with stratification factor. h_coxph_df(adtte_f$AVAL, adtte_f$is_event, adtte_f$ARM, strata_data = adtte_f$STRATA1) #>   arm n_tot n_tot_events        hr       lcl     ucl conf_level       pval #> 1       142          101 0.6646586 0.4399495 1.00414       0.95 0.05089188 #>           pval_label #> 1 p-value (log-rank)  # Extract hazard ratio for multiple groups. h_coxph_subgroups_df(   variables = list(     tte = \"AVAL\",     is_event = \"is_event\",     arm = \"ARM\",     subgroups = c(\"SEX\", \"BMRKR2\")   ),   data = adtte_f ) #>   arm n_tot n_tot_events        hr       lcl       ucl conf_level       pval #> 1       142          101 0.7108557 0.4779138 1.0573368       0.95 0.09049511 #> 2        78           55 0.5595391 0.3246658 0.9643271       0.95 0.03411759 #> 3        64           46 0.9102874 0.5032732 1.6464678       0.95 0.75582028 #> 4        50           36 0.7617717 0.3854349 1.5055617       0.95 0.43236030 #> 5        49           31 0.7651261 0.3641277 1.6077269       0.95 0.47860004 #> 6        43           34 0.6662356 0.3257413 1.3626456       0.95 0.26285846 #>           pval_label     subgroup    var                    var_label row_type #> 1 p-value (log-rank) All Patients    ALL                 All Patients  content #> 2 p-value (log-rank)            F    SEX                          Sex analysis #> 3 p-value (log-rank)            M    SEX                          Sex analysis #> 4 p-value (log-rank)          LOW BMRKR2 Continuous Level Biomarker 2 analysis #> 5 p-value (log-rank)       MEDIUM BMRKR2 Continuous Level Biomarker 2 analysis #> 6 p-value (log-rank)         HIGH BMRKR2 Continuous Level Biomarker 2 analysis  # Define groupings of BMRKR2 levels. h_coxph_subgroups_df(   variables = list(     tte = \"AVAL\",     is_event = \"is_event\",     arm = \"ARM\",     subgroups = c(\"SEX\", \"BMRKR2\")   ),   data = adtte_f,   groups_lists = list(     BMRKR2 = list(       \"low\" = \"LOW\",       \"low/medium\" = c(\"LOW\", \"MEDIUM\"),       \"low/medium/high\" = c(\"LOW\", \"MEDIUM\", \"HIGH\")     )   ) ) #>   arm n_tot n_tot_events        hr       lcl       ucl conf_level       pval #> 1       142          101 0.7108557 0.4779138 1.0573368       0.95 0.09049511 #> 2        78           55 0.5595391 0.3246658 0.9643271       0.95 0.03411759 #> 3        64           46 0.9102874 0.5032732 1.6464678       0.95 0.75582028 #> 4        50           36 0.7617717 0.3854349 1.5055617       0.95 0.43236030 #> 5        99           67 0.7472958 0.4600419 1.2139136       0.95 0.23764314 #> 6       142          101 0.7108557 0.4779138 1.0573368       0.95 0.09049511 #>           pval_label        subgroup    var                    var_label #> 1 p-value (log-rank)    All Patients    ALL                 All Patients #> 2 p-value (log-rank)               F    SEX                          Sex #> 3 p-value (log-rank)               M    SEX                          Sex #> 4 p-value (log-rank)             low BMRKR2 Continuous Level Biomarker 2 #> 5 p-value (log-rank)      low/medium BMRKR2 Continuous Level Biomarker 2 #> 6 p-value (log-rank) low/medium/high BMRKR2 Continuous Level Biomarker 2 #>   row_type #> 1  content #> 2 analysis #> 3 analysis #> 4 analysis #> 5 analysis #> 6 analysis  # Extract hazard ratio for multiple groups with stratification factors. h_coxph_subgroups_df(   variables = list(     tte = \"AVAL\",     is_event = \"is_event\",     arm = \"ARM\",     subgroups = c(\"SEX\", \"BMRKR2\"),     strat = c(\"STRATA1\", \"STRATA2\")   ),   data = adtte_f ) #>   arm n_tot n_tot_events        hr       lcl       ucl conf_level       pval #> 1       142          101 0.6126133 0.3913507 0.9589739       0.95 0.03086774 #> 2        78           55 0.3934024 0.2027682 0.7632630       0.95 0.00469167 #> 3        64           46 0.9501768 0.4730073 1.9087145       0.95 0.88580522 #> 4        50           36 0.7378635 0.3140465 1.7336363       0.95 0.48408079 #> 5        49           31 0.9408062 0.4172095 2.1215148       0.95 0.88305965 #> 6        43           34 0.5125617 0.2125140 1.2362459       0.95 0.13124382 #>           pval_label     subgroup    var                    var_label row_type #> 1 p-value (log-rank) All Patients    ALL                 All Patients  content #> 2 p-value (log-rank)            F    SEX                          Sex analysis #> 3 p-value (log-rank)            M    SEX                          Sex analysis #> 4 p-value (log-rank)          LOW BMRKR2 Continuous Level Biomarker 2 analysis #> 5 p-value (log-rank)       MEDIUM BMRKR2 Continuous Level Biomarker 2 analysis #> 6 p-value (log-rank)         HIGH BMRKR2 Continuous Level Biomarker 2 analysis"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_tab_one_biomarker.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function for Tabulation of a Single Biomarker Result ‚Äî h_tab_one_biomarker","title":"Helper Function for Tabulation of a Single Biomarker Result ‚Äî h_tab_one_biomarker","text":"used h_tab_surv_one_biomarker() h_tab_rsp_one_biomarker(), please see examples.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_tab_one_biomarker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function for Tabulation of a Single Biomarker Result ‚Äî h_tab_one_biomarker","text":"","code":"h_tab_one_biomarker(df, afuns, colvars)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_tab_one_biomarker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function for Tabulation of a Single Biomarker Result ‚Äî h_tab_one_biomarker","text":"df (data.frame) results single biomarker. afuns (named list function) analysis functions. colvars (list vars labels) variables tabulate labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_tab_one_biomarker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function for Tabulation of a Single Biomarker Result ‚Äî h_tab_one_biomarker","text":"rtables table object.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_tbl_coxph_pairwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function: Pairwise CoxPH table ‚Äî h_tbl_coxph_pairwise","title":"Helper Function: Pairwise CoxPH table ‚Äî h_tbl_coxph_pairwise","text":"Create rtable pairwise stratified unstratified CoxPH analysis results.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_tbl_coxph_pairwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function: Pairwise CoxPH table ‚Äî h_tbl_coxph_pairwise","text":"","code":"h_tbl_coxph_pairwise(df, variables, control_coxph_pw = control_coxph())"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_tbl_coxph_pairwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function: Pairwise CoxPH table ‚Äî h_tbl_coxph_pairwise","text":"df (data.frame) data set containing analysis variables. variables (named list) variable names. Details : tte (numeric) variable indicating time--event duration values. is_event (logical) event variable. TRUE event, FALSE time event censored. arm (factor) treatment group variable. strat (character NULL) variable names indicating stratification factors. control_coxph_pw (list) parameters comparison details, specified using helper function control_coxph(). possible parameter options : pval_method (string) p-value method testing hazard ratio = 1. Default method \"log-rank\", can also set \"wald\" \"likelihood\". ties (string) method tie handling. Default \"efron\", can also set \"breslow\" \"exact\". See survival::coxph() conf_level (proportion) confidence level interval HR.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_tbl_coxph_pairwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function: Pairwise CoxPH table ‚Äî h_tbl_coxph_pairwise","text":"","code":"if (FALSE) { library(dplyr)  adtte <- tern_ex_adtte %>%   filter(PARAMCD == \"OS\") %>%   mutate(is_event = CNSR == 0)  h_tbl_coxph_pairwise(   df = adtte,   variables = list(tte = \"AVAL\", is_event = \"is_event\", arm = \"ARM\"),   control_coxph_pw = control_coxph(conf_level = 0.9) ) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_tbl_median_surv.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function: Survival Estimations ‚Äî h_tbl_median_surv","title":"Helper Function: Survival Estimations ‚Äî h_tbl_median_surv","text":"Transform survival fit table groups rows characterized N, median confidence interval.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_tbl_median_surv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function: Survival Estimations ‚Äî h_tbl_median_surv","text":"","code":"h_tbl_median_surv(fit_km, armval = \"All\")"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_tbl_median_surv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function: Survival Estimations ‚Äî h_tbl_median_surv","text":"fit_km (survfit) result survival::survfit(). armval (string) used strata name treatment arm variable one level. Default \"\".","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_tbl_median_surv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function: Survival Estimations ‚Äî h_tbl_median_surv","text":"","code":"if (FALSE) { library(dplyr) library(survival)  adtte <- tern_ex_adtte %>% filter(PARAMCD == \"OS\") fit <- survfit(   form = Surv(AVAL, 1 - CNSR) ~ ARMCD,   data = adtte ) h_tbl_median_surv(fit_km = fit) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_worsen_counter.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to Analyze Patients for s_count_abnormal_lab_worsen_by_baseline() ‚Äî h_worsen_counter","title":"Helper Function to Analyze Patients for s_count_abnormal_lab_worsen_by_baseline() ‚Äî h_worsen_counter","text":"Helper function count number patients fraction patients according highest post-baseline lab grade variable .var, baseline lab grade variable baseline_var, direction interest specified direction_var.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_worsen_counter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Analyze Patients for s_count_abnormal_lab_worsen_by_baseline() ‚Äî h_worsen_counter","text":"","code":"h_worsen_counter(df, id, .var, baseline_var, direction_var)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_worsen_counter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Analyze Patients for s_count_abnormal_lab_worsen_by_baseline() ‚Äî h_worsen_counter","text":"df (data.frame) data set containing analysis variables. id (string) subject variable name. .var (string) single variable name passed rtables requested statistics function. baseline_var (string) baseline lab grade variable direction_var (string) Direction variable specifying direction shift table interest. lab records flagged L, H B included shift table. L: low direction H: high direction B: low high directions","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_worsen_counter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to Analyze Patients for s_count_abnormal_lab_worsen_by_baseline() ‚Äî h_worsen_counter","text":"h_worsen_counter() returns counts fraction patients whose worst post-baseline lab grades worse baseline grades, post-baseline worst grades \"1\", \"2\", \"3\", \"4\" \"\".","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/h_worsen_counter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function to Analyze Patients for s_count_abnormal_lab_worsen_by_baseline() ‚Äî h_worsen_counter","text":"","code":"library(dplyr)  # The direction variable, GRADDR, is based on metadata adlb <- tern_ex_adlb %>%   mutate(     GRADDR = case_when(       PARAMCD == \"ALT\" ~ \"B\",       PARAMCD == \"CRP\" ~ \"L\",       PARAMCD == \"IGA\" ~ \"H\"     )   ) %>%   filter(SAFFL == \"Y\" & ONTRTFL == \"Y\" & GRADDR != \"\")  df <- h_adlb_worsen(   adlb,   worst_flag_low = c(\"WGRLOFL\" = \"Y\"),   worst_flag_high = c(\"WGRHIFL\" = \"Y\"),   direction_var = \"GRADDR\" )  # `h_worsen_counter` h_worsen_counter(   df %>% filter(PARAMCD == \"CRP\" & GRADDR == \"Low\"),   id = \"USUBJID\",   .var = \"ATOXGR\",   baseline_var = \"BTOXGR\",   direction_var = \"GRADDR\" ) #> $fraction #> $fraction$`1` #>   num denom  #>    25   180  #>  #> $fraction$`2` #>   num denom  #>    15   186  #>  #> $fraction$`3` #>   num denom  #>    18   191  #>  #> $fraction$`4` #>   num denom  #>    17   196  #>  #> $fraction$Any #>   num denom  #>    75   196  #>  #>"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_xticks.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: x tick positions ‚Äî h_xticks","title":"Helper function: x tick positions ‚Äî h_xticks","text":"Calculate positions ticks x-axis. However, xticks already exists kept . based function ggplot2 relies , required graphic patient--risk annotation table.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_xticks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: x tick positions ‚Äî h_xticks","text":"","code":"h_xticks(data, xticks = NULL, max_time = NULL)"},{"path":"https://insightsengineering.github.io/tern/main/reference/h_xticks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: x tick positions ‚Äî h_xticks","text":"data (data.frame) survival data pre-processed h_data_plot. xticks (numeric, number, NULL) numeric vector ticks single number spacing ticks x axis. NULL (default), labeling::extended() used determine optimal tick position x axis. max_time (numeric) maximum value show X axis. data values less threshold value plotted (defaults NULL).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/h_xticks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function: x tick positions ‚Äî h_xticks","text":"","code":"if (FALSE) { library(dplyr) library(survival)  data <- tern_ex_adtte %>%   filter(PARAMCD == \"OS\") %>%   survfit(form = Surv(AVAL, 1 - CNSR) ~ ARMCD, data = .) %>%   h_data_plot()  h_xticks(data) h_xticks(data, xticks = seq(0, 3000, 500)) h_xticks(data, xticks = 500) h_xticks(data, xticks = 500, max_time = 6000) h_xticks(data, xticks = c(0, 500), max_time = 300) h_xticks(data, xticks = 500, max_time = 300) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/incidence_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Incidence Rate ‚Äî incidence_rate","title":"Incidence Rate ‚Äî incidence_rate","text":"Estimate event rate adjusted person-years risk, otherwise known incidence rate. Primary analysis variable person-years risk.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/incidence_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Incidence Rate ‚Äî incidence_rate","text":"","code":"s_incidence_rate(   df,   .var,   n_events,   is_event,   control = control_incidence_rate() )  a_incidence_rate(   df,   .var,   n_events,   is_event,   control = control_incidence_rate() )  estimate_incidence_rate(   lyt,   vars,   ...,   show_labels = \"hidden\",   table_names = vars,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/incidence_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Incidence Rate ‚Äî incidence_rate","text":"df (data.frame) data set containing analysis variables. .var (string) single variable name passed rtables requested statistics function. n_events (integer) number events observed. is_event (logical)TRUE event, FALSE time event censored. control (list) parameters estimation details, specified using helper function control_incidence_rate(). Possible parameter options : conf_level (proportion) confidence level estimated incidence rate. conf_type (string)normal (default), normal_log, exact, byar confidence interval type. time_unit_input (string)day, week, month, year (default) indicating time unit data input. time_unit_output (numeric) time unit desired output (person-years). lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . ... additional arguments lower level functions. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels. person_years (numeric) total person-years risk. alpha (numeric) two-sided alpha-level confidence interval.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/incidence_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Incidence Rate ‚Äî incidence_rate","text":"statistics : person_years total person-years risk n_events total number events observed rate estimated incidence rate rate_ci confidence interval incidence rate","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/incidence_rate.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Incidence Rate ‚Äî incidence_rate","text":"s_incidence_rate(): Statistics function estimates incidence rate associated confidence interval. a_incidence_rate(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). estimate_incidence_rate(): Layout creating function adds analyze rows using statistics function s_incidence_rate desired format.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/incidence_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Incidence Rate ‚Äî incidence_rate","text":"","code":"library(dplyr)  df <- data.frame(   USUBJID = as.character(seq(6)),   CNSR = c(0, 1, 1, 0, 0, 0),   AVAL = c(10.1, 20.4, 15.3, 20.8, 18.7, 23.4),   ARM = factor(c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\")) ) %>%   mutate(is_event = CNSR == 0) %>%   mutate(n_events = as.integer(is_event))  # Internal function - s_incidence_rate if (FALSE) { s_incidence_rate(   df,   .var = \"AVAL\",   n_events = \"n_events\",   control = control_incidence_rate(     time_unit_input = \"month\",     time_unit_output = 100   ) ) }  # Internal function - a_incidence_rate if (FALSE) { a_incidence_rate(   df,   .var = \"AVAL\",   n_events = \"n_events\",   control = control_incidence_rate(time_unit_input = \"month\", time_unit_output = 100) ) }  basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   estimate_incidence_rate(     vars = \"AVAL\",     n_events = \"n_events\",     control = control_incidence_rate(       time_unit_input = \"month\",       time_unit_output = 100     )   ) %>%   build_table(df) #>                                            A                 B        #>                                          (N=3)             (N=3)      #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Total patient-years at risk               3.8               5.2       #> Number of adverse events observed          1                 3        #> AE rate per 100 patient-years            26.20             57.23      #> 95% CI                              (-25.15, 77.55)   (-7.53, 122.00)"},{"path":"https://insightsengineering.github.io/tern/main/reference/individual_patient_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual Patient Plots ‚Äî individual_patient_plot","title":"Individual Patient Plots ‚Äî individual_patient_plot","text":"Line plot(s) displaying trend patients' parameter values time rendered. Patients' individual baseline values can added plot(s) reference.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/individual_patient_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual Patient Plots ‚Äî individual_patient_plot","text":"","code":"g_ipp(   df,   xvar,   yvar,   xlab,   ylab,   id_var = \"USUBJID\",   title = \"Individual Patient Plots\",   subtitle = \"\",   caption = NULL,   add_baseline_hline = FALSE,   yvar_baseline = \"BASE\",   ggtheme = nestcolor::theme_nest(),   plotting_choices = c(\"all_in_one\", \"split_by_max_obs\", \"separate_by_obs\"),   max_obs_per_plot = 4,   col = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/individual_patient_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Individual Patient Plots ‚Äî individual_patient_plot","text":"df (data.frame) data set containing analysis variables. xvar (string) time point variable plotted x-axis. yvar (string) continuous analysis variable plotted y-axis. xlab (string) plot label x-axis. ylab (string) plot label y-axis. id_var (string) variable used patient identifier. title (string) title plot. subtitle (string) subtitle plot. caption (character scalar) optional caption plot. add_baseline_hline (flag) adds horizontal line baseline y-value plot TRUE. yvar_baseline (string) variable baseline values . Ignored add_baseline_hline FALSE. ggtheme (theme) optional graphical theme function provided ggplot2 control outlook plot. Use ggplot2::theme() tweak display. plotting_choices (character) specifies options displaying plots. Must one \"all_in_one\", \"split_by_max_obs\", \"separate_by_obs\". max_obs_per_plot (count) Number observations plotted one plot. Ignored plotting_choices \"separate_by_obs\". col (character) lines colors.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/individual_patient_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Individual Patient Plots ‚Äî individual_patient_plot","text":"ggplot object list ggplot objects.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/individual_patient_plot.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Individual Patient Plots ‚Äî individual_patient_plot","text":"g_ipp(): depending user preference, renders single graphic compiles list graphics show trends individual's parameter values time.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/individual_patient_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Individual Patient Plots ‚Äî individual_patient_plot","text":"","code":"library(dplyr) library(nestcolor)  # Select a small sample of data to plot. adlb <- tern_ex_adlb %>%   filter(PARAMCD == \"ALT\", !(AVISIT %in% c(\"SCREENING\", \"BASELINE\"))) %>%   slice(1:36)  plot_list <- g_ipp(   df = adlb,   xvar = \"AVISIT\",   yvar = \"AVAL\",   xlab = \"Visit\",   ylab = \"SGOT/ALT (U/L)\",   title = \"Individual Patient Plots\",   add_baseline_hline = TRUE,   plotting_choices = \"split_by_max_obs\",   max_obs_per_plot = 5 ) plot_list #> [[1]]  #>  #> [[2]]  #>"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/kaplan_meier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kaplan-Meier Plot ‚Äî kaplan_meier","text":"df (data.frame) data set containing analysis variables. variables (named list) variable names. Details : tte (numeric) variable indicating time--event duration values. is_event (logical) event variable. TRUE event, FALSE time event censored. arm (factor) treatment group variable. strat (character NULL) variable names indicating stratification factors. control_surv (list) parameters comparison details, specified using helper function control_surv_timepoint. possible parameter options : conf_level (proportion) confidence level interval survival rate. conf_type (string) \"plain\" (default), \"log\", \"log-log\" confidence interval type, see survival::survfit(). Note option \"none\" longer supported. data (data.frame) survival data pre-processed h_data_plot. xticks (numeric, number, NULL) numeric vector ticks single number spacing ticks x axis. NULL (default), labeling::extended() used determine optimal tick position x axis. yval (string) value y-axis. Options Survival (default) Failure probability. censor_show (flag) whether show censored. xlab (string) label x-axis. ylab (string) label y-axis. title (string) title plot. footnotes (string) footnotes plot. col (character) lines colors. Length vector equal number strata survival::survfit(). lty (numeric) line type. Length vector equal number strata survival::survfit(). lwd (numeric) line width. Length vector equal number strata survival::survfit(). pch (numeric, string) value character points symbol indicate censored cases. size (numeric) size censored point, class unit. max_time (numeric) maximum value show X axis. data values less threshold value plotted (defaults NULL). font_size (number) font size used. ci_ribbon (flag) draw confidence interval around Kaplan-Meier curve. ggtheme (theme) graphical theme provided ggplot2 control outlook Kaplan-Meier curve. annot_at_risk (flag) compute add annotation table reporting number patient risk matching main grid Kaplan-Meier curve. annot_surv_med (flag) compute add annotation table Kaplan-Meier curve estimating median survival time per group. annot_coxph (flag) add annotation table survival::coxph() model. annot_stats (string) statistics annotations add plot. Options median (median survival follow-time) min (minimum survival follow-time). annot_stats_vlines (flag) add vertical lines corresponding statistics specified annot_stats. annot_stats NULL lines added. control_coxph_pw (list) parameters comparison details, specified using helper function control_coxph(). possible parameter options : pval_method (string) p-value method testing hazard ratio = 1. Default method \"log-rank\", can also set \"wald\" \"likelihood\". ties (string) method tie handling. Default \"efron\", can also set \"breslow\" \"exact\". See survival::coxph() conf_level (proportion) confidence level interval HR. position_coxph (numeric) x y positions plotting survival::coxph() model. position_surv_med (numeric) x y positions plotting annotation table estimating median survival time per group.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/labels_or_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Labels or Names of List Elements ‚Äî labels_or_names","title":"Labels or Names of List Elements ‚Äî labels_or_names","text":"Internal helper function working nested statistic function results typically labels names can use.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/labels_or_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Labels or Names of List Elements ‚Äî labels_or_names","text":"","code":"labels_or_names(x)"},{"path":"https://insightsengineering.github.io/tern/main/reference/labels_or_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Labels or Names of List Elements ‚Äî labels_or_names","text":"x list","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/labels_or_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Labels or Names of List Elements ‚Äî labels_or_names","text":"character vector labels names list elements","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/logistic_regression_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Logistic Regression Multi-Variable Column Layout Function ‚Äî logistic_regression_cols","title":"Logistic Regression Multi-Variable Column Layout Function ‚Äî logistic_regression_cols","text":"Layout creating function multi-variable column layout summarizing logistic regression results.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/logistic_regression_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic Regression Multi-Variable Column Layout Function ‚Äî logistic_regression_cols","text":"","code":"logistic_regression_cols(lyt, conf_level = 0.95)"},{"path":"https://insightsengineering.github.io/tern/main/reference/logistic_regression_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logistic Regression Multi-Variable Column Layout Function ‚Äî logistic_regression_cols","text":"lyt (layout) input layout analyses added . conf_level (proportion) confidence level interval.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/logistic_summary_by_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Logistic Regression Summary Table Constructor Function ‚Äî logistic_summary_by_flag","title":"Logistic Regression Summary Table Constructor Function ‚Äî logistic_summary_by_flag","text":"Constructor content functions used summarize logistic regression results.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/logistic_summary_by_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic Regression Summary Table Constructor Function ‚Äî logistic_summary_by_flag","text":"","code":"logistic_summary_by_flag(flag_var)"},{"path":"https://insightsengineering.github.io/tern/main/reference/logistic_summary_by_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logistic Regression Summary Table Constructor Function ‚Äî logistic_summary_by_flag","text":"flag_var (string) variable name identifying row used content function.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/make_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Names Without Dots ‚Äî make_names","title":"Make Names Without Dots ‚Äî make_names","text":"Make Names Without Dots","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/make_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Names Without Dots ‚Äî make_names","text":"","code":"make_names(nams)"},{"path":"https://insightsengineering.github.io/tern/main/reference/make_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Names Without Dots ‚Äî make_names","text":"nams (character) vector original names.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/make_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Names Without Dots ‚Äî make_names","text":"Character vector proper names, use dots contrast base::make.names().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/make_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Names Without Dots ‚Äî make_names","text":"","code":"# Internal function - make_names if (FALSE) { make_names(c(\"foo Bar\", \"1 2 3 bla\")) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/month2day.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion of Months to Days ‚Äî month2day","title":"Conversion of Months to Days ‚Äî month2day","text":"Conversion Months Days. approximative calculation considers month average 30.4375 days.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/month2day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion of Months to Days ‚Äî month2day","text":"","code":"month2day(x)"},{"path":"https://insightsengineering.github.io/tern/main/reference/month2day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion of Months to Days ‚Äî month2day","text":"x (numeric) time months.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/month2day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion of Months to Days ‚Äî month2day","text":"numeric vector time days.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/month2day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion of Months to Days ‚Äî month2day","text":"","code":"x <- c(13.25, 8.15, 1, 2.834) month2day(x) #> [1] 403.29688 248.06563  30.43750  86.25988"},{"path":"https://insightsengineering.github.io/tern/main/reference/muffled_car_anova.html","id":null,"dir":"Reference","previous_headings":"","what":"Muffled car::Anova ‚Äî muffled_car_anova","title":"Muffled car::Anova ‚Äî muffled_car_anova","text":"Applied survival models, car::Anova() signal strata terms dropped model formula present, function deliberately muffles message.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/muffled_car_anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Muffled car::Anova ‚Äî muffled_car_anova","text":"","code":"muffled_car_anova(mod, test_statistic)"},{"path":"https://insightsengineering.github.io/tern/main/reference/muffled_car_anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Muffled car::Anova ‚Äî muffled_car_anova","text":"mod (coxph) Cox regression model fitted survival::coxph(). test_statistic (string) method used estimation p.values; wald (default) likelihood.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/n_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of Available (Non-Missing Entries) in a Vector ‚Äî n_available","title":"Number of Available (Non-Missing Entries) in a Vector ‚Äî n_available","text":"Small utility function better readability.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/n_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of Available (Non-Missing Entries) in a Vector ‚Äî n_available","text":"","code":"n_available(x)"},{"path":"https://insightsengineering.github.io/tern/main/reference/n_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of Available (Non-Missing Entries) in a Vector ‚Äî n_available","text":"x () vector count non-missing values.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/n_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of Available (Non-Missing Entries) in a Vector ‚Äî n_available","text":"Number non-missing values.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/n_available.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of Available (Non-Missing Entries) in a Vector ‚Äî n_available","text":"","code":"# Internal function - n_available if (FALSE) { n_available(c(1, NA, 2)) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/odds_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Odds Ratio Estimation ‚Äî odds_ratio","title":"Odds Ratio Estimation ‚Äî odds_ratio","text":"Compares bivariate responses two groups terms odds ratios along confidence interval.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/odds_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Odds Ratio Estimation ‚Äî odds_ratio","text":"","code":"s_odds_ratio(   df,   .var,   .ref_group,   .in_ref_col,   .df_row,   variables = list(arm = NULL, strata = NULL),   conf_level = 0.95,   groups_list = NULL )  a_odds_ratio(   df,   .var,   .ref_group,   .in_ref_col,   .df_row,   variables = list(arm = NULL, strata = NULL),   conf_level = 0.95,   groups_list = NULL )  estimate_odds_ratio(   lyt,   vars,   ...,   show_labels = \"hidden\",   table_names = vars,   .stats = \"or_ci\",   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/odds_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Odds Ratio Estimation ‚Äî odds_ratio","text":"df (data.frame) data set containing analysis variables. .var (string) single variable name passed rtables requested statistics function. .ref_group (data.frame vector) data corresponding reference group. .in_ref_col (logical)TRUE working reference level, FALSE otherwise. .df_row (data.frame) data frame across columns given row split. variables (named list string) list additional analysis variables. conf_level (proportion) confidence level interval. groups_list (named list character) specifies new group levels via names levels belong character vectors elements list. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . ... arguments passed s_odds_ratio(). show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/odds_ratio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Odds Ratio Estimation ‚Äî odds_ratio","text":"function uses either logistic regression unstratified analyses, conditional logistic regression stratified analyses. Wald confidence interval specified confidence level calculated. Note , stratified analyses, currently implementation conditional likelihood confidence intervals, therefore likelihood confidence interval option yet available. Besides, rsp contains responders non-responders, result values NA, odds ratio estimation possible.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/odds_ratio.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Odds Ratio Estimation ‚Äî odds_ratio","text":"s_odds_ratio(): Statistics function estimates odds ratio treatment control. Note variables list arm strata names needs passed stratified analysis required. a_odds_ratio(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). estimate_odds_ratio(): Layout creating function can used creating tables, can take statistics function arguments additional format arguments (see ).","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/odds_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Odds Ratio Estimation ‚Äî odds_ratio","text":"","code":"set.seed(12) dta <- data.frame(   rsp = sample(c(TRUE, FALSE), 100, TRUE),   grp = factor(rep(c(\"A\", \"B\"), each = 50), levels = c(\"B\", \"A\")),   strata = factor(sample(c(\"C\", \"D\"), 100, TRUE)) )  # Unstratified analysis. s_odds_ratio(   df = subset(dta, grp == \"A\"),   .var = \"rsp\",   .ref_group = subset(dta, grp == \"B\"),   .in_ref_col = FALSE,   .df_row = dta ) #> $or_ci #>       est       lcl       ucl  #> 0.8484848 0.3831831 1.8788053  #> attr(,\"label\") #> [1] \"Odds Ratio (95% CI)\" #>  #> $n_tot #> n_tot  #>   100  #> attr(,\"label\") #> [1] \"Total n\" #>   # Stratified analysis. s_odds_ratio(   df = subset(dta, grp == \"A\"),   .var = \"rsp\",   .ref_group = subset(dta, grp == \"B\"),   .in_ref_col = FALSE,   .df_row = dta,   variables = list(arm = \"grp\", strata = \"strata\") ) #> $or_ci #>       est       lcl       ucl  #> 0.7689750 0.3424155 1.7269154  #> attr(,\"label\") #> [1] \"Odds Ratio (95% CI)\" #>  #> $n_tot #> n_tot  #>   100  #> attr(,\"label\") #> [1] \"Total n\" #>  a_odds_ratio(   df = subset(dta, grp == \"A\"),   .var = \"rsp\",   .ref_group = subset(dta, grp == \"B\"),   .in_ref_col = FALSE,   .df_row = dta ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name     formatted_cell indent_mod           row_label #> 1    or_ci 0.85 (0.38 - 1.88)          1 Odds Ratio (95% CI) #> 2    n_tot                100          0             Total n dta <- data.frame(   rsp = sample(c(TRUE, FALSE), 100, TRUE),   grp = factor(rep(c(\"A\", \"B\"), each = 50)) )  l <- basic_table() %>%   split_cols_by(var = \"grp\", ref_group = \"B\") %>%   estimate_odds_ratio(vars = \"rsp\")  build_table(l, df = dta) #>                       B           A          #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Odds Ratio (95% CI)       0.72 (0.33 - 1.60)"},{"path":"https://insightsengineering.github.io/tern/main/reference/pairwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise Formula Special Term ‚Äî pairwise","title":"Pairwise Formula Special Term ‚Äî pairwise","text":"special term pairwise indicate model fitted individually every tested level comparison reference level.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/pairwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise Formula Special Term ‚Äî pairwise","text":"","code":"pairwise(x)"},{"path":"https://insightsengineering.github.io/tern/main/reference/pairwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise Formula Special Term ‚Äî pairwise","text":"x variable pairwise result expected","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/pairwise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pairwise Formula Special Term ‚Äî pairwise","text":"ARM factor level , B, C; B reference level, model calling formula including pairwise(ARM) result two models: model including levels B, effect estimated reference B. model including levels C B, effect C estimated reference B.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/prop_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proportion Difference ‚Äî prop_diff","text":"","code":"s_proportion_diff(   df,   .var,   .ref_group,   .in_ref_col,   variables = list(strata = NULL),   conf_level = 0.95,   method = c(\"waldcc\", \"wald\", \"cmh\", \"ha\", \"newcombe\", \"newcombecc\", \"strat_newcombe\",     \"strat_newcombecc\"),   weights_method = \"cmh\" )  a_proportion_diff(   df,   .var,   .ref_group,   .in_ref_col,   variables = list(strata = NULL),   conf_level = 0.95,   method = c(\"waldcc\", \"wald\", \"cmh\", \"ha\", \"newcombe\", \"newcombecc\", \"strat_newcombe\",     \"strat_newcombecc\"),   weights_method = \"cmh\" )  estimate_proportion_diff(   lyt,   vars,   ...,   var_labels = vars,   show_labels = \"hidden\",   table_names = vars,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/prop_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proportion Difference ‚Äî prop_diff","text":"df (data.frame) data set containing analysis variables. .var (string) single variable name passed rtables requested statistics function. .ref_group (data.frame vector) data corresponding reference group. .in_ref_col (logical)TRUE working reference level, FALSE otherwise. variables (named list string) list additional analysis variables. conf_level (proportion) confidence level interval. method (string) method used confidence interval estimation. weights_method (string) weights method. Can either \"cmh\" \"heuristic\" directs way weights estimated. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . ... arguments passed s_proportion_diff(). var_labels (character) character label. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/prop_diff.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Proportion Difference ‚Äî prop_diff","text":"s_proportion_diff(): Statistics function estimating difference terms responder proportion. a_proportion_diff(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). estimate_proportion_diff(): Adds descriptive analyze layer rtables pipelines. analysis applied dataframe return estimations, rcells. ellipsis (...) conveys arguments s_proportion_diff(), instance na.rm = FALSE missing data accounted .","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/prop_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proportion Difference ‚Äî prop_diff","text":"","code":"# Summary  ## \"Mid\" case: 4/4 respond in group A, 1/2 respond in group B. nex <- 100 # Number of example rows dta <- data.frame(   \"rsp\" = sample(c(TRUE, FALSE), nex, TRUE),   \"grp\" = sample(c(\"A\", \"B\"), nex, TRUE),   \"f1\" = sample(c(\"a1\", \"a2\"), nex, TRUE),   \"f2\" = sample(c(\"x\", \"y\", \"z\"), nex, TRUE),   stringsAsFactors = TRUE )  s_proportion_diff(   df = subset(dta, grp == \"A\"),   .var = \"rsp\",   .ref_group = subset(dta, grp == \"B\"),   .in_ref_col = FALSE,   conf_level = 0.90,   method = \"ha\" ) #> $diff #> [1] -8.05153 #> attr(,\"label\") #> [1] \"Difference in Response rate (%)\" #>  #> $diff_ci #> [1] -25.754477   9.651418 #> attr(,\"label\") #> [1] \"90% CI (Anderson-Hauck)\" #>   # CMH example with strata s_proportion_diff(   df = subset(dta, grp == \"A\"),   .var = \"rsp\",   .ref_group = subset(dta, grp == \"B\"),   .in_ref_col = FALSE,   variables = list(strata = c(\"f1\", \"f2\")),   conf_level = 0.90,   method = \"cmh\" ) #> $diff #> [1] -8.240459 #> attr(,\"label\") #> [1] \"Difference in Response rate (%)\" #>  #> $diff_ci #> [1] -24.002675   7.521757 #> attr(,\"label\") #> [1] \"90% CI (CMH, without correction)\" #>   a_proportion_diff(   df = subset(dta, grp == \"A\"),   .var = \"rsp\",   .ref_group = subset(dta, grp == \"B\"),   .in_ref_col = FALSE,   conf_level = 0.90,   method = \"ha\" ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod                       row_label #> 1     diff           -8.1          0 Difference in Response rate (%) #> 2  diff_ci   (-25.8, 9.7)          1         90% CI (Anderson-Hauck)  l <- basic_table() %>%   split_cols_by(var = \"grp\", ref_group = \"B\") %>%   estimate_proportion_diff(     vars = \"rsp\",     conf_level = 0.90,     method = \"ha\"   )  build_table(l, df = dta) #>                                   B        A       #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Difference in Response rate (%)           -8.1     #>   90% CI (Anderson-Hauck)             (-25.8, 9.7)"},{"path":"https://insightsengineering.github.io/tern/main/reference/prop_diff_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Difference Test for Two Proportions ‚Äî prop_diff_test","title":"Difference Test for Two Proportions ‚Äî prop_diff_test","text":"Various tests implemented test difference two proportions.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/prop_diff_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Difference Test for Two Proportions ‚Äî prop_diff_test","text":"","code":"s_test_proportion_diff(   df,   .var,   .ref_group,   .in_ref_col,   variables = list(strata = NULL),   method = c(\"chisq\", \"schouten\", \"fisher\", \"cmh\") )  a_test_proportion_diff(   df,   .var,   .ref_group,   .in_ref_col,   variables = list(strata = NULL),   method = c(\"chisq\", \"schouten\", \"fisher\", \"cmh\") )  test_proportion_diff(   lyt,   vars,   ...,   var_labels = vars,   show_labels = \"hidden\",   table_names = vars,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/prop_diff_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Difference Test for Two Proportions ‚Äî prop_diff_test","text":"df (data.frame) data set containing analysis variables. .var (string) single variable name passed rtables requested statistics function. .ref_group (data.frame vector) data corresponding reference group. .in_ref_col (logical)TRUE working reference level, FALSE otherwise. variables (named list string) list additional analysis variables. method (string) one chisq, cmh, fisher, schouten; specifies test used calculate p-value. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . ... arguments passed s_test_proportion_diff(). var_labels (character) character label. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels. tbl (matrix) matrix two groups rows binary response (TRUE/FALSE) columns.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/prop_diff_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Difference Test for Two Proportions ‚Äî prop_diff_test","text":"Named list single item pval attribute label describing method used. p-value tests null hypothesis proportions two groups .","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/prop_diff_test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Difference Test for Two Proportions ‚Äî prop_diff_test","text":"s_test_proportion_diff(): Statistics function tests difference two proportions. a_test_proportion_diff(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). test_proportion_diff(): Layout creating function can used creating tables, can take statistics function arguments additional format arguments.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/prop_diff_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Difference Test for Two Proportions ‚Äî prop_diff_test","text":"","code":"# Statistics function dta <- data.frame(   rsp = sample(c(TRUE, FALSE), 100, TRUE),   grp = factor(rep(c(\"A\", \"B\"), each = 50)),   strat = factor(rep(c(\"V\", \"W\", \"X\", \"Y\", \"Z\"), each = 20)) )  # Internal function - s_test_proportion_diff if (FALSE) { s_test_proportion_diff(   df = subset(dta, grp == \"A\"),   .var = \"rsp\",   .ref_group = subset(dta, grp == \"B\"),   .in_ref_col = FALSE,   variables = list(strata = \"strat\"),   method = \"cmh\" ) }  # Internal function - a_test_proportion_diff if (FALSE) { a_test_proportion_diff(   df = subset(dta, grp == \"A\"),   .var = \"rsp\",   .ref_group = subset(dta, grp == \"B\"),   .in_ref_col = FALSE,   variables = list(strata = \"strat\"),   method = \"cmh\" ) }  # With `rtables` pipelines. l <- basic_table() %>%   split_cols_by(var = \"grp\", ref_group = \"B\") %>%   test_proportion_diff(     vars = \"rsp\",     method = \"cmh\", variables = list(strata = \"strat\")   )  build_table(l, df = dta) #>                                            B     A    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #>   p-value (Cochran-Mantel-Haenszel Test)       1.0000"},{"path":"https://insightsengineering.github.io/tern/main/reference/prune_occurrences.html","id":null,"dir":"Reference","previous_headings":"","what":"Occurrence Table Pruning ‚Äî prune_occurrences","title":"Occurrence Table Pruning ‚Äî prune_occurrences","text":"Family constructor condition functions flexibly prune occurrence tables. condition functions always return whether row result higher threshold. Since class CombinationFunction() can logically combined condition functions.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/prune_occurrences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Occurrence Table Pruning ‚Äî prune_occurrences","text":"","code":"keep_rows(row_condition)  keep_content_rows(content_row_condition)  has_count_in_cols(atleast, ...)  has_count_in_any_col(atleast, ...)  has_fraction_in_cols(atleast, ...)  has_fraction_in_any_col(atleast, ...)  has_fractions_difference(atleast, ...)  has_counts_difference(atleast, ...)"},{"path":"https://insightsengineering.github.io/tern/main/reference/prune_occurrences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Occurrence Table Pruning ‚Äî prune_occurrences","text":"row_condition (CombinationFunction) condition function works individual analysis rows flags whether kept pruned table. content_row_condition (CombinationFunction) condition function works individual first content rows leaf tables flags whether leaf tables kept pruned table. atleast (count proportion) threshold met order keep row. ... arguments row column access, see rtables_access: either col_names (character) including names columns used, alternatively col_indices (integer) giving indices directly instead.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/prune_occurrences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Occurrence Table Pruning ‚Äî prune_occurrences","text":"keep_rows() returns pruning function can used rtables::prune_table() [rtables::TableTree()] objects. keep_content_rows() also returns pruning function, difference checks condition first content row leaf tables table. has_count_in_cols() returns condition function sums counts specified column. has_count_in_any_col() returns condition function compares counts specified columns threshold. has_fraction_in_cols() returns condition function sums counts specified column, computes fraction dividing total column counts. has_fraction_in_cols() returns condition function looks fractions specified columns checks whether fulfill threshold. has_fractions_difference() returns condition function extracts fractions specified column, computes difference minimum maximum. has_counts_difference() returns condition function extracts counts specified column, computes difference minimum maximum.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/prune_occurrences.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Occurrence Table Pruning ‚Äî prune_occurrences","text":"keep_rows(): constructor creating pruning functions based row condition function. removes analysis rows (TableRow) pruned, .e., fulfill row condition. removes sub tree children left. keep_content_rows(): constructor creating pruning functions based condition (first) content row leaf tables. removes leaf tables first content row fulfill condition. check individual rows. proceeds recursively removing sub tree children left. has_count_in_cols(): constructor creating condition functions total counts specified columns. has_count_in_any_col(): constructor creating condition functions counts specified columns satisfying threshold. has_fraction_in_cols(): constructor creating condition functions total fraction specified columns. has_fraction_in_any_col(): constructor creating condition functions fraction specified columns. has_fractions_difference(): constructor creating condition function checks difference fractions reported specified column. has_counts_difference(): constructor creating condition function checks difference counts reported specified column.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/prune_occurrences.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Occurrence Table Pruning ‚Äî prune_occurrences","text":"Since table specifications worded positively, name constructor condition functions positively, . However, note result keep_rows() says pruned though, conform rtables::prune_table() interface.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/prune_occurrences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Occurrence Table Pruning ‚Äî prune_occurrences","text":"","code":"if (FALSE) { tab <- basic_table() %>%   split_cols_by(\"ARM\") %>%   split_rows_by(\"RACE\") %>%   split_rows_by(\"STRATA1\") %>%   summarize_row_groups() %>%   summarize_vars(\"COUNTRY\", .stats = \"count_fraction\") %>%   build_table(DM) }  if (FALSE) { # `keep_rows` is_non_empty <- !CombinationFunction(all_zero_or_na) prune_table(tab, keep_rows(is_non_empty)) } # `keep_content_rows` # Internal function - has_count_in_cols if (FALSE) { more_than_twenty <- has_count_in_cols(atleast = 20L, col_names = names(tab)) prune_table(tab, keep_content_rows(more_than_twenty)) }  # Internal function - has_count_in_cols if (FALSE) { more_than_one <- has_count_in_cols(atleast = 1L, col_names = names(tab)) prune_table(tab, keep_rows(more_than_one)) }  if (FALSE) { # `has_count_in_any_col` any_more_than_one <- has_count_in_any_col(atleast = 1L, col_names = names(tab)) prune_table(tab, keep_rows(any_more_than_one)) } if (FALSE) { # `has_fraction_in_cols` more_than_five_percent <- has_fraction_in_cols(atleast = 0.05, col_names = names(tab)) prune_table(tab, keep_rows(more_than_five_percent)) } if (FALSE) { # `has_fraction_in_any_col` any_atleast_five_percent <- has_fraction_in_any_col(atleast = 0.05, col_names = names(tab)) prune_table(tab, keep_rows(more_than_five_percent)) } if (FALSE) { # `has_fractions_difference` more_than_five_percent_diff <- has_fractions_difference(atleast = 0.05, col_names = names(tab)) prune_table(tab, keep_rows(more_than_five_percent_diff)) } # Internal function - has_counts_difference if (FALSE) { more_than_one_diff <- has_counts_difference(atleast = 1L, col_names = names(tab)) prune_table(tab, keep_rows(more_than_one_diff)) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/range_noinf.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-implemented range.default default S3 method for numerical objects only.\nIt returns c(NA, NA) instead of c(-Inf, Inf) for zero-length data\nwithout any warnings. ‚Äî range_noinf","title":"Re-implemented range.default default S3 method for numerical objects only.\nIt returns c(NA, NA) instead of c(-Inf, Inf) for zero-length data\nwithout any warnings. ‚Äî range_noinf","text":"Re-implemented range.default default S3 method numerical objects . returns c(NA, NA) instead c(-Inf, Inf) zero-length data without warnings.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/range_noinf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-implemented range.default default S3 method for numerical objects only.\nIt returns c(NA, NA) instead of c(-Inf, Inf) for zero-length data\nwithout any warnings. ‚Äî range_noinf","text":"","code":"range_noinf(x, na.rm = FALSE, finite = FALSE)"},{"path":"https://insightsengineering.github.io/tern/main/reference/range_noinf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-implemented range.default default S3 method for numerical objects only.\nIt returns c(NA, NA) instead of c(-Inf, Inf) for zero-length data\nwithout any warnings. ‚Äî range_noinf","text":"x numeric S3 class, sequence numbers range computed. na.rm (logical) indicating NA omitted. finite (logical) indicating non-finite elements removed.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/range_noinf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-implemented range.default default S3 method for numerical objects only.\nIt returns c(NA, NA) instead of c(-Inf, Inf) for zero-length data\nwithout any warnings. ‚Äî range_noinf","text":"2-elements vector class numeric.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/range_noinf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-implemented range.default default S3 method for numerical objects only.\nIt returns c(NA, NA) instead of c(-Inf, Inf) for zero-length data\nwithout any warnings. ‚Äî range_noinf","text":"","code":"# Internal function - range_noinf if (FALSE) { range_noinf(1:5) range_noinf(c(1:5, NA, NA), na.rm = TRUE) range_noinf(numeric(), na.rm = TRUE) range_noinf(c(1:5, NA, NA, Inf), na.rm = TRUE, finite = TRUE) range_noinf(Inf) range_noinf(Inf, na.rm = TRUE, finite = TRUE) range_noinf(c(Inf, NA), na.rm = FALSE, finite = TRUE) range_noinf(c(1, Inf, NA), na.rm = FALSE, finite = TRUE) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/reapply_varlabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Reapply Variable Labels ‚Äî reapply_varlabels","title":"Reapply Variable Labels ‚Äî reapply_varlabels","text":"helper function used tests.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/reapply_varlabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reapply Variable Labels ‚Äî reapply_varlabels","text":"","code":"reapply_varlabels(x, varlabels, ...)"},{"path":"https://insightsengineering.github.io/tern/main/reference/reapply_varlabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reapply Variable Labels ‚Äî reapply_varlabels","text":"x (vector) vector elements needs new labels. varlabels (character) vector labels x. ... parameters added list.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/response_biomarkers_subgroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate Biomarker Effects on Binary Response by Subgroup ‚Äî response_biomarkers_subgroups","title":"Tabulate Biomarker Effects on Binary Response by Subgroup ‚Äî response_biomarkers_subgroups","text":"Tabulate estimated effects multiple continuous biomarker variables binary response endpoint across population subgroups.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/response_biomarkers_subgroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate Biomarker Effects on Binary Response by Subgroup ‚Äî response_biomarkers_subgroups","text":"","code":"tabulate_rsp_biomarkers(   df,   vars = c(\"n_tot\", \"n_rsp\", \"prop\", \"or\", \"ci\", \"pval\") )"},{"path":"https://insightsengineering.github.io/tern/main/reference/response_biomarkers_subgroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate Biomarker Effects on Binary Response by Subgroup ‚Äî response_biomarkers_subgroups","text":"df (data.frame) containing analysis variables, returned extract_rsp_biomarkers(). vars (character) name statistics reported among n_tot (total number patients per group), n_rsp (total number responses per group), prop (total response proportion per group), (odds ratio), ci (confidence interval odds ratio) pval (p value effect). Note, statistics n_tot, ci required.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/response_biomarkers_subgroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabulate Biomarker Effects on Binary Response by Subgroup ‚Äî response_biomarkers_subgroups","text":"functions create layout starting data frame contains required statistics. tables typically used input forest plots.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/response_biomarkers_subgroups.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tabulate Biomarker Effects on Binary Response by Subgroup ‚Äî response_biomarkers_subgroups","text":"contrast tabulate_rsp_subgroups() tabulation function start input layout lyt. internally table created combining multiple subtables.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/response_biomarkers_subgroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate Biomarker Effects on Binary Response by Subgroup ‚Äî response_biomarkers_subgroups","text":"","code":"library(dplyr) library(forcats)  adrs <- tern_ex_adrs adrs_labels <- formatters::var_labels(adrs)  adrs_f <- adrs %>%   filter(PARAMCD == \"BESRSPI\") %>%   mutate(rsp = AVALC == \"CR\") formatters::var_labels(adrs_f) <- c(adrs_labels, \"Response\") if (FALSE) { ## Table with default columns. # df <- <need_data_input_to_work> tabulate_rsp_biomarkers(df)  ## Table with a manually chosen set of columns: leave out \"pval\", reorder. tab <- tabulate_rsp_biomarkers(   df = df,   vars = c(\"n_rsp\", \"ci\", \"n_tot\", \"prop\", \"or\") )  ## Finally produce the forest plot. g_forest(tab, xlim = c(0.7, 1.4)) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/response_subgroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate Binary Response by Subgroup ‚Äî response_subgroups","title":"Tabulate Binary Response by Subgroup ‚Äî response_subgroups","text":"Tabulate statistics response rate odds ratio population subgroups.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/response_subgroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate Binary Response by Subgroup ‚Äî response_subgroups","text":"","code":"a_response_subgroups(   .formats = list(n = \"xx\", n_rsp = \"xx\", prop = \"xx.x%\", n_tot = \"xx\", or =     list(format_extreme_values(2L)), ci = list(format_extreme_values_ci(2L)), pval =     \"x.xxxx | (<0.0001)\") )  tabulate_rsp_subgroups(lyt, df, vars = c(\"n_tot\", \"n\", \"prop\", \"or\", \"ci\"))"},{"path":"https://insightsengineering.github.io/tern/main/reference/response_subgroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate Binary Response by Subgroup ‚Äî response_subgroups","text":".formats (named character list) formats statistics. lyt (layout) input layout analyses added . df (list) data frames containing analysis variables. List created using extract_rsp_subgroups(). vars (character) name statistics reported among n (total number observations per group), n_rsp (number responders per group), prop (proportion responders), n_tot (total number observations), (odds ratio), ci (confidence interval odds ratio) pval (p value effect). Note, statistics n_tot, ci required. data (data.frame) dataset containing variables summarize. groups_lists (named list list) optionally contains subgroups variable list, specifies new group levels via names levels belong character vectors elements list. label_all (string) label total population analysis. method (string) specifies test used calculate p-value difference two proportions. options, see s_test_proportion_diff(). Default NULL test performed.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/response_subgroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabulate Binary Response by Subgroup ‚Äî response_subgroups","text":"functions create layout starting data frame contains required statistics. Tables typically used part forest plot.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/response_subgroups.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Tabulate Binary Response by Subgroup ‚Äî response_subgroups","text":"a_response_subgroups(): Formatted Analysis function used format results extract_rsp_subgroups(). Returns list Formatted Analysis functions one element per statistic. tabulate_rsp_subgroups(): table creating function.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/response_subgroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate Binary Response by Subgroup ‚Äî response_subgroups","text":"","code":"library(dplyr) library(forcats)  adrs <- tern_ex_adrs adrs_labels <- formatters::var_labels(adrs)  adrs_f <- adrs %>%   filter(PARAMCD == \"BESRSPI\") %>%   filter(ARM %in% c(\"A: Drug X\", \"B: Placebo\")) %>%   droplevels() %>%   mutate(     # Reorder levels of factor to make the placebo group the reference arm.     ARM = fct_relevel(ARM, \"B: Placebo\"),     rsp = AVALC == \"CR\"   ) formatters::var_labels(adrs_f) <- c(adrs_labels, \"Response\")  # Unstratified analysis. df <- extract_rsp_subgroups(   variables = list(rsp = \"rsp\", arm = \"ARM\", subgroups = c(\"SEX\", \"BMRKR2\")),   data = adrs_f ) df #> $prop #>           arm  n n_rsp      prop     subgroup    var #> 1  B: Placebo 73    50 0.6849315 All Patients    ALL #> 2   A: Drug X 69    59 0.8550725 All Patients    ALL #> 3  B: Placebo 40    25 0.6250000            F    SEX #> 4   A: Drug X 38    36 0.9473684            F    SEX #> 5  B: Placebo 33    25 0.7575758            M    SEX #> 6   A: Drug X 31    23 0.7419355            M    SEX #> 7  B: Placebo 24    13 0.5416667          LOW BMRKR2 #> 8   A: Drug X 26    21 0.8076923          LOW BMRKR2 #> 9  B: Placebo 23    17 0.7391304       MEDIUM BMRKR2 #> 10  A: Drug X 26    23 0.8846154       MEDIUM BMRKR2 #> 11 B: Placebo 26    20 0.7692308         HIGH BMRKR2 #> 12  A: Drug X 17    15 0.8823529         HIGH BMRKR2 #>                       var_label row_type #> 1                  All Patients  content #> 2                  All Patients  content #> 3                           Sex analysis #> 4                           Sex analysis #> 5                           Sex analysis #> 6                           Sex analysis #> 7  Continuous Level Biomarker 2 analysis #> 8  Continuous Level Biomarker 2 analysis #> 9  Continuous Level Biomarker 2 analysis #> 10 Continuous Level Biomarker 2 analysis #> 11 Continuous Level Biomarker 2 analysis #> 12 Continuous Level Biomarker 2 analysis #>  #> $or #>   arm n_tot        or       lcl       ucl conf_level     subgroup    var #> 1       142  2.714000 1.1804488  6.239827       0.95 All Patients    ALL #> 2        78 10.800000 2.2669576 51.452218       0.95            F    SEX #> 3        64  0.920000 0.2966470  2.853223       0.95            M    SEX #> 4        50  3.553846 1.0047370 12.570277       0.95          LOW BMRKR2 #> 5        49  2.705882 0.5911718 12.385232       0.95       MEDIUM BMRKR2 #> 6        43  2.250000 0.3970298 12.750933       0.95         HIGH BMRKR2 #>                      var_label row_type #> 1                 All Patients  content #> 2                          Sex analysis #> 3                          Sex analysis #> 4 Continuous Level Biomarker 2 analysis #> 5 Continuous Level Biomarker 2 analysis #> 6 Continuous Level Biomarker 2 analysis #>  # Internal function - a_response_subgroups if (FALSE) { a_response_subgroups(.formats = list(\"n\" = \"xx\", \"prop\" = \"xx.xx%\")) }  ## Table with default columns. basic_table() %>%   tabulate_rsp_subgroups(df) #> Baseline Risk Factors                       B: Placebo           A: Drug X                                  #>                                Total n   n    Response (%)   n    Response (%)   Odds Ratio      95% CI     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> All Patients                     142     73      68.5%       69      85.5%          2.71      (1.18, 6.24)  #> Sex                                                                                                         #>   F                              78      40      62.5%       38      94.7%         10.80      (2.27, 51.45) #>   M                              64      33      75.8%       31      74.2%          0.92      (0.30, 2.85)  #> Continuous Level Biomarker 2                                                                                #>   LOW                            50      24      54.2%       26      80.8%          3.55      (1.00, 12.57) #>   MEDIUM                         49      23      73.9%       26      88.5%          2.71      (0.59, 12.39) #>   HIGH                           43      26      76.9%       17      88.2%          2.25      (0.40, 12.75)  ## Table with selected columns. basic_table() %>%   tabulate_rsp_subgroups(     df = df,     vars = c(\"n_tot\", \"n\", \"n_rsp\", \"prop\", \"or\", \"ci\")   ) #> Baseline Risk Factors                              B: Placebo                       A: Drug X                                         #>                                Total n   n    Responders   Response (%)   n    Responders   Response (%)   Odds Ratio      95% CI     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> All Patients                     142     73       50          68.5%       69       59          85.5%          2.71      (1.18, 6.24)  #> Sex                                                                                                                                   #>   F                              78      40       25          62.5%       38       36          94.7%         10.80      (2.27, 51.45) #>   M                              64      33       25          75.8%       31       23          74.2%          0.92      (0.30, 2.85)  #> Continuous Level Biomarker 2                                                                                                          #>   LOW                            50      24       13          54.2%       26       21          80.8%          3.55      (1.00, 12.57) #>   MEDIUM                         49      23       17          73.9%       26       23          88.5%          2.71      (0.59, 12.39) #>   HIGH                           43      26       20          76.9%       17       15          88.2%          2.25      (0.40, 12.75)"},{"path":"https://insightsengineering.github.io/tern/main/reference/rtables_access.html","id":null,"dir":"Reference","previous_headings":"","what":"rtables Access Helper Functions ‚Äî rtables_access","title":"rtables Access Helper Functions ‚Äî rtables_access","text":"couple functions help accessing data rtables objects. Currently work occurrence tables, defined count first element fraction second element cell.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/rtables_access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rtables Access Helper Functions ‚Äî rtables_access","text":"","code":"h_row_first_values(table_row, col_names = NULL, col_indices = NULL)  h_row_counts(table_row, col_names = NULL, col_indices = NULL)  h_row_fractions(table_row, col_names = NULL, col_indices = NULL)  h_col_counts(table, col_names = NULL, col_indices = NULL)  h_content_first_row(table)  is_leaf_table(table)  check_names_indices(table_row, col_names = NULL, col_indices = NULL)"},{"path":"https://insightsengineering.github.io/tern/main/reference/rtables_access.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rtables Access Helper Functions ‚Äî rtables_access","text":"table_row (TableRow) analysis row occurrence table. col_names (character) names columns extract . col_indices (integer) indices columns extract . col_names provided, inferred names table_row. (Note currently works well single column split.) table (VTableNodeInfo) occurrence table row.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/rtables_access.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"rtables Access Helper Functions ‚Äî rtables_access","text":"h_row_first_values(): helper function extract first values content cell specified columns TableRow. Defaults columns. h_row_counts(): Helper function extracts row values checks convertible integers (integerish values). h_row_fractions(): helper function extract fractions specified columns TableRow. specifically extracts second values content cell checks fraction. h_col_counts(): Helper function extract column counts specified columns table. h_content_first_row(): Helper function get first row content table current table. is_leaf_table(): Helper function says whether current table leaf tree. check_names_indices(): Internal helper function tests standard inputs column indices.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/rtables_access.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rtables Access Helper Functions ‚Äî rtables_access","text":"","code":"tbl <- basic_table() %>%   split_cols_by(\"ARM\") %>%   split_rows_by(\"RACE\") %>%   analyze(\"AGE\", function(x) {     list(       \"mean (sd)\" = rcell(c(mean(x), sd(x)), format = \"xx.x (xx.x)\"),       \"n\" = length(x),       \"frac\" = rcell(c(0.1, 0.1), format = \"xx (xx)\")     )   }) %>%   build_table(tern_ex_adsl) %>%   prune_table() tree_row_elem <- collect_leaves(tbl[2, ])[[1]] result <- max(h_row_first_values(tree_row_elem)) result #> [1] 35.31214  # Row counts (integer values) if (FALSE) { h_row_counts(tree_row_elem) # Fails because there are no integers } # Using values with integers tree_row_elem <- collect_leaves(tbl[3, ])[[1]] result <- h_row_counts(tree_row_elem) # result  # Row fractions tree_row_elem <- collect_leaves(tbl[4, ])[[1]] h_row_fractions(tree_row_elem) #>      A: Drug X     B: Placebo C: Combination  #>            0.1            0.1            0.1"},{"path":"https://insightsengineering.github.io/tern/main/reference/s_cox_multivariate.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate Cox Model - Summarized Results ‚Äî s_cox_multivariate","title":"Multivariate Cox Model - Summarized Results ‚Äî s_cox_multivariate","text":"Analyses based multivariate Cox model usually performed Controlled Substance Reporting regulatory documents serve exploratory purposes (e.g., publication). practice, model usually includes main effects (without interaction terms). produces hazard ratio estimates covariates included model. analysis follows principles (e.g., stratified vs. unstratified analysis tie handling) usual Cox model analysis. Since usually pre-specified hypothesis testing analysis, p.values need interpreted caution. (Statistical Analysis Clinical Trials Data R, NEST's bookdown)","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/s_cox_multivariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate Cox Model - Summarized Results ‚Äî s_cox_multivariate","text":"","code":"s_cox_multivariate(   formula,   data,   conf_level = 0.95,   pval_method = c(\"wald\", \"likelihood\"),   ... )"},{"path":"https://insightsengineering.github.io/tern/main/reference/s_cox_multivariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate Cox Model - Summarized Results ‚Äî s_cox_multivariate","text":"formula (formula) formula corresponding investigated survival::Surv() survival model including covariates. data (data.frame) data frame includes variable formula covariates. conf_level (proportion) confidence level hazard ratio interval estimations. Default 0.95. pval_method (character) method used estimation p-values, one \"wald\" (default) \"likelihood\". ... Optional parameters passed survival::coxph(). Can include ties, character string specifying method tie handling, one exact (default), efron, breslow.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/s_cox_multivariate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate Cox Model - Summarized Results ‚Äî s_cox_multivariate","text":"output limited single effect terms. Work ongoing estimation interaction terms scope defined  Global Data Standards Repository (GDS_Standard_TLG_Specs_Tables_2.doc).","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/s_cox_multivariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate Cox Model - Summarized Results ‚Äî s_cox_multivariate","text":"","code":"library(dplyr)  adtte <- tern_ex_adtte adtte_f <- subset(adtte, PARAMCD == \"OS\") # _f: filtered adtte_f <- filter(   adtte_f,   PARAMCD == \"OS\" &     SEX %in% c(\"F\", \"M\") &     RACE %in% c(\"ASIAN\", \"BLACK OR AFRICAN AMERICAN\", \"WHITE\") ) adtte_f$SEX <- droplevels(adtte_f$SEX) adtte_f$RACE <- droplevels(adtte_f$RACE)  # Internal function - s_cox_multivariate if (FALSE) { s_cox_multivariate(   formula = Surv(time = AVAL, event = 1 - CNSR) ~ (ARMCD + RACE + AGE)^2, data = adtte_f ) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/sas_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Strings to NA ‚Äî sas_na","title":"Convert Strings to NA ‚Äî sas_na","text":"SAS imports missing data empty strings strings whitespaces . helper function can used convert values NAs.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/sas_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Strings to NA ‚Äî sas_na","text":"","code":"sas_na(x, empty = TRUE, whitespaces = TRUE)"},{"path":"https://insightsengineering.github.io/tern/main/reference/sas_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Strings to NA ‚Äî sas_na","text":"x factor character vector empty boolean true empty strings get replaced NA whitespaces boolean, true strings made whitespaces get replaced NA","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/sas_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Strings to NA ‚Äî sas_na","text":"","code":"sas_na(c(\"1\", \"\", \" \", \"   \", \"b\")) #> [1] \"1\" NA  NA  NA  \"b\" sas_na(factor(c(\"\", \" \", \"b\"))) #> [1] <NA> <NA> b    #> Levels: b  is.na(sas_na(c(\"1\", \"\", \" \", \"   \", \"b\"))) #> [1] FALSE  TRUE  TRUE  TRUE FALSE"},{"path":"https://insightsengineering.github.io/tern/main/reference/score_occurrences.html","id":null,"dir":"Reference","previous_headings":"","what":"Occurrence Table Sorting ‚Äî score_occurrences","title":"Occurrence Table Sorting ‚Äî score_occurrences","text":"Functions score occurrence table subtables rows can used sorting occurrence tables.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/score_occurrences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Occurrence Table Sorting ‚Äî score_occurrences","text":"","code":"score_occurrences(table_row)  score_occurrences_cols(...)  score_occurrences_subtable(...)  score_occurrences_cont_cols(...)"},{"path":"https://insightsengineering.github.io/tern/main/reference/score_occurrences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Occurrence Table Sorting ‚Äî score_occurrences","text":"table_row (TableRow) analysis row occurrence table. ... arguments row column access, see rtables_access: either col_names (character) including names columns used, alternatively col_indices (integer) giving indices directly instead.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/score_occurrences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Occurrence Table Sorting ‚Äî score_occurrences","text":"score_occurrences() returns sum counts across columns table row. score_occurrences_cols() returns function sums counts across specified columns table row. score_occurrences_subtable() returns function sums counts subtable across specified columns.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/score_occurrences.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Occurrence Table Sorting ‚Äî score_occurrences","text":"score_occurrences(): Scoring function sums counts across columns. fail anything else counts used. score_occurrences_cols(): Scoring functions can produced constructor include specific columns scoring. See h_row_counts() information. score_occurrences_subtable(): Scoring functions produced constructor can used subtables: sum specified column counts subtable. useful available content row summing counts. score_occurrences_cont_cols(): Produce score function sorting table summing first content row specified columns. Note extending rtables::cont_n_onecol() rtables::cont_n_allcols().","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/score_occurrences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Occurrence Table Sorting ‚Äî score_occurrences","text":"","code":"lyt <- basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   analyze_num_patients(     vars = \"USUBJID\",     .stats = c(\"unique\"),     .labels = c(\"Total number of patients with at least one event\")   ) %>%   split_rows_by(\"AEBODSYS\", child_labels = \"visible\", nested = FALSE) %>%   summarize_num_patients(     var = \"USUBJID\",     .stats = c(\"unique\", \"nonunique\"),     .labels = c(       \"Total number of patients with at least one event\",       \"Total number of events\"     )   ) %>%   count_occurrences(vars = \"AEDECOD\")  tbl <- build_table(lyt, tern_ex_adae, alt_counts_df = tern_ex_adsl) %>%   prune_table()  tbl_sorted <- tbl %>%   sort_at_path(path = c(\"AEBODSYS\", \"*\", \"AEDECOD\"), scorefun = score_occurrences)  tbl_sorted #>                                                      A: Drug X    B: Placebo   C: Combination #>                                                        (N=69)       (N=73)         (N=58)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Total number of patients with at least one event     59 (85.5%)   57 (78.1%)     48 (82.8%)   #> cl D.1                                                                                        #>   Total number of patients with at least one event   29 (42.0%)   27 (37.0%)     20 (34.5%)   #>   Total number of events                                 39           35             28       #>     dcd D.1.1.4.2                                    16 (23.2%)   13 (17.8%)     16 (27.6%)   #>     dcd D.1.1.1.1                                    17 (24.6%)   18 (24.7%)     7 (12.1%)    #> cl C.1                                                                                        #>   Total number of patients with at least one event   15 (21.7%)   13 (17.8%)     18 (31.0%)   #>   Total number of events                                 17           15             19       #>     dcd C.1.1.1.3                                    15 (21.7%)   13 (17.8%)     18 (31.0%)   #> cl C.2                                                                                        #>   Total number of patients with at least one event   20 (29.0%)   14 (19.2%)     10 (17.2%)   #>   Total number of events                                 21           15             14       #>     dcd C.2.1.2.1                                    20 (29.0%)   14 (19.2%)     10 (17.2%)   #> cl B.2                                                                                        #>   Total number of patients with at least one event   29 (42.0%)   27 (37.0%)     24 (41.4%)   #>   Total number of events                                 40           38             33       #>     dcd B.2.2.3.1                                    17 (24.6%)   15 (20.5%)     16 (27.6%)   #>     dcd B.2.1.2.1                                    17 (24.6%)   16 (21.9%)     13 (22.4%)   #> cl B.1                                                                                        #>   Total number of patients with at least one event   15 (21.7%)   19 (26.0%)     15 (25.9%)   #>   Total number of events                                 19           19             18       #>     dcd B.1.1.1.1                                    15 (21.7%)   19 (26.0%)     15 (25.9%)   #> cl D.2                                                                                        #>   Total number of patients with at least one event   21 (30.4%)   20 (27.4%)     12 (20.7%)   #>   Total number of events                                 27           22             15       #>     dcd D.2.1.5.3                                    21 (30.4%)   20 (27.4%)     12 (20.7%)   #> cl A.1                                                                                        #>   Total number of patients with at least one event   31 (44.9%)   24 (32.9%)     27 (46.6%)   #>   Total number of events                                 39           33             35       #>     dcd A.1.1.1.1                                    17 (24.6%)   17 (23.3%)     14 (24.1%)   #>     dcd A.1.1.1.2                                    17 (24.6%)   14 (19.2%)     17 (29.3%)    score_cols_a_and_b <- score_occurrences_cols(col_names = c(\"A: Drug X\", \"B: Placebo\"))  # Note that this here just sorts the AEDECOD inside the AEBODSYS. The AEBODSYS are not sorted. # That would require a second pass of `sort_at_path`. tbl_sorted <- tbl %>%   sort_at_path(path = c(\"AEBODSYS\", \"*\", \"AEDECOD\"), scorefun = score_cols_a_and_b)  tbl_sorted #>                                                      A: Drug X    B: Placebo   C: Combination #>                                                        (N=69)       (N=73)         (N=58)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Total number of patients with at least one event     59 (85.5%)   57 (78.1%)     48 (82.8%)   #> cl D.1                                                                                        #>   Total number of patients with at least one event   29 (42.0%)   27 (37.0%)     20 (34.5%)   #>   Total number of events                                 39           35             28       #>     dcd D.1.1.1.1                                    17 (24.6%)   18 (24.7%)     7 (12.1%)    #>     dcd D.1.1.4.2                                    16 (23.2%)   13 (17.8%)     16 (27.6%)   #> cl C.1                                                                                        #>   Total number of patients with at least one event   15 (21.7%)   13 (17.8%)     18 (31.0%)   #>   Total number of events                                 17           15             19       #>     dcd C.1.1.1.3                                    15 (21.7%)   13 (17.8%)     18 (31.0%)   #> cl C.2                                                                                        #>   Total number of patients with at least one event   20 (29.0%)   14 (19.2%)     10 (17.2%)   #>   Total number of events                                 21           15             14       #>     dcd C.2.1.2.1                                    20 (29.0%)   14 (19.2%)     10 (17.2%)   #> cl B.2                                                                                        #>   Total number of patients with at least one event   29 (42.0%)   27 (37.0%)     24 (41.4%)   #>   Total number of events                                 40           38             33       #>     dcd B.2.1.2.1                                    17 (24.6%)   16 (21.9%)     13 (22.4%)   #>     dcd B.2.2.3.1                                    17 (24.6%)   15 (20.5%)     16 (27.6%)   #> cl B.1                                                                                        #>   Total number of patients with at least one event   15 (21.7%)   19 (26.0%)     15 (25.9%)   #>   Total number of events                                 19           19             18       #>     dcd B.1.1.1.1                                    15 (21.7%)   19 (26.0%)     15 (25.9%)   #> cl D.2                                                                                        #>   Total number of patients with at least one event   21 (30.4%)   20 (27.4%)     12 (20.7%)   #>   Total number of events                                 27           22             15       #>     dcd D.2.1.5.3                                    21 (30.4%)   20 (27.4%)     12 (20.7%)   #> cl A.1                                                                                        #>   Total number of patients with at least one event   31 (44.9%)   24 (32.9%)     27 (46.6%)   #>   Total number of events                                 39           33             35       #>     dcd A.1.1.1.1                                    17 (24.6%)   17 (23.3%)     14 (24.1%)   #>     dcd A.1.1.1.2                                    17 (24.6%)   14 (19.2%)     17 (29.3%)    score_subtable_all <- score_occurrences_subtable(col_names = names(tbl))  # Note that this code just sorts the AEBODSYS, not the AEDECOD within AEBODSYS. That # would require a second pass of `sort_at_path`. tbl_sorted <- tbl %>%   sort_at_path(path = c(\"AEBODSYS\"), scorefun = score_subtable_all, decreasing = FALSE)  tbl_sorted #>                                                      A: Drug X    B: Placebo   C: Combination #>                                                        (N=69)       (N=73)         (N=58)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Total number of patients with at least one event     59 (85.5%)   57 (78.1%)     48 (82.8%)   #> cl C.2                                                                                        #>   Total number of patients with at least one event   20 (29.0%)   14 (19.2%)     10 (17.2%)   #>   Total number of events                                 21           15             14       #>     dcd C.2.1.2.1                                    20 (29.0%)   14 (19.2%)     10 (17.2%)   #> cl C.1                                                                                        #>   Total number of patients with at least one event   15 (21.7%)   13 (17.8%)     18 (31.0%)   #>   Total number of events                                 17           15             19       #>     dcd C.1.1.1.3                                    15 (21.7%)   13 (17.8%)     18 (31.0%)   #> cl B.1                                                                                        #>   Total number of patients with at least one event   15 (21.7%)   19 (26.0%)     15 (25.9%)   #>   Total number of events                                 19           19             18       #>     dcd B.1.1.1.1                                    15 (21.7%)   19 (26.0%)     15 (25.9%)   #> cl D.2                                                                                        #>   Total number of patients with at least one event   21 (30.4%)   20 (27.4%)     12 (20.7%)   #>   Total number of events                                 27           22             15       #>     dcd D.2.1.5.3                                    21 (30.4%)   20 (27.4%)     12 (20.7%)   #> cl D.1                                                                                        #>   Total number of patients with at least one event   29 (42.0%)   27 (37.0%)     20 (34.5%)   #>   Total number of events                                 39           35             28       #>     dcd D.1.1.1.1                                    17 (24.6%)   18 (24.7%)     7 (12.1%)    #>     dcd D.1.1.4.2                                    16 (23.2%)   13 (17.8%)     16 (27.6%)   #> cl B.2                                                                                        #>   Total number of patients with at least one event   29 (42.0%)   27 (37.0%)     24 (41.4%)   #>   Total number of events                                 40           38             33       #>     dcd B.2.1.2.1                                    17 (24.6%)   16 (21.9%)     13 (22.4%)   #>     dcd B.2.2.3.1                                    17 (24.6%)   15 (20.5%)     16 (27.6%)   #> cl A.1                                                                                        #>   Total number of patients with at least one event   31 (44.9%)   24 (32.9%)     27 (46.6%)   #>   Total number of events                                 39           33             35       #>     dcd A.1.1.1.1                                    17 (24.6%)   17 (23.3%)     14 (24.1%)   #>     dcd A.1.1.1.2                                    17 (24.6%)   14 (19.2%)     17 (29.3%)"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/split_cols_by_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Columns by Groups of Levels ‚Äî split_cols_by_groups","text":"","code":"split_cols_by_groups(lyt, var, groups_list = NULL, ref_group = NULL, ...)"},{"path":"https://insightsengineering.github.io/tern/main/reference/split_cols_by_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Columns by Groups of Levels ‚Äî split_cols_by_groups","text":"lyt (layout) input layout analyses added . var (string) single variable name passed rtables requested statistics function. groups_list (named list character) specifies new group levels via names levels belong character vectors elements list. ref_group (data.frame vector) data corresponding reference group. ... additional arguments, see note section.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/split_cols_by_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Columns by Groups of Levels ‚Äî split_cols_by_groups","text":"modified layout.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/split_cols_by_groups.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Split Columns by Groups of Levels ‚Äî split_cols_by_groups","text":"ellipse (...) conveys arguments rtables::split_cols_by() order, instance, control formats (format), add joint column groups (incl_all).","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/split_cols_by_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Columns by Groups of Levels ‚Äî split_cols_by_groups","text":"","code":"# 1 - Basic use  # Without group combination `split_cols_by_groups` is # equivalent to [rtables::split_cols_by()]. basic_table() %>%   split_cols_by_groups(\"ARM\") %>%   add_colcounts() %>%   analyze(\"AGE\") %>%   build_table(DM) #>        A: Drug X   B: Placebo   C: Combination #>         (N=121)     (N=106)        (N=129)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Mean     34.91       33.02          34.57       # Add a reference column. basic_table() %>%   split_cols_by_groups(\"ARM\", ref_group = \"B: Placebo\") %>%   add_colcounts() %>%   analyze(     \"AGE\",     afun = function(x, .ref_group, .in_ref_col) {       if (.in_ref_col) {         in_rows(\"Diff Mean\" = rcell(NULL))       } else {         in_rows(\"Diff Mean\" = rcell(mean(x) - mean(.ref_group), format = \"xx.xx\"))       }     }   ) %>%   build_table(DM) #>             B: Placebo   A: Drug X   C: Combination #>              (N=106)      (N=121)       (N=129)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Diff Mean                  1.89           1.55       # 2 - Adding group specification  # Manual preparation of the groups. groups <- list(   \"Arms A+B\" = c(\"A: Drug X\", \"B: Placebo\"),   \"Arms A+C\" = c(\"A: Drug X\", \"C: Combination\") )  # Use of split_cols_by_groups without reference column. basic_table() %>%   split_cols_by_groups(\"ARM\", groups) %>%   add_colcounts() %>%   analyze(\"AGE\") %>%   build_table(DM) #>        Arms A+B   Arms A+C #>        (N=227)    (N=250)  #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Mean    34.03      34.73    # Including differentiated output in the reference column. basic_table() %>%   split_cols_by_groups(\"ARM\", groups_list = groups, ref_group = \"Arms A+B\") %>%   analyze(     \"AGE\",     afun = function(x, .ref_group, .in_ref_col) {       if (.in_ref_col) {         in_rows(\"Diff. of Averages\" = rcell(NULL))       } else {         in_rows(\"Diff. of Averages\" = rcell(mean(x) - mean(.ref_group), format = \"xx.xx\"))       }     }   ) %>%   build_table(DM) #>                     Arms A+B   Arms A+C #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Diff. of Averages                0.71    # 3 - Binary list dividing factor levels into reference and treatment  # `combine_groups` defines reference and treatment. groups <- combine_groups(   fct = DM$ARM,   ref = c(\"A: Drug X\", \"B: Placebo\") ) groups #> $`A: Drug X/B: Placebo` #> [1] \"A: Drug X\"  \"B: Placebo\" #>  #> $`C: Combination` #> [1] \"C: Combination\" #>   # Use group definition without reference column. basic_table() %>%   split_cols_by_groups(\"ARM\", groups_list = groups) %>%   add_colcounts() %>%   analyze(\"AGE\") %>%   build_table(DM) #>        A: Drug X/B: Placebo   C: Combination #>              (N=227)             (N=129)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Mean          34.03               34.57        # Use group definition with reference column (first item of groups). basic_table() %>%   split_cols_by_groups(\"ARM\", groups, ref_group = names(groups)[1]) %>%   add_colcounts() %>%   analyze(     \"AGE\",     afun = function(x, .ref_group, .in_ref_col) {       if (.in_ref_col) {         in_rows(\"Diff Mean\" = rcell(NULL))       } else {         in_rows(\"Diff Mean\" = rcell(mean(x) - mean(.ref_group), format = \"xx.xx\"))       }     }   ) %>%   build_table(DM) #>             A: Drug X/B: Placebo   C: Combination #>                   (N=227)             (N=129)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Diff Mean                               0.54"},{"path":"https://insightsengineering.github.io/tern/main/reference/split_text_grob.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Text According To Available Text Width ‚Äî split_text_grob","title":"Split Text According To Available Text Width ‚Äî split_text_grob","text":"Dynamically wrap text.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/split_text_grob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Text According To Available Text Width ‚Äî split_text_grob","text":"","code":"split_text_grob(   text,   x = grid::unit(0.5, \"npc\"),   y = grid::unit(0.5, \"npc\"),   width = grid::unit(1, \"npc\"),   just = \"centre\",   hjust = NULL,   vjust = NULL,   default.units = \"npc\",   name = NULL,   gp = grid::gpar(),   vp = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/split_text_grob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Text According To Available Text Width ‚Äî split_text_grob","text":"text character string x numeric vector unit object specifying x-values. y numeric vector unit object specifying y-values. width unit object specifying max width text just justification text     relative (x, y) location.  two values, first     value specifies horizontal justification second value specifies     vertical justification.  Possible string values : \"left\",     \"right\", \"centre\", \"center\", \"bottom\",     \"top\".  numeric values, 0 means left (bottom) alignment     1 means right (top) alignment. hjust numeric vector specifying horizontal justification.     specified, overrides just setting. vjust numeric vector specifying vertical justification.     specified, overrides just setting. default.units string indicating default units use     x y     given numeric vectors. name character identifier. gp object class \"gpar\", typically output     call function gpar.  basically     list graphical parameter settings. vp Grid viewport object (NULL).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/split_text_grob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split Text According To Available Text Width ‚Äî split_text_grob","text":"code taken R Graphics Paul Murell, 2nd edition","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/split_text_grob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Text According To Available Text Width ‚Äî split_text_grob","text":"","code":"# Internal function - split_text_grob if (FALSE) { sg <- split_text_grob(text = paste(   \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum vitae\",   \"dapibus dolor, ac mattis erat. Nunc metus lectus, imperdiet ut enim eu,\",   \"commodo scelerisque urna. Vestibulum facilisis metus vel nibh tempor, sed\",   \"elementum sem tempus. Morbi quis arcu condimentum, maximus lorem id,\",   \"tristique ante. Nullam a nunc dui. Fusce quis lacus nec ante dignissim\",   \"faucibus nec vitae tellus. Suspendisse mollis et sapien eu ornare. Vestibulum\",   \"placerat neque nec justo efficitur, ornare varius nulla imperdiet. Nunc justo\",   \"sapien, vestibulum eget efficitur eget, porttitor id ante. Nulla tempor\",   \"luctus massa id elementum. Praesent dictum, neque vitae vestibulum malesuada,\",   \"nunc nisi blandit lacus, sit amet tristique odio dui sit amet velit.\" ))  library(grid) grobHeight(sg)  grid.newpage() pushViewport(plotViewport()) grid.rect() grid.draw(sg)  grid.rect(   height = grobHeight(sg), width = unit(1, \"cm\"), gp = gpar(fill = \"red\") )  # stack split_text_grob grid.newpage() pushViewport(plotViewport()) grid.rect() grid.draw(split_text_grob(   c(\"Hello, this is a test\", \"and yet another test\"),   just = c(\"left\", \"top\"), x = 0, y = 1 )) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/stack_grobs.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack Multiple Grobs ‚Äî stack_grobs","title":"Stack Multiple Grobs ‚Äî stack_grobs","text":"Stack grobs new grob 1 column multiple rows layout.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/stack_grobs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack Multiple Grobs ‚Äî stack_grobs","text":"","code":"stack_grobs(   ...,   grobs = list(...),   padding = grid::unit(2, \"line\"),   vp = NULL,   gp = NULL,   name = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/stack_grobs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack Multiple Grobs ‚Äî stack_grobs","text":"... grobs. grobs list grobs. padding unit length 1, space grob. vp viewport object (NULL). gp gpar object. name character identifier grob.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/stack_grobs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack Multiple Grobs ‚Äî stack_grobs","text":"","code":"library(grid)  g1 <- circleGrob(gp = gpar(col = \"blue\")) g2 <- circleGrob(gp = gpar(col = \"red\")) g3 <- textGrob(\"TEST TEXT\") grid.newpage() grid.draw(stack_grobs(g1, g2, g3))  showViewport()   grid.newpage() pushViewport(viewport(layout = grid.layout(1, 2))) vp1 <- viewport(layout.pos.row = 1, layout.pos.col = 2) grid.draw(stack_grobs(g1, g2, g3, vp = vp1, name = \"test\"))  showViewport()  grid.ls(grobs = TRUE, viewports = TRUE, print = FALSE)"},{"path":"https://insightsengineering.github.io/tern/main/reference/stat_mean_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Interval for Mean ‚Äî stat_mean_ci","title":"Confidence Interval for Mean ‚Äî stat_mean_ci","text":"Convenient function calculating mean confidence interval. calculates arithmetic well geometric mean. can used ggplot helper function plotting.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/stat_mean_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Interval for Mean ‚Äî stat_mean_ci","text":"","code":"stat_mean_ci(   x,   conf_level = 0.95,   na.rm = TRUE,   n_min = 2,   gg_helper = TRUE,   geom_mean = FALSE )"},{"path":"https://insightsengineering.github.io/tern/main/reference/stat_mean_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Interval for Mean ‚Äî stat_mean_ci","text":"x (numeric) vector numbers want analyze. conf_level (proportion) confidence level interval. na.rm (flag) whether NA values removed x prior analysis. n_min (number) minimum number non-missing x estimate confidence interval mean. gg_helper (logical)TRUE output aligned use ggplot. geom_mean (logical)TRUE geometric mean calculated","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/stat_mean_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Interval for Mean ‚Äî stat_mean_ci","text":"","code":"stat_mean_ci(sample(10), gg_helper = FALSE) #> mean_ci_lwr mean_ci_upr  #>    3.334149    7.665851   p <- ggplot2::ggplot(mtcars, ggplot2::aes(cyl, mpg)) +   ggplot2::geom_point()  p + ggplot2::stat_summary(   fun.data = stat_mean_ci,   geom = \"errorbar\" )   p + ggplot2::stat_summary(   fun.data = stat_mean_ci,   fun.args = list(conf_level = 0.5),   geom = \"errorbar\" )   p + ggplot2::stat_summary(   fun.data = stat_mean_ci,   fun.args = list(conf_level = 0.5, geom_mean = TRUE),   geom = \"errorbar\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/stat_mean_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"p-Value of the Mean ‚Äî stat_mean_pval","title":"p-Value of the Mean ‚Äî stat_mean_pval","text":"Convenient function calculating two-sided p-value mean.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/stat_mean_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"p-Value of the Mean ‚Äî stat_mean_pval","text":"","code":"stat_mean_pval(x, na.rm = TRUE, n_min = 2, test_mean = 0)"},{"path":"https://insightsengineering.github.io/tern/main/reference/stat_mean_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"p-Value of the Mean ‚Äî stat_mean_pval","text":"x (numeric) vector numbers want analyze. na.rm (flag) whether NA values removed x prior analysis. n_min (number) minimum number non-missing x estimate p-value mean. test_mean (number) mean value test null hypothesis.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/stat_mean_pval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"p-Value of the Mean ‚Äî stat_mean_pval","text":"","code":"stat_mean_pval(sample(10)) #>     p_value  #> 0.000278196   stat_mean_pval(rnorm(10), test_mean = 0.5) #>    p_value  #> 0.01876644"},{"path":"https://insightsengineering.github.io/tern/main/reference/stat_median_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Interval for Median ‚Äî stat_median_ci","title":"Confidence Interval for Median ‚Äî stat_median_ci","text":"Convenient function calculating median confidence interval. can used ggplot helper function plotting.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/stat_median_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Interval for Median ‚Äî stat_median_ci","text":"","code":"stat_median_ci(x, conf_level = 0.95, na.rm = TRUE, gg_helper = TRUE)"},{"path":"https://insightsengineering.github.io/tern/main/reference/stat_median_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Interval for Median ‚Äî stat_median_ci","text":"x (numeric) vector numbers want analyze. conf_level (proportion) confidence level interval. na.rm (flag) whether NA values removed x prior analysis. gg_helper (logical)TRUE output aligned use ggplot.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/stat_median_ci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Interval for Median ‚Äî stat_median_ci","text":"function adapted DescTools/versions/0.99.35/source","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/stat_median_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Interval for Median ‚Äî stat_median_ci","text":"","code":"stat_median_ci(sample(10), gg_helper = FALSE) #> median_ci_lwr median_ci_upr  #>             2             9  #> attr(,\"conf_level\") #> [1] 0.9785156  p <- ggplot2::ggplot(mtcars, ggplot2::aes(cyl, mpg)) +   ggplot2::geom_point() p + ggplot2::stat_summary(   fun.data = stat_median_ci,   geom = \"errorbar\" )"},{"path":"https://insightsengineering.github.io/tern/main/reference/strata_normal_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function for the Estimation of Stratified Quantiles ‚Äî strata_normal_quantile","title":"Helper Function for the Estimation of Stratified Quantiles ‚Äî strata_normal_quantile","text":"function wraps estimation stratified percentiles assume approximation large numbers. necessary case proportions strata unequal.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/strata_normal_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function for the Estimation of Stratified Quantiles ‚Äî strata_normal_quantile","text":"","code":"strata_normal_quantile(vars, weights, conf_level)"},{"path":"https://insightsengineering.github.io/tern/main/reference/strata_normal_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function for the Estimation of Stratified Quantiles ‚Äî strata_normal_quantile","text":"vars (character) variable names primary analysis variable iterated . weights (numeric NULL) weights level strata. NULL, estimated using iterative algorithm proposed Yan Su (2010)  minimizes weighted squared length confidence interval. conf_level (proportion) confidence level interval.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/strata_normal_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function for the Estimation of Stratified Quantiles ‚Äî strata_normal_quantile","text":"","code":"strata_data <- table(data.frame(   \"f1\" = sample(c(TRUE, FALSE), 100, TRUE),   \"f2\" = sample(c(\"x\", \"y\", \"z\"), 100, TRUE),   stringsAsFactors = TRUE )) ns <- colSums(strata_data) ests <- strata_data[\"TRUE\", ] / ns vars <- ests * (1 - ests) / ns weights <- rep(1 / length(ns), length(ns)) strata_normal_quantile(vars, weights, 0.95) #> [1] 1.131693"},{"path":"https://insightsengineering.github.io/tern/main/reference/study_arm.html","id":null,"dir":"Reference","previous_headings":"","what":"Indicate Study Arm Variable in Formula ‚Äî study_arm","title":"Indicate Study Arm Variable in Formula ‚Äî study_arm","text":"use study_arm indicate study arm variable tern formulas.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/study_arm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indicate Study Arm Variable in Formula ‚Äî study_arm","text":"","code":"study_arm(x)"},{"path":"https://insightsengineering.github.io/tern/main/reference/study_arm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indicate Study Arm Variable in Formula ‚Äî study_arm","text":"x arm information","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_ancova.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for analysis of covariance (ANCOVA). ‚Äî summarize_ancova","title":"Summary for analysis of covariance (ANCOVA). ‚Äî summarize_ancova","text":"Summarize results ANCOVA. can used analyze multiple endpoints /multiple timepoints within response variable .var.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_ancova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for analysis of covariance (ANCOVA). ‚Äî summarize_ancova","text":"","code":"s_ancova(   df,   .var,   .df_row,   variables,   .ref_group,   .in_ref_col,   conf_level,   interaction_y = FALSE,   interaction_item = NULL )  a_ancova(   df,   .var,   .df_row,   variables,   .ref_group,   .in_ref_col,   conf_level,   interaction_y = FALSE,   interaction_item = NULL )  summarize_ancova(   lyt,   vars,   var_labels,   ...,   show_labels = \"visible\",   table_names = vars,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL,   interaction_y = FALSE,   interaction_item = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_ancova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for analysis of covariance (ANCOVA). ‚Äî summarize_ancova","text":"df (data.frame) data set containing analysis variables. .var (string) single variable name passed rtables requested statistics function. .df_row (data.frame) data frame across columns given row split. variables (named list string) list additional analysis variables. .ref_group (data.frame vector) data corresponding reference group. .in_ref_col (logical)TRUE working reference level, FALSE otherwise. conf_level (proportion) confidence level interval. interaction_y (character) selected item inside interaction_item column used select specific ANCOVA results. interaction needed, default option FALSE interaction_item (character) name variable interactions arm. interaction needed, default option NULL. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . var_labels (character) character label. ... additional arguments lower level functions. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_ancova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for analysis of covariance (ANCOVA). ‚Äî summarize_ancova","text":"named list 5 statistics: n count complete sample size group. lsmean estimated marginal means group. lsmean_diff difference estimated marginal means comparison reference group. working reference group, empty. lsmean_diff_ci confidence level difference estimated marginal means comparison reference group. pval p-value (adjusted multiple comparisons).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_ancova.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Summary for analysis of covariance (ANCOVA). ‚Äî summarize_ancova","text":"s_ancova(): Statistics function produces named list results investigated linear model. a_ancova(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). summarize_ancova(): Layout creating function can used creating summary tables analysis covariance (ANCOVA).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_ancova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary for analysis of covariance (ANCOVA). ‚Äî summarize_ancova","text":"","code":"library(dplyr)  df <- iris %>% filter(Species == \"virginica\") .df_row <- iris .var <- \"Petal.Length\" variables <- list(arm = \"Species\", covariates = \"Sepal.Length * Sepal.Width\") .ref_group <- iris %>% filter(Species == \"setosa\") conf_level <- 0.95  # Internal function - s_ancova if (FALSE) { s_ancova(   df, .var, .df_row, variables, .ref_group,   .in_ref_col = FALSE,   conf_level, interaction_y = FALSE, interaction_item = NULL ) }  # Internal function - a_ancova if (FALSE) { a_ancova(   df, .var, .df_row, variables, .ref_group,   .in_ref_col = FALSE,   interaction_y = FALSE, interaction_item = NULL, conf_level ) }  basic_table() %>%   split_cols_by(\"Species\", ref_group = \"setosa\") %>%   add_colcounts() %>%   summarize_ancova(     vars = \"Petal.Length\",     variables = list(arm = \"Species\", covariates = NULL),     table_names = \"unadj\",     conf_level = 0.95, var_labels = \"Unadjusted comparison\",     .labels = c(lsmean = \"Mean\", lsmean_diff = \"Difference in Means\")   ) %>%   summarize_ancova(     vars = \"Petal.Length\",     variables = list(arm = \"Species\", covariates = c(\"Sepal.Length\", \"Sepal.Width\")),     table_names = \"adj\",     conf_level = 0.95, var_labels = \"Adjusted comparison (covariates: Sepal.Length and Sepal.Width)\"   ) %>%   build_table(iris) #>                                                                  setosa    versicolor     virginica   #>                                                                  (N=50)      (N=50)         (N=50)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Unadjusted comparison                                                                                 #>   n                                                                50          50             50      #>   Mean                                                            1.46        4.26           5.55     #>   Difference in Means                                                         2.80           4.09     #>     95% CI                                                                (2.63, 2.97)   (3.92, 4.26) #>     p-value                                                                 <0.0001        <0.0001    #> Adjusted comparison (covariates: Sepal.Length and Sepal.Width)                                        #>   n                                                                50          50             50      #>   Adjusted Mean                                                   2.02        4.19           5.07     #>   Difference in Adjusted Means                                                2.17           3.05     #>     95% CI                                                                (1.96, 2.38)   (2.81, 3.29) #>     p-value                                                                 <0.0001        <0.0001"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the Change from Baseline or Absolute Baseline Values ‚Äî summarize_change","title":"Summarize the Change from Baseline or Absolute Baseline Values ‚Äî summarize_change","text":"primary analysis variable .var indicates numerical change baseline results, additional required secondary analysis variables value baseline_flag. Depending baseline flag, either absolute baseline values (baseline) change baseline values (post-baseline) summarized.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the Change from Baseline or Absolute Baseline Values ‚Äî summarize_change","text":"","code":"s_change_from_baseline(df, .var, variables, na.rm = TRUE, ...)  a_change_from_baseline(df, .var, variables, na.rm = TRUE, ...)  summarize_change(   lyt,   vars,   ...,   table_names = vars,   .stats = c(\"n\", \"mean_sd\", \"median\", \"range\"),   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the Change from Baseline or Absolute Baseline Values ‚Äî summarize_change","text":"df (data.frame) data set containing analysis variables. .var (string) single variable name passed rtables requested statistics function. variables (named list string) list additional analysis variables. na.rm (flag) whether NA values removed x prior analysis. ... additional arguments lower level functions. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the Change from Baseline or Absolute Baseline Values ‚Äî summarize_change","text":"See s_summary.numeric() return values.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_change.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Summarize the Change from Baseline or Absolute Baseline Values ‚Äî summarize_change","text":"s_change_from_baseline(): Statistics Function summarizes baseline post-baseline visits. a_change_from_baseline(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). summarize_change(): Analyze Function change baseline analysis. used split visits layout, data subset contains either baseline post-baseline data. Allows additional formatting options.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_change.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Summarize the Change from Baseline or Absolute Baseline Values ‚Äî summarize_change","text":"data df must either baseline post-baseline visits. Otherwise error thrown.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize the Change from Baseline or Absolute Baseline Values ‚Äî summarize_change","text":"","code":"df <- data.frame(   chg = c(1, 2, 3),   is_bl = c(TRUE, TRUE, TRUE),   val = c(4, 5, 6) )  # Internal function - s_change_from_baseline if (FALSE) { s_change_from_baseline(   df,   .var = \"chg\",   variables = list(value = \"val\", baseline_flag = \"is_bl\") ) }  # Internal function - a_change_from_baseline if (FALSE) { a_change_from_baseline(   df,   .var = \"chg\",   variables = list(value = \"val\", baseline_flag = \"is_bl\") ) }   # `summarize_change()`  ## Fabricated dataset. library(dplyr)  dta_test <- data.frame(   USUBJID = rep(1:6, each = 3),   AVISIT = rep(paste0(\"V\", 1:3), 6),   ARM = rep(LETTERS[1:3], rep(6, 3)),   AVAL = c(9:1, rep(NA, 9)) ) %>%   mutate(ABLFLL = AVISIT == \"V1\") %>%   group_by(USUBJID) %>%   mutate(     BLVAL = AVAL[ABLFLL],     CHG = AVAL - BLVAL   ) %>%   ungroup()  results <- basic_table() %>%   split_cols_by(\"ARM\") %>%   split_rows_by(\"AVISIT\") %>%   summarize_change(\"CHG\", variables = list(value = \"AVAL\", baseline_flag = \"ABLFLL\")) %>%   build_table(dta_test) if (FALSE) { Viewer(results) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_colvars.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Variables in Columns ‚Äî summarize_colvars","title":"Summarize Variables in Columns ‚Äî summarize_colvars","text":"Analyze Function uses new S3 generic function s_summary() summarize different variables arranged columns. Additional standard formatting arguments available.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_colvars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Variables in Columns ‚Äî summarize_colvars","text":"","code":"summarize_colvars(   lyt,   ...,   .stats = c(\"n\", \"mean_sd\", \"median\", \"range\", \"count_fraction\"),   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_colvars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Variables in Columns ‚Äî summarize_colvars","text":"lyt (layout) input layout analyses added . ... arguments passed s_summary(). .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_colvars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Variables in Columns ‚Äî summarize_colvars","text":"","code":"dta_test <- data.frame(   USUBJID = rep(1:6, each = 3),   PARAMCD = rep(\"lab\", 6 * 3),   AVISIT = rep(paste0(\"V\", 1:3), 6),   ARM = rep(LETTERS[1:3], rep(6, 3)),   AVAL = c(9:1, rep(NA, 9)),   CHG = c(1:9, rep(NA, 9)) )  ## Default output within a `rtables` pipeline. basic_table() %>%   split_cols_by(\"ARM\") %>%   split_rows_by(\"AVISIT\") %>%   split_cols_by_multivar(vars = c(\"AVAL\", \"CHG\")) %>%   summarize_colvars() %>%   build_table(dta_test) #>                         A                       B                 C      #>                 AVAL         CHG        AVAL         CHG      AVAL   CHG #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> V1                                                                       #>   n               2           2           1           1        0      0  #>   Mean (SD)   7.5 (2.1)   2.5 (2.1)   3.0 (NA)    7.0 (NA)     NA    NA  #>   Median         7.5         2.5         3.0         7.0       NA    NA  #>   Min - Max   6.0 - 9.0   1.0 - 4.0   3.0 - 3.0   7.0 - 7.0    NA    NA  #> V2                                                                       #>   n               2           2           1           1        0      0  #>   Mean (SD)   6.5 (2.1)   3.5 (2.1)   2.0 (NA)    8.0 (NA)     NA    NA  #>   Median         6.5         3.5         2.0         8.0       NA    NA  #>   Min - Max   5.0 - 8.0   2.0 - 5.0   2.0 - 2.0   8.0 - 8.0    NA    NA  #> V3                                                                       #>   n               2           2           1           1        0      0  #>   Mean (SD)   5.5 (2.1)   4.5 (2.1)   1.0 (NA)    9.0 (NA)     NA    NA  #>   Median         5.5         4.5         1.0         9.0       NA    NA  #>   Min - Max   4.0 - 7.0   3.0 - 6.0   1.0 - 1.0   9.0 - 9.0    NA    NA   ## Selection of statistics, formats and labels also work. basic_table() %>%   split_cols_by(\"ARM\") %>%   split_rows_by(\"AVISIT\") %>%   split_cols_by_multivar(vars = c(\"AVAL\", \"CHG\")) %>%   summarize_colvars(     .stats = c(\"n\", \"mean_sd\"),     .formats = c(\"mean_sd\" = \"xx.x, xx.x\"),     .labels = c(n = \"n\", mean_sd = \"Mean, SD\")   ) %>%   build_table(dta_test) #>                       A                    B               C      #>                AVAL       CHG       AVAL       CHG     AVAL   CHG #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> V1                                                                #>   n             2          2          1         1       0      0  #>   Mean, SD   7.5, 2.1   2.5, 2.1   3.0, NA   7.0, NA    NA    NA  #> V2                                                                #>   n             2          2          1         1       0      0  #>   Mean, SD   6.5, 2.1   3.5, 2.1   2.0, NA   8.0, NA    NA    NA  #> V3                                                                #>   n             2          2          1         1       0      0  #>   Mean, SD   5.5, 2.1   4.5, 2.1   1.0, NA   9.0, NA    NA    NA   ## Use arguments interpreted by `s_summary`. basic_table() %>%   split_cols_by(\"ARM\") %>%   split_rows_by(\"AVISIT\") %>%   split_cols_by_multivar(vars = c(\"AVAL\", \"CHG\")) %>%   summarize_colvars(na.rm = FALSE) %>%   build_table(dta_test) #>                         A                       B                 C      #>                 AVAL         CHG        AVAL         CHG      AVAL   CHG #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> V1                                                                       #>   n               2           2           1           1        0      0  #>   Mean (SD)   7.5 (2.1)   2.5 (2.1)   3.0 (NA)    7.0 (NA)     NA    NA  #>   Median         7.5         2.5         3.0         7.0       NA    NA  #>   Min - Max   6.0 - 9.0   1.0 - 4.0   3.0 - 3.0   7.0 - 7.0    NA    NA  #> V2                                                                       #>   n               2           2           1           1        0      0  #>   Mean (SD)   6.5 (2.1)   3.5 (2.1)   2.0 (NA)    8.0 (NA)     NA    NA  #>   Median         6.5         3.5         2.0         8.0       NA    NA  #>   Min - Max   5.0 - 8.0   2.0 - 5.0   2.0 - 2.0   8.0 - 8.0    NA    NA  #> V3                                                                       #>   n               2           2           1           1        0      0  #>   Mean (SD)   5.5 (2.1)   4.5 (2.1)   1.0 (NA)    9.0 (NA)     NA    NA  #>   Median         5.5         4.5         1.0         9.0       NA    NA  #>   Min - Max   4.0 - 7.0   3.0 - 6.0   1.0 - 1.0   9.0 - 9.0    NA    NA"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_glm_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for Poisson Negative Binomial. ‚Äî summarize_glm_count","title":"Summary for Poisson Negative Binomial. ‚Äî summarize_glm_count","text":"Summarize results Poisson Negative Binomial Regression. can used analyze count /frequency data using linear model.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_glm_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for Poisson Negative Binomial. ‚Äî summarize_glm_count","text":"","code":"s_glm_count(   df,   .var,   .df_row,   variables,   .ref_group,   .in_ref_col,   distribution,   conf_level,   rate_mean_method,   weights,   scale = 1 )  a_glm_count(   df,   .var,   .df_row,   variables,   .ref_group,   .in_ref_col,   distribution,   conf_level,   rate_mean_method,   weights,   scale = 1 )  summarize_glm_count(   lyt,   vars,   var_labels,   ...,   show_labels = \"visible\",   table_names = vars,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_glm_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for Poisson Negative Binomial. ‚Äî summarize_glm_count","text":"df (data.frame) data set containing analysis variables. .var (string) single variable name passed rtables requested statistics function. .df_row (data.frame) data frame across columns given row split. variables (named list string) list additional analysis variables. .ref_group (data.frame vector) data corresponding reference group. .in_ref_col (logical)TRUE working reference level, FALSE otherwise. conf_level (proportion) confidence level interval. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . var_labels (character) character label. ... additional arguments lower level functions. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_glm_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for Poisson Negative Binomial. ‚Äî summarize_glm_count","text":"named list 5 statistics: n count complete sample size group. rate estimated event rate per follow-time. rate_ci confidence level estimated rate per follow-time. rate_ratio ratio event rates treatment arm reference arm. rate_ratio_ci confidence level rate ratio. pval p-value.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_glm_count.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Summary for Poisson Negative Binomial. ‚Äî summarize_glm_count","text":"s_glm_count(): Statistics function produces named list results investigated poisson model. a_glm_count(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). summarize_glm_count(): Layout creating function can used creating summary tables analysis count data using generalized linear models (poisson, quasipoisson).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_glm_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary for Poisson Negative Binomial. ‚Äî summarize_glm_count","text":"","code":"# Internal function - s_change_from_baseline if (FALSE) { s_glm_count(   df = anl %>%     filter(ARMCD == \"ARM B\"),   .df_row = anl,   .var = \"AVAL\",   .in_ref_col = TRUE,   variables = list(arm = \"ARMCD\", offset = \"lgTMATRSK\", covariates = c(\"REGION1\")),   conf_level = 0.95,   distribution = \"quasipoisson\",   rate_mean_method = \"ppmeans\" ) }   # Internal function - s_change_from_baseline if (FALSE) { a_glm_count(   df = anl %>%     filter(ARMCD == \"ARM A\"),   .var = \"AVAL\",   .df_row = anl,   variables = list(arm = \"ARMCD\", offset = \"lgTMATRSK\", covariates = c(\"REGION1\")),   .ref_group = \"ARM B\", .in_ref_col = TRUE,   conf_level = 0.95,   distribution = \"poisson\",   rate_mean_method = \"ppmeans\" ) }  library(dplyr) anl <- tern_ex_adtte %>% filter(PARAMCD == \"TNE\") anl$AVAL_f <- as.factor(anl$AVAL)  lyt <- basic_table() %>%   split_cols_by(\"ARM\", ref_group = \"B: Placebo\") %>%   add_colcounts() %>%   summarize_vars(     \"AVAL_f\",     var_labels = \"Number of exacerbations per patient\",     .stats = c(\"count_fraction\"),     .formats = c(\"count_fraction\" = \"xx (xx.xx%)\"),     .label = c(\"Number of exacerbations per patient\")   ) %>%   summarize_glm_count(     vars = \"AVAL\",     variables = list(arm = \"ARM\", offset = \"lgTMATRSK\", covariates = NULL),     conf_level = 0.95,     distribution = \"poisson\",     rate_mean_method = \"emmeans\",     var_labels = \"Unadjusted exacerbation rate (per year)\",     table_names = \"unadj\",     .stats = c(\"rate\"),     .labels = c(rate = \"Rate\")   ) %>%   summarize_glm_count(     vars = \"AVAL\",     variables = list(arm = \"ARM\", offset = \"lgTMATRSK\", covariates = c(\"REGION1\")),     conf_level = 0.95,     distribution = \"quasipoisson\",     rate_mean_method = \"ppmeans\",     var_labels = \"Adjusted (QP) exacerbation rate (per year)\",     table_names = \"adj\",     .stats = c(\"rate\", \"rate_ci\", \"rate_ratio\", \"rate_ratio_ci\", \"pval\"),     .labels = c(       rate = \"Rate\", rate_ci = \"Rate CI\", rate_ratio = \"Rate Ratio\",       rate_ratio_ci = \"Rate Ratio CI\", pval = \"p value\"     )   ) build_table(lyt = lyt, df = anl) #>                                                 B: Placebo           A: Drug X        C: Combination   #>                                                   (N=73)              (N=69)              (N=58)       #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Number of exacerbations per patient                                                                    #>   0                                             8 (10.96%)           3 (4.35%)          6 (10.34%)     #>   1                                             9 (12.33%)          11 (15.94%)         6 (10.34%)     #>   2                                             15 (20.55%)         18 (26.09%)         9 (15.52%)     #>   3                                             11 (15.07%)         14 (20.29%)         15 (25.86%)    #>   4                                             9 (12.33%)          10 (14.49%)         9 (15.52%)     #>   5                                             9 (12.33%)          7 (10.14%)          8 (13.79%)     #>   6                                              4 (5.48%)           4 (5.80%)           4 (6.90%)     #>   7                                             8 (10.96%)           2 (2.90%)           0 (0.00%)     #>   10                                             0 (0.00%)           0 (0.00%)           1 (1.72%)     #> Unadjusted exacerbation rate (per year)                                                                #>   Rate                                            9.1554              8.2061              7.8551       #> Adjusted (QP) exacerbation rate (per year)                                                             #>   Rate                                            10.2061             9.1386              7.6566       #>   Rate CI                                    (5.6275, 18.5099)   (4.9399, 16.9060)   (4.0222, 14.5749) #>   Rate Ratio                                                          0.8954              0.7502       #>   Rate Ratio CI                                                  (0.3975, 2.0170)    (0.3067, 1.8348)  #>   p value                                                             0.7897              0.5288"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-Variable Logistic Regression Table ‚Äî summarize_logistic","title":"Multi-Variable Logistic Regression Table ‚Äî summarize_logistic","text":"Layout creating function summarizes logistic variable regression binary outcome categorical/continuous covariates model statement. covariate category (categorical) specified values (continuous), present degrees freedom, regression parameter estimate standard error (SE) relative reference group category. Report odds ratios covariate category specified values corresponding Wald confidence intervals default allow user specify confidence levels. Report p-value Wald chi-square test null hypothesis covariate effect response model containing specified covariates. Allow option include one two-way interaction present similar output interaction degree freedom. Note: formula, variable names need standard dataframe column name without special characters.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-Variable Logistic Regression Table ‚Äî summarize_logistic","text":"","code":"summarize_logistic(lyt, conf_level, drop_and_remove_str = \"\")"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-Variable Logistic Regression Table ‚Äî summarize_logistic","text":"lyt (layout) input layout analyses added . conf_level (proportion) confidence level interval. drop_and_remove_str string dropped removed","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_logistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi-Variable Logistic Regression Table ‚Äî summarize_logistic","text":"","code":"library(dplyr) library(broom)  adrs_f <- tern_ex_adrs %>%   filter(PARAMCD == \"BESRSPI\") %>%   filter(RACE %in% c(\"ASIAN\", \"WHITE\", \"BLACK OR AFRICAN AMERICAN\")) %>%   mutate(     Response = case_when(AVALC %in% c(\"PR\", \"CR\") ~ 1, TRUE ~ 0),     RACE = factor(RACE),     SEX = factor(SEX)   ) formatters::var_labels(adrs_f) <- c(formatters::var_labels(tern_ex_adrs), Response = \"Response\") mod1 <- fit_logistic(   data = adrs_f,   variables = list(     response = \"Response\",     arm = \"ARMCD\",     covariates = c(\"AGE\", \"RACE\")   ) ) #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred mod2 <- fit_logistic(   data = adrs_f,   variables = list(     response = \"Response\",     arm = \"ARMCD\",     covariates = c(\"AGE\", \"RACE\"),     interaction = \"AGE\"   ) ) #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred  df <- tidy(mod1, conf_level = 0.99) df2 <- tidy(mod2, conf_level = 0.99)  # flagging empty strings with \"_\" df <- df_explicit_na(df, na_level = \"_\") df2 <- df_explicit_na(df2, na_level = \"_\")  result1 <- basic_table() %>%   summarize_logistic(     conf_level = 0.95,     drop_and_remove_str = \"_\"   ) %>%   build_table(df = df) result1 #>                                       Degrees of Freedom   Parameter Estimate   Standard Error   Odds Ratio     Wald 95% CI     p-value #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Planned Arm Code                              2                                                                                 0.3004  #>   Reference ARM A, n = 64                                                                                                               #>   ARM B, n = 68                               1                  -1.775             1.144           0.17       (<0.01, 3.23)    0.1209  #>   ARM C, n = 52                               1                  17.192            3626.588       >999.99     (0.00, >999.99)   0.9962  #> Age                                                                                                                                     #>   Age                                         1                  0.170              0.095           1.19       (0.93, 1.51)     0.0746  #> Race                                          2                                                                                 0.7967  #>   Reference ASIAN, n = 110                                                                                                              #>   BLACK OR AFRICAN AMERICAN, n = 40           1                  17.923            4001.705       >999.99     (0.00, >999.99)   0.9964  #>   WHITE, n = 34                               1                  -0.656             0.974           0.52       (0.04, 6.37)     0.5002   result2 <- basic_table() %>%   summarize_logistic(     conf_level = 0.95,     drop_and_remove_str = \"_\"   ) %>%   build_table(df = df2) result2 #>                                         Degrees of Freedom   Parameter Estimate   Standard Error   Odds Ratio     Wald 95% CI     p-value #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Race                                            2                                                                                 0.9361  #>   Reference ASIAN, n = 110                                                                                                                #>   BLACK OR AFRICAN AMERICAN, n = 40             1                  18.150            3944.701       >999.99     (0.00, >999.99)   0.9963  #>   WHITE, n = 34                                 1                  -0.373             1.026           0.69       (0.05, 9.68)     0.7164  #> Planned Arm Code                                2                                                                                 0.2539  #>   Reference ARM A, n = 64                                                                                                                 #>   ARM B, n = 68                                 1                 -11.527             6.962                                       0.0978  #>     Age                                                                                                                                   #>       35                                                                                              0.48       (0.01, 15.48)            #>   ARM C, n = 52                                 1                  16.333           20278.387                                     0.9994  #>     Age                                                                                                                                   #>       35                                                                                            >999.99     (0.00, >999.99)           #> Age                                                                                                                                       #>   Age                                           1                  -0.039             0.151                                       0.7981  #>     Planned Arm Code                                                                                                                      #>       ARM A                                                                                           0.96       (0.65, 1.42)             #>       ARM B                                                                                           1.31       (0.92, 1.86)             #>       ARM C                                                                                           0.99      (0.00, >999.99)           #> Interaction of Planned Arm Code * Age           2                                                                                 0.3276  #>   Reference ARM A, n = 64                                                                                                                 #>   ARM B, n = 68                                 1                  0.308              0.206                                       0.1352  #>   ARM C, n = 52                                 1                  0.029             548.592                                      1.0000"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_num_patients.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of patients ‚Äî summarize_num_patients","title":"Number of patients ‚Äî summarize_num_patients","text":"Count number unique non-unique patients column (variable).","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_num_patients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of patients ‚Äî summarize_num_patients","text":"","code":"s_num_patients(   x,   labelstr,   .N_col,   count_by = NULL,   unique_count_suffix = TRUE )  s_num_patients_content(   df,   labelstr = \"\",   .N_col,   .var,   required = NULL,   count_by = NULL,   unique_count_suffix = TRUE )  summarize_num_patients(   lyt,   var,   .stats = NULL,   .formats = NULL,   .labels = c(unique = \"Number of patients with at least one event\", nonunique =     \"Number of events\"),   indent_mod = 0L,   ... )  analyze_num_patients(   lyt,   vars,   .stats = NULL,   .formats = NULL,   .labels = c(unique = \"Number of patients with at least one event\", nonunique =     \"Number of events\"),   show_labels = c(\"default\", \"visible\", \"hidden\"),   indent_mod = 0L,   ... )"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_num_patients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of patients ‚Äî summarize_num_patients","text":"x (character factor) vector patient IDs. labelstr (character) label level parent split currently summarized (must present second argument Content Row Functions). .N_col (count) row-wise N (row group count) group observations analyzed (.e. column-based subsetting) passed rtables. count_by (character factor) optional vector combined x counting nonunique records. unique_count_suffix (logical) \"(n)\" suffix added unique_count labels. Defaults TRUE. df (data.frame) data set containing analysis variables. .var, var (string) single variable name passed rtables requested statistics function. required (character NULL) optional name variable required non-missing. lyt (layout) input layout analyses added . .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). indent_mod (count) can negative. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. ... additional arguments lower level functions. vars (character) variable names primary analysis variable iterated . show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\".","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_num_patients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of patients ‚Äî summarize_num_patients","text":"list : unique vector count percentage. nonunique vector count. unique_count count.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_num_patients.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of patients ‚Äî summarize_num_patients","text":"general, functions starts analyze* expected work like rtables::analyze(), functions starts summarize* based upon rtables::summarize_row_groups(). latter provides value dividing split row column space, , bound fundamental splits, repeated design every page pagination involved.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_num_patients.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Number of patients ‚Äî summarize_num_patients","text":"s_num_patients(): Statistics function counts number unique patients, corresponding percentage taken respect total number patients, number non-unique patients. s_num_patients_content(): Counts number unique patients column (variable), corresponding percentage taken respect total number patients, number non-unique patients column. Function serves wrapper carries expected arguments df labelstr cfun summarize_row_groups(). summarize_num_patients(): Layout creating function adds content rows using statistics function s_num_patients_content() desired format. analyze_num_patients(): Identically summarize_num_patients(), function creates layout adds content rows using statistics function s_num_patients_content() desired format. Differently counterpart, function impose produced rows repeated.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_num_patients.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of patients ‚Äî summarize_num_patients","text":"","code":"# Use the statistics function to count number of unique and nonunique patients. s_num_patients(x = as.character(c(1, 1, 1, 2, 4, NA)), labelstr = \"\", .N_col = 6L) #> $unique #> [1] 3.0 0.5 #> attr(,\"label\") #> [1] \"\" #>  #> $nonunique #> [1] 5 #> attr(,\"label\") #> [1] \"\" #>  #> $unique_count #> [1] 3 #> attr(,\"label\") #> [1] \" (n)\" #>  s_num_patients(   x = as.character(c(1, 1, 1, 2, 4, NA)),   labelstr = \"\",   .N_col = 6L,   count_by = as.character(c(1, 1, 2, 1, 1, 1)) ) #> $unique #> [1] 3.0 0.5 #> attr(,\"label\") #> [1] \"\" #>  #> $nonunique #> [1] 4 #> attr(,\"label\") #> [1] \"\" #>  #> $unique_count #> [1] 3 #> attr(,\"label\") #> [1] \" (n)\" #>   # Count number of unique and non-unique patients. df <- data.frame(   USUBJID = as.character(c(1, 2, 1, 4, NA)),   EVENT = as.character(c(10, 15, 10, 17, 8)) ) s_num_patients_content(df, .N_col = 5, .var = \"USUBJID\") #> $unique #> [1] 3.0 0.6 #> attr(,\"label\") #> [1] \"\" #>  #> $nonunique #> [1] 4 #> attr(,\"label\") #> [1] \"\" #>  #> $unique_count #> [1] 3 #> attr(,\"label\") #> [1] \" (n)\" #>   df_by_event <- data.frame(   USUBJID = as.character(c(1, 2, 1, 4, NA)),   EVENT = as.character(c(10, 15, 10, 17, 8)) ) s_num_patients_content(df_by_event, .N_col = 5, .var = \"USUBJID\") #> $unique #> [1] 3.0 0.6 #> attr(,\"label\") #> [1] \"\" #>  #> $nonunique #> [1] 4 #> attr(,\"label\") #> [1] \"\" #>  #> $unique_count #> [1] 3 #> attr(,\"label\") #> [1] \" (n)\" #>  s_num_patients_content(df_by_event, .N_col = 5, .var = \"USUBJID\", count_by = \"EVENT\") #> $unique #> [1] 3.0 0.6 #> attr(,\"label\") #> [1] \"\" #>  #> $nonunique #> [1] 3 #> attr(,\"label\") #> [1] \"\" #>  #> $unique_count #> [1] 3 #> attr(,\"label\") #> [1] \" (n)\" #>  df_tmp <- data.frame(   USUBJID = as.character(c(1, 2, 1, 4, NA, 6, 6, 8, 9)),   ARM = c(\"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\"),   AGE = c(10, 15, 10, 17, 8, 11, 11, 19, 17) ) tbl <- basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   analyze_num_patients(\"USUBJID\", .stats = c(\"unique\")) %>%   build_table(df_tmp) tbl #>                                                  A           B     #>                                                (N=5)       (N=4)   #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Number of patients with at least one event   3 (60.0%)   3 (75.0%)"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_patients_exposure_in_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Counting Patients Summing Exposure Across All Patients in Columns ‚Äî summarize_patients_exposure_in_cols","title":"Counting Patients Summing Exposure Across All Patients in Columns ‚Äî summarize_patients_exposure_in_cols","text":"Counting number patients summing analysis value (.e exposure values) across patients column table layout required.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_patients_exposure_in_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counting Patients Summing Exposure Across All Patients in Columns ‚Äî summarize_patients_exposure_in_cols","text":"","code":"s_count_patients_sum_exposure(   df,   .var = \"AVAL\",   id = \"USUBJID\",   labelstr = \"\",   .N_col,   custom_label = NULL )  summarize_patients_exposure_in_cols(   lyt,   var,   ...,   .stats = c(\"n_patients\", \"sum_exposure\"),   .labels = c(n_patients = \"Patients\", sum_exposure = \"Person time\"),   .indent_mods = NULL,   col_split = TRUE )"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_patients_exposure_in_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counting Patients Summing Exposure Across All Patients in Columns ‚Äî summarize_patients_exposure_in_cols","text":"df (data.frame) data set containing analysis variables. .var, var (string) single variable name passed rtables requested statistics function. id (string) subject variable name. labelstr (character) label level parent split currently summarized (must present second argument Content Row Functions). .N_col (count) row-wise N (row group count) group observations analyzed (.e. column-based subsetting) passed rtables. custom_label (string NULL) provided labelstr empty used label. lyt (layout) input layout analyses added . ... additional arguments lower level functions. .stats (character) statistics select table. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels. col_split (flag) whether columns split. Set FALSE required column split done already earlier layout pipe.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_patients_exposure_in_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counting Patients Summing Exposure Across All Patients in Columns ‚Äî summarize_patients_exposure_in_cols","text":"s_count_patients_sum_exposure() returns list statistics: n_patients number unique patients df. sum_exposure sum .var across patients df.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_patients_exposure_in_cols.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Counting Patients Summing Exposure Across All Patients in Columns ‚Äî summarize_patients_exposure_in_cols","text":"s_count_patients_sum_exposure(): Statistics function counts numbers patients sum exposure across patients. summarize_patients_exposure_in_cols(): Layout creating function adds count statistics patients sum analysis value column layout content rows.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_patients_exposure_in_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counting Patients Summing Exposure Across All Patients in Columns ‚Äî summarize_patients_exposure_in_cols","text":"","code":"set.seed(1) df <- data.frame(   USUBJID = c(paste(\"id\", seq(1, 12), sep = \"\")),   ARMCD = c(rep(\"ARM A\", 6), rep(\"ARM B\", 6)),   SEX = c(rep(\"Female\", 6), rep(\"Male\", 6)),   AVAL = as.numeric(sample(seq(1, 20), 12)),   stringsAsFactors = TRUE ) adsl <- data.frame(   USUBJID = c(paste(\"id\", seq(1, 12), sep = \"\")),   ARMCD = c(rep(\"ARM A\", 2), rep(\"ARM B\", 2)),   SEX = c(rep(\"Female\", 2), rep(\"Male\", 2)),   stringsAsFactors = TRUE )  # Internal function - s_count_patients_sum_exposure if (FALSE) { s_count_patients_sum_exposure(df = df, .N_col = nrow(adsl)) s_count_patients_sum_exposure(   df = df,   .N_col = nrow(adsl),   custom_label = \"some user's custom label\" ) }  lyt <- basic_table() %>%   split_cols_by(\"ARMCD\", split_fun = add_overall_level(\"Total\", first = FALSE)) %>%   summarize_patients_exposure_in_cols(var = \"AVAL\", col_split = TRUE) %>%   split_rows_by(\"SEX\") %>%   summarize_patients_exposure_in_cols(var = \"AVAL\", col_split = FALSE) result <- build_table(lyt, df = df, alt_counts_df = adsl) result #>                                               ARM A                      ARM B                       Total           #>                                       Patients    Person time    Patients    Person time    Patients     Person time #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Total patients numbers/person time   6 (100.0%)       46        6 (100.0%)       68        12 (100.0%)       114     #>   Female                             6 (100.0%)       46         0 (0.0%)         0         6 (50.0%)        46      #>   Male                                0 (0.0%)         0        6 (100.0%)       68         6 (50.0%)        68       lyt2 <- basic_table() %>%   split_cols_by(\"ARMCD\", split_fun = add_overall_level(\"Total\", first = FALSE)) %>%   summarize_patients_exposure_in_cols(     var = \"AVAL\", col_split = TRUE,     .stats = \"n_patients\", custom_label = \"some custom label\"   ) %>%   split_rows_by(\"SEX\") %>%   summarize_patients_exposure_in_cols(var = \"AVAL\", col_split = FALSE) result2 <- build_table(lyt2, df = df, alt_counts_df = adsl) result2 #>                       ARM A        ARM B         Total    #>                      Patients     Patients     Patients   #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> some custom label   6 (100.0%)   6 (100.0%)   12 (100.0%) #>   Female            6 (100.0%)       0         6 (50.0%)  #>   Male               0 (0.0%)        68        6 (50.0%)   lyt3 <- basic_table() %>%   summarize_patients_exposure_in_cols(var = \"AVAL\", col_split = TRUE) result3 <- build_table(lyt3, df = df, alt_counts_df = adsl) result3 #>                                       Patients     Person time #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Total patients numbers/person time   12 (100.0%)       114      lyt4 <- basic_table() %>%   summarize_patients_exposure_in_cols(var = \"AVAL\", col_split = TRUE, .stats = \"sum_exposure\") result4 <- build_table(lyt4, df = df, alt_counts_df = adsl) result4 #>                                      Person time #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Total patients numbers/person time       114"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Variables ‚Äî summarize_variables","title":"Summarize Variables ‚Äî summarize_variables","text":"use new S3 generic function s_summary() implement summaries different x objects. used Statistics Function combination new Analyze Function summarize_vars().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Variables ‚Äî summarize_variables","text":"","code":"s_summary(x, na.rm = TRUE, denom, .N_row, .N_col, na_level, .var, ...)  # S3 method for numeric s_summary(   x,   na.rm = TRUE,   denom,   .N_row,   .N_col,   na_level,   .var,   control = control_summarize_vars(),   ... )  # S3 method for factor s_summary(   x,   na.rm = TRUE,   denom = c(\"n\", \"N_row\", \"N_col\"),   .N_row,   .N_col,   na_level = \"<Missing>\",   ... )  # S3 method for character s_summary(   x,   na.rm = TRUE,   denom = c(\"n\", \"N_row\", \"N_col\"),   .N_row,   .N_col,   na_level = \"<Missing>\",   .var,   verbose = TRUE,   ... )  # S3 method for logical s_summary(   x,   na.rm = TRUE,   denom = c(\"n\", \"N_row\", \"N_col\"),   .N_row,   .N_col,   ... )  a_summary(x, ..., .N_row, .N_col, .var)  # S3 method for numeric a_summary(   x,   na.rm = TRUE,   denom,   .N_row,   .N_col,   na_level,   .var,   control = control_summarize_vars(),   ... )  # S3 method for factor a_summary(   x,   na.rm = TRUE,   denom = c(\"n\", \"N_row\", \"N_col\"),   .N_row,   .N_col,   na_level = \"<Missing>\",   ... )  # S3 method for character a_summary(   x,   na.rm = TRUE,   denom = c(\"n\", \"N_row\", \"N_col\"),   .N_row,   .N_col,   na_level = \"<Missing>\",   .var,   verbose = TRUE,   ... )  # S3 method for logical a_summary(   x,   na.rm = TRUE,   denom = c(\"n\", \"N_row\", \"N_col\"),   .N_row,   .N_col,   ... )  summarize_vars(   lyt,   vars,   var_labels = vars,   na_level = NA_character_,   nested = TRUE,   ...,   show_labels = \"default\",   table_names = vars,   section_div = NA_character_,   .stats = c(\"n\", \"mean_sd\", \"median\", \"range\", \"count_fraction\"),   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Variables ‚Äî summarize_variables","text":"x (numeric) vector numbers want analyze. na.rm (flag) whether NA values removed x prior analysis. denom (string) choice denominator proportion. Options : n: number values row column intersection. N_row: total number values row across columns. N_col: total number values column across rows. .N_row (count) column-wise N (column count) full column passed rtables. .N_col (count) row-wise N (row group count) group observations analyzed (.e. column-based subsetting) passed rtables. na_level (string) used replace NA empty values factors custom string. .var (string) single variable name passed rtables requested statistics function. ... arguments passed s_summary(). control (list) parameters descriptive statistics details, specified using helper function control_summarize_vars(). possible parameter options : conf_level (proportion) confidence level interval mean median. quantiles (numeric) vector length two specify quantiles. quantile_type (numeric) 1 9 selecting quantile algorithms used. See type stats::quantile(). test_mean (numeric) value test mean null hypothesis calculating p-value. verbose defaults TRUE. prints warnings messages. mainly used print information factor casting. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . var_labels (character) character label. nested (flag) whether layout instruction applied within existing layout structure possible (TRUE, default) new top-level element (FALSE). Ignored nest split underneath analyses, allowed. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. section_div (string) string repeated section divider group defined split instruction, NA_character_ (default) section divider. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Variables ‚Äî summarize_variables","text":"x class numeric, returns list following named numeric items: n length() x. sum sum() x. mean mean() x. sd stats::sd() x. se standard error x mean, .e.: (sd(x) / sqrt(length(x))). mean_sd mean() stats::sd() x. mean_se mean() x standard error (see ). mean_ci CI mean x (stat_mean_ci()). mean_sei SE interval mean x, .e.: (mean() -/+ stats::sd() / sqrt()). mean_sdi SD interval mean x, .e.: (mean() -/+ stats::sd()). mean_pval two-sided p-value mean x (stat_mean_pval()). median stats::median() x. mad median absolute deviation x, .e.: (stats::median() xc, xc = x - stats::median()). median_ci CI median x (stat_median_ci()). quantiles two sample quantiles x (stats::quantile()). iqr stats::IQR() x. range range_noinf() x. min max() x. max min() x. median_range median() range_noinf() x. cv coefficient variation x, .e.: (stats::sd() / mean() * 100). geom_mean geometric mean x, .e.: (exp(mean(log(x)))). geom_cv geometric coefficient variation x, .e.: (sqrt(exp(sd(log(x)) ^ 2) - 1) * 100). x class factor converted character, returns list named numeric items: n length() x. count list number cases level factor x. count_fraction similar count also includes proportion cases level factor x relative denominator, NA denominator zero. x class logical, returns list named numeric items: n length() x (possibly removing NAs). count count TRUE x. count_fraction count proportion TRUE x relative denominator, NA denominator zero. Note NAs x never counted leading NA .","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_variables.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Summarize Variables ‚Äî summarize_variables","text":"s_summary(): s_summary S3 generic function produce object description. s_summary(numeric): Method numeric class. Note , x empty vector, NA returned. expected feature return rcell content rtables intersection column row delimits empty data selection. Also, mean function applied empty vector, NA returned instead NaN, latter standard behavior R. s_summary(factor): Method factor class. Note , x empty factor, still list returned counts one element per factor level. levels x, function fails. x contains NA, expected NA conveyed na_level appropriately beforehand df_explicit_na() explicit_na(). s_summary(character): Method character class. makes automatic conversion factor (warning) forwards method factors. s_summary(logical): Method logical class. a_summary(): S3 generic Formatted Analysis function produce object description. used afun rtables::analyze(). a_summary(numeric): Formatted Analysis function method numeric. a_summary(factor): Method factor. a_summary(character): Formatted Analysis function method character. a_summary(logical): Formatted Analysis function method logical. summarize_vars(): Analyze Function add descriptive analyze layer rtables pipelines. analysis applied vector return summary, rcells. ellipsis (...) conveys arguments s_summary(), instance na.rm = FALSE missing data accounted . factor variables contains NA, expected NA conveyed na_level appropriately beforehand df_explicit_na().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_variables.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Summarize Variables ‚Äî summarize_variables","text":"Automatic conversion character factor guarantee table can generated correctly. particular sparse tables likely can fail. therefore better always pre-process dataset factors manually created character variables passing dataset rtables::build_table().","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summarize_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Variables ‚Äî summarize_variables","text":"","code":"# `s_summary.numeric`  ## Basic usage: empty numeric returns NA-filled items. s_summary(numeric()) #> $n #> n  #> 0  #>  #> $sum #> sum  #>  NA  #>  #> $mean #> mean  #>   NA  #>  #> $sd #> sd  #> NA  #>  #> $se #> se  #> NA  #>  #> $mean_sd #> mean   sd  #>   NA   NA  #>  #> $mean_se #> mean   se  #>   NA   NA  #>  #> $mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Mean 95% CI\" #>  #> $mean_sei #> mean_sei_lwr mean_sei_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSE\" #>  #> $mean_sdi #> mean_sdi_lwr mean_sdi_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSD\" #>  #> $mean_pval #> p_value  #>      NA  #> attr(,\"label\") #> [1] \"Mean p-value (H0: mean = 0)\" #>  #> $median #> median  #>     NA  #>  #> $mad #> mad  #>  NA  #>  #> $median_ci #> median_ci_lwr median_ci_upr  #>            NA            NA  #> attr(,\"conf_level\") #> [1] NA #> attr(,\"label\") #> [1] \"Median 95% CI\" #>  #> $quantiles #> quantile_0.25 quantile_0.75  #>            NA            NA  #> attr(,\"label\") #> [1] \"25% and 75%-ile\" #>  #> $iqr #> iqr  #>  NA  #>  #> $range #> min max  #>  NA  NA  #>  #> $min #> min  #>  NA  #>  #> $max #> max  #>  NA  #>  #> $median_range #> median    min    max  #>     NA     NA     NA  #> attr(,\"label\") #> [1] \"Median (Min - Max)\" #>  #> $cv #> cv  #> NA  #>  #> $geom_mean #> geom_mean  #>       NaN  #>  #> $geom_mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Geometric Mean 95% CI\" #>  #> $geom_cv #> geom_cv  #>      NA  #>   ## Management of NA values. x <- c(NA_real_, 1) s_summary(x, na.rm = TRUE) #> $n #> n  #> 1  #>  #> $sum #> sum  #>   1  #>  #> $mean #> mean  #>    1  #>  #> $sd #> sd  #> NA  #>  #> $se #> se  #> NA  #>  #> $mean_sd #> mean   sd  #>    1   NA  #>  #> $mean_se #> mean   se  #>    1   NA  #>  #> $mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Mean 95% CI\" #>  #> $mean_sei #> mean_sei_lwr mean_sei_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSE\" #>  #> $mean_sdi #> mean_sdi_lwr mean_sdi_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSD\" #>  #> $mean_pval #> p_value  #>      NA  #> attr(,\"label\") #> [1] \"Mean p-value (H0: mean = 0)\" #>  #> $median #> median  #>      1  #>  #> $mad #> mad  #>   0  #>  #> $median_ci #> median_ci_lwr median_ci_upr  #>            NA            NA  #> attr(,\"conf_level\") #> [1] NA #> attr(,\"label\") #> [1] \"Median 95% CI\" #>  #> $quantiles #> quantile_0.25 quantile_0.75  #>             1             1  #> attr(,\"label\") #> [1] \"25% and 75%-ile\" #>  #> $iqr #> iqr  #>   0  #>  #> $range #> min max  #>   1   1  #>  #> $min #> min  #>   1  #>  #> $max #> max  #>   1  #>  #> $median_range #> median    min    max  #>      1      1      1  #> attr(,\"label\") #> [1] \"Median (Min - Max)\" #>  #> $cv #> cv  #> NA  #>  #> $geom_mean #> geom_mean  #>         1  #>  #> $geom_mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Geometric Mean 95% CI\" #>  #> $geom_cv #> geom_cv  #>      NA  #>  s_summary(x, na.rm = FALSE) #> $n #> n  #> 2  #>  #> $sum #> sum  #>  NA  #>  #> $mean #> mean  #>   NA  #>  #> $sd #> sd  #> NA  #>  #> $se #> se  #> NA  #>  #> $mean_sd #> mean   sd  #>   NA   NA  #>  #> $mean_se #> mean   se  #>   NA   NA  #>  #> $mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Mean 95% CI\" #>  #> $mean_sei #> mean_sei_lwr mean_sei_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSE\" #>  #> $mean_sdi #> mean_sdi_lwr mean_sdi_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSD\" #>  #> $mean_pval #> p_value  #>      NA  #> attr(,\"label\") #> [1] \"Mean p-value (H0: mean = 0)\" #>  #> $median #> median  #>     NA  #>  #> $mad #> mad  #>  NA  #>  #> $median_ci #> median_ci_lwr median_ci_upr  #>            NA            NA  #> attr(,\"conf_level\") #> [1] NA #> attr(,\"label\") #> [1] \"Median 95% CI\" #>  #> $quantiles #> quantile_0.25 quantile_0.75  #>            NA            NA  #> attr(,\"label\") #> [1] \"25% and 75%-ile\" #>  #> $iqr #> iqr  #>  NA  #>  #> $range #> min max  #>  NA  NA  #>  #> $min #> min  #>  NA  #>  #> $max #> max  #>  NA  #>  #> $median_range #> median    min    max  #>     NA     NA     NA  #> attr(,\"label\") #> [1] \"Median (Min - Max)\" #>  #> $cv #> cv  #> NA  #>  #> $geom_mean #> geom_mean  #>        NA  #>  #> $geom_mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Geometric Mean 95% CI\" #>  #> $geom_cv #> geom_cv  #>      NA  #>   x <- c(NA_real_, 1, 2) s_summary(x, stats = NULL) #> $n #> n  #> 2  #>  #> $sum #> sum  #>   3  #>  #> $mean #> mean  #>  1.5  #>  #> $sd #>        sd  #> 0.7071068  #>  #> $se #>  se  #> 0.5  #>  #> $mean_sd #>      mean        sd  #> 1.5000000 0.7071068  #>  #> $mean_se #> mean   se  #>  1.5  0.5  #>  #> $mean_ci #> mean_ci_lwr mean_ci_upr  #>   -4.853102    7.853102  #> attr(,\"label\") #> [1] \"Mean 95% CI\" #>  #> $mean_sei #> mean_sei_lwr mean_sei_upr  #>            1            2  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSE\" #>  #> $mean_sdi #> mean_sdi_lwr mean_sdi_upr  #>    0.7928932    2.2071068  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSD\" #>  #> $mean_pval #>   p_value  #> 0.2048328  #> attr(,\"label\") #> [1] \"Mean p-value (H0: mean = 0)\" #>  #> $median #> median  #>    1.5  #>  #> $mad #> mad  #>   0  #>  #> $median_ci #> median_ci_lwr median_ci_upr  #>            NA            NA  #> attr(,\"conf_level\") #> [1] NA #> attr(,\"label\") #> [1] \"Median 95% CI\" #>  #> $quantiles #> quantile_0.25 quantile_0.75  #>             1             2  #> attr(,\"label\") #> [1] \"25% and 75%-ile\" #>  #> $iqr #> iqr  #>   1  #>  #> $range #> min max  #>   1   2  #>  #> $min #> min  #>   1  #>  #> $max #> max  #>   2  #>  #> $median_range #> median    min    max  #>    1.5    1.0    2.0  #> attr(,\"label\") #> [1] \"Median (Min - Max)\" #>  #> $cv #>       cv  #> 47.14045  #>  #> $geom_mean #> geom_mean  #>  1.414214  #>  #> $geom_mean_ci #>  mean_ci_lwr  mean_ci_upr  #>   0.01729978 115.60839614  #> attr(,\"label\") #> [1] \"Geometric Mean 95% CI\" #>  #> $geom_cv #>  geom_cv  #> 52.10922  #>   ## Benefits in `rtables` contructions: require(rtables) dta_test <- data.frame(   Group = rep(LETTERS[1:3], each = 2),   sub_group = rep(letters[1:2], each = 3),   x = 1:6 )  ## The summary obtained in with `rtables`: basic_table() %>%   split_cols_by(var = \"Group\") %>%   split_rows_by(var = \"sub_group\") %>%   analyze(vars = \"x\", afun = s_summary) %>%   build_table(df = dta_test) #> Warning: number of items to replace is not a multiple of replacement length #> Warning: number of items to replace is not a multiple of replacement length #> Warning: number of items to replace is not a multiple of replacement length #> Warning: number of items to replace is not a multiple of replacement length #> Warning: number of items to replace is not a multiple of replacement length #> Warning: number of items to replace is not a multiple of replacement length #> Warning: number of items to replace is not a multiple of replacement length #> Warning: number of items to replace is not a multiple of replacement length #> Warning: number of items to replace is not a multiple of replacement length #> Warning: number of items to replace is not a multiple of replacement length #> Warning: number of items to replace is not a multiple of replacement length #> Warning: number of items to replace is not a multiple of replacement length #>                                                  A                        B                       C                   #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> a                                                                                                                     #>   n                                              2                        1                       0                   #>   sum                                            3                        3                       NA                  #>   mean                                          1.5                       3                       NA                  #>   sd                                     0.707106781186548               NA                       NA                  #>   se                                            0.5                      NA                       NA                  #>   mean_sd                              1.5, 0.707106781186548           3, NA                     NA                  #>   mean_se                                     1.5, 0.5                  3, NA                     NA                  #>   Mean 95% CI                   -4.85310236808735, 7.85310236808735      NA                       NA                  #>   Mean -/+ 1xSE                                 1, 2                     NA                       NA                  #>   Mean -/+ 1xSD                 0.792893218813452, 2.20710678118655      NA                       NA                  #>   Mean p-value (H0: mean = 0)            0.204832764699133               NA                       NA                  #>   median                                        1.5                       3                       NA                  #>   mad                                            0                        0                       NA                  #>   Median 95% CI                                  NA                      NA                       NA                  #>   25% and 75%-ile                               1, 2                    3, 3                      NA                  #>   iqr                                            1                        0                       NA                  #>   range                                         1, 2                    3, 3                      NA                  #>   min                                            1                        3                       NA                  #>   max                                            2                        3                       NA                  #>   Median (Min - Max)                         1.5, 1, 2                 3, 3, 3                    NA                  #>   cv                                      47.1404520791032               NA                       NA                  #>   geom_mean                               1.41421356237309                3                       NA                  #>   Geometric Mean 95% CI         0.0172997815631007, 115.608396135236     NA                       NA                  #>   geom_cv                                 52.1092246837487               NA                       NA                  #> b                                                                                                                     #>   n                                              0                        1                       2                   #>   sum                                            NA                       4                       11                  #>   mean                                           NA                       4                      5.5                  #>   sd                                             NA                      NA               0.707106781186548           #>   se                                             NA                      NA                      0.5                  #>   mean_sd                                        NA                     4, NA           5.5, 0.707106781186548        #>   mean_se                                        NA                     4, NA                  5.5, 0.5               #>   Mean 95% CI                                    NA                      NA      -0.853102368087347, 11.8531023680873 #>   Mean -/+ 1xSE                                  NA                      NA                      5, 6                 #>   Mean -/+ 1xSD                                  NA                      NA       4.79289321881345, 6.20710678118655  #>   Mean p-value (H0: mean = 0)                    NA                      NA               0.0577158767526089          #>   median                                         NA                       4                      5.5                  #>   mad                                            NA                       0                       0                   #>   Median 95% CI                                  NA                      NA                       NA                  #>   25% and 75%-ile                                NA                     4, 4                     5, 6                 #>   iqr                                            NA                       0                       1                   #>   range                                          NA                     4, 4                     5, 6                 #>   min                                            NA                       4                       5                   #>   max                                            NA                       4                       6                   #>   Median (Min - Max)                             NA                    4, 4, 4                5.5, 5, 6               #>   cv                                             NA                      NA                12.8564869306645           #>   geom_mean                                      NA                       4                5.47722557505166           #>   Geometric Mean 95% CI                          NA                      NA       1.71994304449266, 17.4424380482025  #>   geom_cv                                        NA                      NA                12.945835316564             ## By comparison with `lapply`: X <- split(dta_test, f = with(dta_test, interaction(Group, sub_group))) lapply(X, function(x) s_summary(x$x)) #> $A.a #> $A.a$n #> n  #> 2  #>  #> $A.a$sum #> sum  #>   3  #>  #> $A.a$mean #> mean  #>  1.5  #>  #> $A.a$sd #>        sd  #> 0.7071068  #>  #> $A.a$se #>  se  #> 0.5  #>  #> $A.a$mean_sd #>      mean        sd  #> 1.5000000 0.7071068  #>  #> $A.a$mean_se #> mean   se  #>  1.5  0.5  #>  #> $A.a$mean_ci #> mean_ci_lwr mean_ci_upr  #>   -4.853102    7.853102  #> attr(,\"label\") #> [1] \"Mean 95% CI\" #>  #> $A.a$mean_sei #> mean_sei_lwr mean_sei_upr  #>            1            2  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSE\" #>  #> $A.a$mean_sdi #> mean_sdi_lwr mean_sdi_upr  #>    0.7928932    2.2071068  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSD\" #>  #> $A.a$mean_pval #>   p_value  #> 0.2048328  #> attr(,\"label\") #> [1] \"Mean p-value (H0: mean = 0)\" #>  #> $A.a$median #> median  #>    1.5  #>  #> $A.a$mad #> mad  #>   0  #>  #> $A.a$median_ci #> median_ci_lwr median_ci_upr  #>            NA            NA  #> attr(,\"conf_level\") #> [1] NA #> attr(,\"label\") #> [1] \"Median 95% CI\" #>  #> $A.a$quantiles #> quantile_0.25 quantile_0.75  #>             1             2  #> attr(,\"label\") #> [1] \"25% and 75%-ile\" #>  #> $A.a$iqr #> iqr  #>   1  #>  #> $A.a$range #> min max  #>   1   2  #>  #> $A.a$min #> min  #>   1  #>  #> $A.a$max #> max  #>   2  #>  #> $A.a$median_range #> median    min    max  #>    1.5    1.0    2.0  #> attr(,\"label\") #> [1] \"Median (Min - Max)\" #>  #> $A.a$cv #>       cv  #> 47.14045  #>  #> $A.a$geom_mean #> geom_mean  #>  1.414214  #>  #> $A.a$geom_mean_ci #>  mean_ci_lwr  mean_ci_upr  #>   0.01729978 115.60839614  #> attr(,\"label\") #> [1] \"Geometric Mean 95% CI\" #>  #> $A.a$geom_cv #>  geom_cv  #> 52.10922  #>  #>  #> $B.a #> $B.a$n #> n  #> 1  #>  #> $B.a$sum #> sum  #>   3  #>  #> $B.a$mean #> mean  #>    3  #>  #> $B.a$sd #> sd  #> NA  #>  #> $B.a$se #> se  #> NA  #>  #> $B.a$mean_sd #> mean   sd  #>    3   NA  #>  #> $B.a$mean_se #> mean   se  #>    3   NA  #>  #> $B.a$mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Mean 95% CI\" #>  #> $B.a$mean_sei #> mean_sei_lwr mean_sei_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSE\" #>  #> $B.a$mean_sdi #> mean_sdi_lwr mean_sdi_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSD\" #>  #> $B.a$mean_pval #> p_value  #>      NA  #> attr(,\"label\") #> [1] \"Mean p-value (H0: mean = 0)\" #>  #> $B.a$median #> median  #>      3  #>  #> $B.a$mad #> mad  #>   0  #>  #> $B.a$median_ci #> median_ci_lwr median_ci_upr  #>            NA            NA  #> attr(,\"conf_level\") #> [1] NA #> attr(,\"label\") #> [1] \"Median 95% CI\" #>  #> $B.a$quantiles #> quantile_0.25 quantile_0.75  #>             3             3  #> attr(,\"label\") #> [1] \"25% and 75%-ile\" #>  #> $B.a$iqr #> iqr  #>   0  #>  #> $B.a$range #> min max  #>   3   3  #>  #> $B.a$min #> min  #>   3  #>  #> $B.a$max #> max  #>   3  #>  #> $B.a$median_range #> median    min    max  #>      3      3      3  #> attr(,\"label\") #> [1] \"Median (Min - Max)\" #>  #> $B.a$cv #> cv  #> NA  #>  #> $B.a$geom_mean #> geom_mean  #>         3  #>  #> $B.a$geom_mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Geometric Mean 95% CI\" #>  #> $B.a$geom_cv #> geom_cv  #>      NA  #>  #>  #> $C.a #> $C.a$n #> n  #> 0  #>  #> $C.a$sum #> sum  #>  NA  #>  #> $C.a$mean #> mean  #>   NA  #>  #> $C.a$sd #> sd  #> NA  #>  #> $C.a$se #> se  #> NA  #>  #> $C.a$mean_sd #> mean   sd  #>   NA   NA  #>  #> $C.a$mean_se #> mean   se  #>   NA   NA  #>  #> $C.a$mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Mean 95% CI\" #>  #> $C.a$mean_sei #> mean_sei_lwr mean_sei_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSE\" #>  #> $C.a$mean_sdi #> mean_sdi_lwr mean_sdi_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSD\" #>  #> $C.a$mean_pval #> p_value  #>      NA  #> attr(,\"label\") #> [1] \"Mean p-value (H0: mean = 0)\" #>  #> $C.a$median #> median  #>     NA  #>  #> $C.a$mad #> mad  #>  NA  #>  #> $C.a$median_ci #> median_ci_lwr median_ci_upr  #>            NA            NA  #> attr(,\"conf_level\") #> [1] NA #> attr(,\"label\") #> [1] \"Median 95% CI\" #>  #> $C.a$quantiles #> quantile_0.25 quantile_0.75  #>            NA            NA  #> attr(,\"label\") #> [1] \"25% and 75%-ile\" #>  #> $C.a$iqr #> iqr  #>  NA  #>  #> $C.a$range #> min max  #>  NA  NA  #>  #> $C.a$min #> min  #>  NA  #>  #> $C.a$max #> max  #>  NA  #>  #> $C.a$median_range #> median    min    max  #>     NA     NA     NA  #> attr(,\"label\") #> [1] \"Median (Min - Max)\" #>  #> $C.a$cv #> cv  #> NA  #>  #> $C.a$geom_mean #> geom_mean  #>       NaN  #>  #> $C.a$geom_mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Geometric Mean 95% CI\" #>  #> $C.a$geom_cv #> geom_cv  #>      NA  #>  #>  #> $A.b #> $A.b$n #> n  #> 0  #>  #> $A.b$sum #> sum  #>  NA  #>  #> $A.b$mean #> mean  #>   NA  #>  #> $A.b$sd #> sd  #> NA  #>  #> $A.b$se #> se  #> NA  #>  #> $A.b$mean_sd #> mean   sd  #>   NA   NA  #>  #> $A.b$mean_se #> mean   se  #>   NA   NA  #>  #> $A.b$mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Mean 95% CI\" #>  #> $A.b$mean_sei #> mean_sei_lwr mean_sei_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSE\" #>  #> $A.b$mean_sdi #> mean_sdi_lwr mean_sdi_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSD\" #>  #> $A.b$mean_pval #> p_value  #>      NA  #> attr(,\"label\") #> [1] \"Mean p-value (H0: mean = 0)\" #>  #> $A.b$median #> median  #>     NA  #>  #> $A.b$mad #> mad  #>  NA  #>  #> $A.b$median_ci #> median_ci_lwr median_ci_upr  #>            NA            NA  #> attr(,\"conf_level\") #> [1] NA #> attr(,\"label\") #> [1] \"Median 95% CI\" #>  #> $A.b$quantiles #> quantile_0.25 quantile_0.75  #>            NA            NA  #> attr(,\"label\") #> [1] \"25% and 75%-ile\" #>  #> $A.b$iqr #> iqr  #>  NA  #>  #> $A.b$range #> min max  #>  NA  NA  #>  #> $A.b$min #> min  #>  NA  #>  #> $A.b$max #> max  #>  NA  #>  #> $A.b$median_range #> median    min    max  #>     NA     NA     NA  #> attr(,\"label\") #> [1] \"Median (Min - Max)\" #>  #> $A.b$cv #> cv  #> NA  #>  #> $A.b$geom_mean #> geom_mean  #>       NaN  #>  #> $A.b$geom_mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Geometric Mean 95% CI\" #>  #> $A.b$geom_cv #> geom_cv  #>      NA  #>  #>  #> $B.b #> $B.b$n #> n  #> 1  #>  #> $B.b$sum #> sum  #>   4  #>  #> $B.b$mean #> mean  #>    4  #>  #> $B.b$sd #> sd  #> NA  #>  #> $B.b$se #> se  #> NA  #>  #> $B.b$mean_sd #> mean   sd  #>    4   NA  #>  #> $B.b$mean_se #> mean   se  #>    4   NA  #>  #> $B.b$mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Mean 95% CI\" #>  #> $B.b$mean_sei #> mean_sei_lwr mean_sei_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSE\" #>  #> $B.b$mean_sdi #> mean_sdi_lwr mean_sdi_upr  #>           NA           NA  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSD\" #>  #> $B.b$mean_pval #> p_value  #>      NA  #> attr(,\"label\") #> [1] \"Mean p-value (H0: mean = 0)\" #>  #> $B.b$median #> median  #>      4  #>  #> $B.b$mad #> mad  #>   0  #>  #> $B.b$median_ci #> median_ci_lwr median_ci_upr  #>            NA            NA  #> attr(,\"conf_level\") #> [1] NA #> attr(,\"label\") #> [1] \"Median 95% CI\" #>  #> $B.b$quantiles #> quantile_0.25 quantile_0.75  #>             4             4  #> attr(,\"label\") #> [1] \"25% and 75%-ile\" #>  #> $B.b$iqr #> iqr  #>   0  #>  #> $B.b$range #> min max  #>   4   4  #>  #> $B.b$min #> min  #>   4  #>  #> $B.b$max #> max  #>   4  #>  #> $B.b$median_range #> median    min    max  #>      4      4      4  #> attr(,\"label\") #> [1] \"Median (Min - Max)\" #>  #> $B.b$cv #> cv  #> NA  #>  #> $B.b$geom_mean #> geom_mean  #>         4  #>  #> $B.b$geom_mean_ci #> mean_ci_lwr mean_ci_upr  #>          NA          NA  #> attr(,\"label\") #> [1] \"Geometric Mean 95% CI\" #>  #> $B.b$geom_cv #> geom_cv  #>      NA  #>  #>  #> $C.b #> $C.b$n #> n  #> 2  #>  #> $C.b$sum #> sum  #>  11  #>  #> $C.b$mean #> mean  #>  5.5  #>  #> $C.b$sd #>        sd  #> 0.7071068  #>  #> $C.b$se #>  se  #> 0.5  #>  #> $C.b$mean_sd #>      mean        sd  #> 5.5000000 0.7071068  #>  #> $C.b$mean_se #> mean   se  #>  5.5  0.5  #>  #> $C.b$mean_ci #> mean_ci_lwr mean_ci_upr  #>  -0.8531024  11.8531024  #> attr(,\"label\") #> [1] \"Mean 95% CI\" #>  #> $C.b$mean_sei #> mean_sei_lwr mean_sei_upr  #>            5            6  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSE\" #>  #> $C.b$mean_sdi #> mean_sdi_lwr mean_sdi_upr  #>     4.792893     6.207107  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSD\" #>  #> $C.b$mean_pval #>    p_value  #> 0.05771588  #> attr(,\"label\") #> [1] \"Mean p-value (H0: mean = 0)\" #>  #> $C.b$median #> median  #>    5.5  #>  #> $C.b$mad #> mad  #>   0  #>  #> $C.b$median_ci #> median_ci_lwr median_ci_upr  #>            NA            NA  #> attr(,\"conf_level\") #> [1] NA #> attr(,\"label\") #> [1] \"Median 95% CI\" #>  #> $C.b$quantiles #> quantile_0.25 quantile_0.75  #>             5             6  #> attr(,\"label\") #> [1] \"25% and 75%-ile\" #>  #> $C.b$iqr #> iqr  #>   1  #>  #> $C.b$range #> min max  #>   5   6  #>  #> $C.b$min #> min  #>   5  #>  #> $C.b$max #> max  #>   6  #>  #> $C.b$median_range #> median    min    max  #>    5.5    5.0    6.0  #> attr(,\"label\") #> [1] \"Median (Min - Max)\" #>  #> $C.b$cv #>       cv  #> 12.85649  #>  #> $C.b$geom_mean #> geom_mean  #>  5.477226  #>  #> $C.b$geom_mean_ci #> mean_ci_lwr mean_ci_upr  #>    1.719943   17.442438  #> attr(,\"label\") #> [1] \"Geometric Mean 95% CI\" #>  #> $C.b$geom_cv #>  geom_cv  #> 12.94584  #>  #>   # `s_summary.factor`  ## Basic usage: s_summary(factor(c(\"a\", \"a\", \"b\", \"c\", \"a\"))) #> $n #> [1] 5 #>  #> $count #> $count$a #> [1] 3 #>  #> $count$b #> [1] 1 #>  #> $count$c #> [1] 1 #>  #>  #> $count_fraction #> $count_fraction$a #> [1] 3.0 0.6 #>  #> $count_fraction$b #> [1] 1.0 0.2 #>  #> $count_fraction$c #> [1] 1.0 0.2 #>  #>  #> $n_blq #> [1] 0 #>  # Empty factor returns NA-filled items. s_summary(factor(levels = c(\"a\", \"b\", \"c\"))) #> $n #> [1] 0 #>  #> $count #> $count$a #> [1] 0 #>  #> $count$b #> [1] 0 #>  #> $count$c #> [1] 0 #>  #>  #> $count_fraction #> $count_fraction$a #> [1] 0 0 #>  #> $count_fraction$b #> [1] 0 0 #>  #> $count_fraction$c #> [1] 0 0 #>  #>  #> $n_blq #> [1] 0 #>   ## Management of NA values. x <- factor(c(NA, \"Female\")) x <- explicit_na(x) s_summary(x, na.rm = TRUE) #> $n #> [1] 1 #>  #> $count #> $count$Female #> [1] 1 #>  #>  #> $count_fraction #> $count_fraction$Female #> [1] 1 1 #>  #>  #> $n_blq #> [1] 0 #>  s_summary(x, na.rm = FALSE) #> $n #> [1] 2 #>  #> $count #> $count$Female #> [1] 1 #>  #> $count$`<Missing>` #> [1] 1 #>  #>  #> $count_fraction #> $count_fraction$Female #> [1] 1.0 0.5 #>  #> $count_fraction$`<Missing>` #> [1] 1.0 0.5 #>  #>  #> $n_blq #> [1] 0 #>   ## Different denominators. x <- factor(c(\"a\", \"a\", \"b\", \"c\", \"a\")) s_summary(x, denom = \"N_row\", .N_row = 10L) #> $n #> [1] 5 #>  #> $count #> $count$a #> [1] 3 #>  #> $count$b #> [1] 1 #>  #> $count$c #> [1] 1 #>  #>  #> $count_fraction #> $count_fraction$a #> [1] 3.0 0.3 #>  #> $count_fraction$b #> [1] 1.0 0.1 #>  #> $count_fraction$c #> [1] 1.0 0.1 #>  #>  #> $n_blq #> [1] 0 #>  s_summary(x, denom = \"N_col\", .N_col = 20L) #> $n #> [1] 5 #>  #> $count #> $count$a #> [1] 3 #>  #> $count$b #> [1] 1 #>  #> $count$c #> [1] 1 #>  #>  #> $count_fraction #> $count_fraction$a #> [1] 3.00 0.15 #>  #> $count_fraction$b #> [1] 1.00 0.05 #>  #> $count_fraction$c #> [1] 1.00 0.05 #>  #>  #> $n_blq #> [1] 0 #>   # `s_summary.character`  ## Basic usage: s_summary(c(\"a\", \"a\", \"b\", \"c\", \"a\"), .var = \"x\", verbose = FALSE) #> $n #> [1] 5 #>  #> $count #> $count$a #> [1] 3 #>  #> $count$b #> [1] 1 #>  #> $count$c #> [1] 1 #>  #>  #> $count_fraction #> $count_fraction$a #> [1] 3.0 0.6 #>  #> $count_fraction$b #> [1] 1.0 0.2 #>  #> $count_fraction$c #> [1] 1.0 0.2 #>  #>  #> $n_blq #> [1] 0 #>  s_summary(c(\"a\", \"a\", \"b\", \"c\", \"a\", \"\"), .var = \"x\", na.rm = FALSE, verbose = FALSE) #> $n #> [1] 6 #>  #> $count #> $count$a #> [1] 3 #>  #> $count$b #> [1] 1 #>  #> $count$c #> [1] 1 #>  #> $count$`<Missing>` #> [1] 1 #>  #>  #> $count_fraction #> $count_fraction$a #> [1] 3.0 0.5 #>  #> $count_fraction$b #> [1] 1.0000000 0.1666667 #>  #> $count_fraction$c #> [1] 1.0000000 0.1666667 #>  #> $count_fraction$`<Missing>` #> [1] 1.0000000 0.1666667 #>  #>  #> $n_blq #> [1] 0 #>  # `s_summary.logical`  ## Basic usage: s_summary(c(TRUE, FALSE, TRUE, TRUE)) #> $n #> [1] 4 #>  #> $count #> [1] 3 #>  #> $count_fraction #> [1] 3.00 0.75 #>  #> $n_blq #> [1] 0 #>   ## Management of NA values. x <- c(NA, TRUE, FALSE) s_summary(x, na.rm = TRUE) #> $n #> [1] 2 #>  #> $count #> [1] 1 #>  #> $count_fraction #> [1] 1.0 0.5 #>  #> $n_blq #> [1] 0 #>  s_summary(x, na.rm = FALSE) #> $n #> [1] 3 #>  #> $count #> [1] 1 #>  #> $count_fraction #> [1] 1.0000000 0.3333333 #>  #> $n_blq #> [1] 0 #>   ## Different denominators. x <- c(TRUE, FALSE, TRUE, TRUE) s_summary(x, denom = \"N_row\", .N_row = 10L) #> $n #> [1] 4 #>  #> $count #> [1] 3 #>  #> $count_fraction #> [1] 3.0 0.3 #>  #> $n_blq #> [1] 0 #>  s_summary(x, denom = \"N_col\", .N_col = 20L) #> $n #> [1] 4 #>  #> $count #> [1] 3 #>  #> $count_fraction #> [1] 3.00 0.15 #>  #> $n_blq #> [1] 0 #>   # `a_summary.numeric` a_summary(rnorm(10), .N_col = 10, .N_row = 20, .var = \"bla\") #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>        row_name   formatted_cell indent_mod                   row_label #> 1             n               10          0                           n #> 2           sum              1.1          0                         Sum #> 3          mean              0.1          0                        Mean #> 4            sd              1.0          0                          SD #> 5            se              0.3          0                          SE #> 6       mean_sd        0.1 (1.0)          0                   Mean (SD) #> 7       mean_se        0.1 (0.3)          0                   Mean (SE) #> 8       mean_ci    (-0.63, 0.86)          0                 Mean 95% CI #> 9      mean_sei    (-0.22, 0.44)          0               Mean -/+ 1xSE #> 10     mean_sdi    (-0.93, 1.16)          0               Mean -/+ 1xSD #> 11    mean_pval             0.74          0 Mean p-value (H0: mean = 0) #> 12       median              0.2          0                      Median #> 13          mad              0.0          0   Median Absolute Deviation #> 14    median_ci    (-0.62, 1.12)          0               Median 95% CI #> 15    quantiles       -0.3 - 0.7          0             25% and 75%-ile #> 16          iqr              1.0          0                         IQR #> 17        range       -2.2 - 1.5          0                   Min - Max #> 18          min             -2.2          0                     Minimum #> 19          max              1.5          0                     Maximum #> 20 median_range 0.2 (-2.2 - 1.5)          0          Median (Min - Max) #> 21           cv            918.5          0                      CV (%) #> 22    geom_mean               NA          0              Geometric Mean #> 23 geom_mean_ci               NA          0       Geometric Mean 95% CI #> 24      geom_cv               NA          0         CV % Geometric Mean # `a_summary.factor` # We need to ungroup `count` and `count_fraction` first so that the rtables formatting # functions can be applied correctly. afun <- make_afun(   getS3method(\"a_summary\", \"factor\"),   .ungroup_stats = c(\"count\", \"count_fraction\") ) afun(factor(c(\"a\", \"a\", \"b\", \"c\", \"a\")), .N_row = 10, .N_col = 10) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1        n              5          0         n #> 2        a              3          0         a #> 3        b              1          0         b #> 4        c              1          0         c #> 5        a        3 (60%)          0         a #> 6        b        1 (20%)          0         b #> 7        c        1 (20%)          0         c #> 8    n_blq              0          0     n_blq # `a_summary.character` afun <- make_afun(   getS3method(\"a_summary\", \"character\"),   .ungroup_stats = c(\"count\", \"count_fraction\") ) afun(c(\"A\", \"B\", \"A\", \"C\"), .var = \"x\", .N_col = 10, .N_row = 10, verbose = FALSE) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1        n              4          0         n #> 2        A              2          0         A #> 3        B              1          0         B #> 4        C              1          0         C #> 5        A        2 (50%)          0         A #> 6        B        1 (25%)          0         B #> 7        C        1 (25%)          0         C #> 8    n_blq              0          0     n_blq # `a_summary.logical` afun <- make_afun(   getS3method(\"a_summary\", \"logical\") ) afun(c(TRUE, FALSE, FALSE, TRUE, TRUE), .N_row = 10, .N_col = 10) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>         row_name formatted_cell indent_mod      row_label #> 1              n              5          0              n #> 2          count              3          0          count #> 3 count_fraction        3 (60%)          0 count_fraction #> 4          n_blq              0          0          n_blq ## Fabricated dataset. dta_test <- data.frame(   USUBJID = rep(1:6, each = 3),   PARAMCD = rep(\"lab\", 6 * 3),   AVISIT  = rep(paste0(\"V\", 1:3), 6),   ARM     = rep(LETTERS[1:3], rep(6, 3)),   AVAL    = c(9:1, rep(NA, 9)) )  # `summarize_vars()` in `rtables` pipelines ## Default output within a `rtables` pipeline. l <- basic_table() %>%   split_cols_by(var = \"ARM\") %>%   split_rows_by(var = \"AVISIT\") %>%   summarize_vars(vars = \"AVAL\")  build_table(l, df = dta_test) #>                   A           B       C  #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> V1                                       #>   n               2           1       0  #>   Mean (SD)   7.5 (2.1)   3.0 (NA)    NA #>   Median         7.5         3.0      NA #>   Min - Max   6.0 - 9.0   3.0 - 3.0   NA #> V2                                       #>   n               2           1       0  #>   Mean (SD)   6.5 (2.1)   2.0 (NA)    NA #>   Median         6.5         2.0      NA #>   Min - Max   5.0 - 8.0   2.0 - 2.0   NA #> V3                                       #>   n               2           1       0  #>   Mean (SD)   5.5 (2.1)   1.0 (NA)    NA #>   Median         5.5         1.0      NA #>   Min - Max   4.0 - 7.0   1.0 - 1.0   NA  ## Select and format statistics output. l <- basic_table() %>%   split_cols_by(var = \"ARM\") %>%   split_rows_by(var = \"AVISIT\") %>%   summarize_vars(     vars = \"AVAL\",     .stats = c(\"n\", \"mean_sd\", \"quantiles\"),     .formats = c(\"mean_sd\" = \"xx.x, xx.x\"),     .labels = c(n = \"n\", mean_sd = \"Mean, SD\", quantiles = c(\"Q1 - Q3\"))   )  results <- build_table(l, df = dta_test) as_html(results) #> <div class=\"rtables-all-parts-block rtables-container\"> #>   <table class=\"table table-condensed table-hover\"> #>     <tr> #>       <th style=\"white-space:pre;\"><\/th> #>       <th class=\"text-center\">A<\/th> #>       <th class=\"text-center\">B<\/th> #>       <th class=\"text-center\">C<\/th> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\">V1<\/td> #>       <td class=\"text-center\"><\/td> #>       <td class=\"text-center\"><\/td> #>       <td class=\"text-center\"><\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\" style=\"padding-left: 3ch\">n<\/td> #>       <td class=\"text-center\">2<\/td> #>       <td class=\"text-center\">1<\/td> #>       <td class=\"text-center\">0<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\" style=\"padding-left: 3ch\">Mean, SD<\/td> #>       <td class=\"text-center\">7.5, 2.1<\/td> #>       <td class=\"text-center\">3.0, NA<\/td> #>       <td class=\"text-center\">NA<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\" style=\"padding-left: 3ch\">Q1 - Q3<\/td> #>       <td class=\"text-center\">6.0 - 9.0<\/td> #>       <td class=\"text-center\">3.0 - 3.0<\/td> #>       <td class=\"text-center\">NA<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\">V2<\/td> #>       <td class=\"text-center\"><\/td> #>       <td class=\"text-center\"><\/td> #>       <td class=\"text-center\"><\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\" style=\"padding-left: 3ch\">n<\/td> #>       <td class=\"text-center\">2<\/td> #>       <td class=\"text-center\">1<\/td> #>       <td class=\"text-center\">0<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\" style=\"padding-left: 3ch\">Mean, SD<\/td> #>       <td class=\"text-center\">6.5, 2.1<\/td> #>       <td class=\"text-center\">2.0, NA<\/td> #>       <td class=\"text-center\">NA<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\" style=\"padding-left: 3ch\">Q1 - Q3<\/td> #>       <td class=\"text-center\">5.0 - 8.0<\/td> #>       <td class=\"text-center\">2.0 - 2.0<\/td> #>       <td class=\"text-center\">NA<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\">V3<\/td> #>       <td class=\"text-center\"><\/td> #>       <td class=\"text-center\"><\/td> #>       <td class=\"text-center\"><\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\" style=\"padding-left: 3ch\">n<\/td> #>       <td class=\"text-center\">2<\/td> #>       <td class=\"text-center\">1<\/td> #>       <td class=\"text-center\">0<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\" style=\"padding-left: 3ch\">Mean, SD<\/td> #>       <td class=\"text-center\">5.5, 2.1<\/td> #>       <td class=\"text-center\">1.0, NA<\/td> #>       <td class=\"text-center\">NA<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\" style=\"padding-left: 3ch\">Q1 - Q3<\/td> #>       <td class=\"text-center\">4.0 - 7.0<\/td> #>       <td class=\"text-center\">1.0 - 1.0<\/td> #>       <td class=\"text-center\">NA<\/td> #>     <\/tr> #>     <caption style=\"caption-side:top;\"><div class=\"rtables-titles-block rtables-container\"> #>         <div class=\"rtables-main-titles-block rtables-container\"> #>           <p class=\"rtables-main-title\"><\/p> #>         <\/div> #>         <div class=\"rtables-subtitles-block rtables-container\"><\/div> #>       <\/div> #>     <\/caption> #>   <\/table> #>   <div class=\"rtables-footers-block rtables-container\"><\/div> #> <\/div>  ## Use arguments interpreted by `s_summary`. l <- basic_table() %>%   split_cols_by(var = \"ARM\") %>%   split_rows_by(var = \"AVISIT\") %>%   summarize_vars(vars = \"AVAL\", na.rm = FALSE)  results <- build_table(l, df = dta_test)  ## Handle `NA` levels first when summarizing factors. dta_test$AVISIT <- NA_character_ dta_test <- df_explicit_na(dta_test) l <- basic_table() %>%   split_cols_by(var = \"ARM\") %>%   summarize_vars(vars = \"AVISIT\", na.rm = FALSE)  results <- build_table(l, df = dta_test) if (FALSE) { Viewer(results) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/summary_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Function for Descriptive Statistics ‚Äî summary_formats","title":"Format Function for Descriptive Statistics ‚Äî summary_formats","text":"Returns format patterns descriptive statistics. format understood rtables.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summary_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Function for Descriptive Statistics ‚Äî summary_formats","text":"","code":"summary_formats(type = \"numeric\")"},{"path":"https://insightsengineering.github.io/tern/main/reference/summary_formats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Function for Descriptive Statistics ‚Äî summary_formats","text":"type (string) choice summary data type. counts numeric types currently supported.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summary_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Label Function for Descriptive Statistics ‚Äî summary_labels","title":"Label Function for Descriptive Statistics ‚Äî summary_labels","text":"Returns labels descriptive statistics numeric variables.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/summary_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label Function for Descriptive Statistics ‚Äî summary_labels","text":"","code":"summary_labels()"},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_biomarkers_subgroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate Biomarker Effects on Survival by Subgroup ‚Äî survival_biomarkers_subgroups","title":"Tabulate Biomarker Effects on Survival by Subgroup ‚Äî survival_biomarkers_subgroups","text":"Tabulate estimated effects multiple continuous biomarker variables across population subgroups.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_biomarkers_subgroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate Biomarker Effects on Survival by Subgroup ‚Äî survival_biomarkers_subgroups","text":"","code":"tabulate_survival_biomarkers(   df,   vars = c(\"n_tot\", \"n_tot_events\", \"median\", \"hr\", \"ci\", \"pval\"),   time_unit = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_biomarkers_subgroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate Biomarker Effects on Survival by Subgroup ‚Äî survival_biomarkers_subgroups","text":"df (data.frame) containing analysis variables, returned extract_survival_biomarkers(). vars (character) names statistics reported among: n_tot_events: total number events per group. n_tot: total number observations per group. median: median survival time. hr: hazard ratio. ci: confidence interval hazard ratio. pval: p-value effect. Note, one statistics n_tot n_tot_events, well hr ci required. time_unit (string) label unit median survival time. Default NULL skips displaying unit.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_biomarkers_subgroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabulate Biomarker Effects on Survival by Subgroup ‚Äî survival_biomarkers_subgroups","text":"functions create layout starting data frame contains required statistics. tables typically used input forest plots.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_biomarkers_subgroups.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Tabulate Biomarker Effects on Survival by Subgroup ‚Äî survival_biomarkers_subgroups","text":"tabulate_survival_biomarkers(): table creating function.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_biomarkers_subgroups.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tabulate Biomarker Effects on Survival by Subgroup ‚Äî survival_biomarkers_subgroups","text":"contrast tabulate_survival_subgroups() tabulation function start input layout lyt. internally table created combining multiple subtables.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_biomarkers_subgroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate Biomarker Effects on Survival by Subgroup ‚Äî survival_biomarkers_subgroups","text":"","code":"library(dplyr)  adtte <- tern_ex_adtte  # Save variable labels before data processing steps. adtte_labels <- formatters::var_labels(adtte)  adtte_f <- adtte %>%   filter(PARAMCD == \"OS\") %>%   mutate(     AVALU = as.character(AVALU),     is_event = CNSR == 0   ) labels <- c(\"AVALU\" = adtte_labels[[\"AVALU\"]], \"is_event\" = \"Event Flag\") formatters::var_labels(adtte_f)[names(labels)] <- labels  df <- extract_survival_biomarkers(   variables = list(     tte = \"AVAL\",     is_event = \"is_event\",     biomarkers = c(\"BMRKR1\", \"AGE\"),     strata = \"STRATA1\",     covariates = \"SEX\",     subgroups = \"BMRKR2\"   ),   data = adtte_f ) df #>   biomarker              biomarker_label n_tot n_tot_events   median        hr #> 1    BMRKR1 Continuous Level Biomarker 1   200          141 753.5176 1.0010939 #> 2       AGE                          Age   200          141 753.5176 1.0106406 #> 3    BMRKR1 Continuous Level Biomarker 1    70           52 735.4722 0.9905065 #> 4       AGE                          Age    70           52 735.4722 1.0106279 #> 5    BMRKR1 Continuous Level Biomarker 1    68           42 858.9952 0.9623210 #> 6       AGE                          Age    68           42 858.9952 1.0360765 #> 7    BMRKR1 Continuous Level Biomarker 1    62           47 727.8043 1.0770946 #> 8       AGE                          Age    62           47 727.8043 1.0009890 #>         lcl      ucl conf_level      pval     pval_label     subgroup    var #> 1 0.9538978 1.050625       0.95 0.9646086 p-value (Wald) All Patients    ALL #> 2 0.9871004 1.034742       0.95 0.3787395 p-value (Wald) All Patients    ALL #> 3 0.9142220 1.073156       0.95 0.8155443 p-value (Wald)          LOW BMRKR2 #> 4 0.9621192 1.061582       0.95 0.6735773 p-value (Wald)          LOW BMRKR2 #> 5 0.8708694 1.063376       0.95 0.4509368 p-value (Wald)       MEDIUM BMRKR2 #> 6 0.9727439 1.103532       0.95 0.2707796 p-value (Wald)       MEDIUM BMRKR2 #> 7 0.9756250 1.189118       0.95 0.1412524 p-value (Wald)         HIGH BMRKR2 #> 8 0.9678535 1.035259       0.95 0.9541048 p-value (Wald)         HIGH BMRKR2 #>                      var_label row_type #> 1                 All Patients  content #> 2                 All Patients  content #> 3 Continuous Level Biomarker 2 analysis #> 4 Continuous Level Biomarker 2 analysis #> 5 Continuous Level Biomarker 2 analysis #> 6 Continuous Level Biomarker 2 analysis #> 7 Continuous Level Biomarker 2 analysis #> 8 Continuous Level Biomarker 2 analysis ## Table with default columns. tabulate_survival_biomarkers(df) #>                                  Total n   Total Events   Median   Hazard Ratio   95% Wald CI    p-value (Wald) #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Age                                                                                                             #>   All Patients                     200         141        753.5        1.01       (0.99, 1.03)       0.3787     #>   Continuous Level Biomarker 2                                                                                  #>     LOW                            70           52        735.5        1.01       (0.96, 1.06)       0.6736     #>     MEDIUM                         68           42        859.0        1.04       (0.97, 1.10)       0.2708     #>     HIGH                           62           47        727.8        1.00       (0.97, 1.04)       0.9541     #> Continuous Level Biomarker 1                                                                                    #>   All Patients                     200         141        753.5        1.00       (0.95, 1.05)       0.9646     #>   Continuous Level Biomarker 2                                                                                  #>     LOW                            70           52        735.5        0.99       (0.91, 1.07)       0.8155     #>     MEDIUM                         68           42        859.0        0.96       (0.87, 1.06)       0.4509     #>     HIGH                           62           47        727.8        1.08       (0.98, 1.19)       0.1413      ## Table with a manually chosen set of columns: leave out \"pval\", reorder. tab <- tabulate_survival_biomarkers(   df = df,   vars = c(\"n_tot_events\", \"ci\", \"n_tot\", \"median\", \"hr\"),   time_unit = as.character(adtte_f$AVALU[1]) )  ## Finally produce the forest plot. if (FALSE) { g_forest(tab, xlim = c(0.8, 1.2)) }"},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_coxph_pairwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise CoxPH model ‚Äî survival_coxph_pairwise","title":"Pairwise CoxPH model ‚Äî survival_coxph_pairwise","text":"Summarize p-value, HR CIs stratified unstratified CoxPH model.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_coxph_pairwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise CoxPH model ‚Äî survival_coxph_pairwise","text":"","code":"s_coxph_pairwise(   df,   .ref_group,   .in_ref_col,   .var,   is_event,   strat = NULL,   control = control_coxph() )  a_coxph_pairwise(   df,   .ref_group,   .in_ref_col,   .var,   is_event,   strat = NULL,   control = control_coxph() )  coxph_pairwise(   lyt,   vars,   ...,   var_labels = \"CoxPH\",   show_labels = \"visible\",   table_names = vars,   .stats = c(\"pvalue\", \"hr\", \"hr_ci\"),   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_coxph_pairwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise CoxPH model ‚Äî survival_coxph_pairwise","text":"df (data.frame) data set containing analysis variables. .ref_group (data.frame vector) data corresponding reference group. .in_ref_col (logical)TRUE working reference level, FALSE otherwise. .var (string) single variable name passed rtables requested statistics function. is_event (logical)TRUE event, FALSE time event censored. strat (character NULL) variable names indicating stratification factors. control (list) parameters comparison details, specified using helper function control_coxph(). possible parameter options : pval_method (string) p-value method testing hazard ratio = 1. Default method \"log-rank\" comes survival::survdiff(), can also set \"wald\" \"likelihood\" (survival::coxph()). ties (string) specifying method tie handling. Default \"efron\", can also set \"breslow\" \"exact\". See survival::coxph() conf_level (proportion) confidence level interval HR. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . ... additional arguments lower level functions. var_labels (character) character label. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_coxph_pairwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise CoxPH model ‚Äî survival_coxph_pairwise","text":"statistics : pvalue p-value test HR = 1. hr hazard ratio. hr_ci confidence interval hazard ratio. n_tot total number observations. n_tot_events total number events.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_coxph_pairwise.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Pairwise CoxPH model ‚Äî survival_coxph_pairwise","text":"s_coxph_pairwise(): Statistics Function analyzes HR, CIs HR p-value coxph model. a_coxph_pairwise(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). coxph_pairwise(): Analyze Function adds pairwise coxph analysis input layout. Note additional formatting arguments can used .","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_coxph_pairwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise CoxPH model ‚Äî survival_coxph_pairwise","text":"","code":"library(dplyr)  adtte_f <- tern_ex_adtte %>%   filter(PARAMCD == \"OS\") %>%   mutate(is_event = CNSR == 0) df <- adtte_f %>%   filter(ARMCD == \"ARM A\") df_ref_group <- adtte_f %>%   filter(ARMCD == \"ARM B\")  # Internal function - s_coxph_pairwise if (FALSE) { s_coxph_pairwise(df, df_ref_group, .in_ref_col = FALSE, .var = \"AVAL\", is_event = \"is_event\") }  # Internal function - a_coxph_pairwise if (FALSE) { a_coxph_pairwise(df, df_ref_group, .in_ref_col = FALSE, .var = \"AVAL\", is_event = \"is_event\") }  basic_table() %>%   split_cols_by(var = \"ARMCD\", ref_group = \"ARM A\") %>%   add_colcounts() %>%   coxph_pairwise(     vars = \"AVAL\",     is_event = \"is_event\",     var_labels = \"Unstratified Analysis\"   ) %>%   build_table(df = adtte_f) #>                         ARM A       ARM B          ARM C     #>                         (N=69)      (N=73)         (N=58)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Unstratified Analysis                                        #>   p-value (log-rank)                0.0905         0.0086    #>   Hazard Ratio                       1.41           1.81     #>   95% CI                         (0.95, 2.09)   (1.16, 2.84)  basic_table() %>%   split_cols_by(var = \"ARMCD\", ref_group = \"ARM A\") %>%   add_colcounts() %>%   coxph_pairwise(     vars = \"AVAL\",     is_event = \"is_event\",     var_labels = \"Stratified Analysis\",     strat = \"SEX\",     control = control_coxph(pval_method = \"wald\")   ) %>%   build_table(df = adtte_f) #>                       ARM A       ARM B          ARM C     #>                       (N=69)      (N=73)         (N=58)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Stratified Analysis                                        #>   p-value (wald)                  0.0784         0.0066    #>   Hazard Ratio                     1.44           1.89     #>   95% CI                       (0.96, 2.15)   (1.19, 2.98)"},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_duration_subgroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate Survival Duration by Subgroup ‚Äî survival_duration_subgroups","title":"Tabulate Survival Duration by Subgroup ‚Äî survival_duration_subgroups","text":"Tabulate statistics median survival time hazard ratio population subgroups.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_duration_subgroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate Survival Duration by Subgroup ‚Äî survival_duration_subgroups","text":"","code":"a_survival_subgroups(   .formats = list(n = \"xx\", n_events = \"xx\", n_tot_events = \"xx\", median = \"xx.x\", n_tot     = \"xx\", hr = list(format_extreme_values(2L)), ci =     list(format_extreme_values_ci(2L)), pval = \"x.xxxx | (<0.0001)\") )  tabulate_survival_subgroups(   lyt,   df,   vars = c(\"n_tot_events\", \"n_events\", \"median\", \"hr\", \"ci\"),   time_unit = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_duration_subgroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate Survival Duration by Subgroup ‚Äî survival_duration_subgroups","text":".formats (named character list) formats statistics. lyt (layout) input layout analyses added . df (list) data frames containing analysis variables. List created using extract_survival_subgroups(). vars (character) name statistics reported among n_tot_events (total number events per group), n_events (number events per group), n_tot (total number observations per group), n (number observations per group), median (median survival time), hr (hazard ratio), ci (confidence interval hazard ratio) pval (p value effect). Note, one statistics n_tot n_tot_events, well hr ci required. time_unit (string) label unit median survival time. Default NULL skips displaying unit. data (data.frame) dataset containing variables summarize. groups_lists (named list list) optionally contains subgroups variable list, specifies new group levels via names levels belong character vectors elements list. label_all (string) label total population analysis.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_duration_subgroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabulate Survival Duration by Subgroup ‚Äî survival_duration_subgroups","text":"functions create layout starting data frame contains required statistics. Tables typically used part forest plot.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_duration_subgroups.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Tabulate Survival Duration by Subgroup ‚Äî survival_duration_subgroups","text":"a_survival_subgroups(): Formatted Analysis function used format results extract_survival_subgroups(). Returns list Formatted Analysis functions one element per statistic. tabulate_survival_subgroups(): table creating function.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_duration_subgroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate Survival Duration by Subgroup ‚Äî survival_duration_subgroups","text":"","code":"library(dplyr) library(forcats)  adtte <- tern_ex_adtte  # Save variable labels before data processing steps. adtte_labels <- formatters::var_labels(adtte)  adtte_f <- adtte %>%   filter(     PARAMCD == \"OS\",     ARM %in% c(\"B: Placebo\", \"A: Drug X\"),     SEX %in% c(\"M\", \"F\")   ) %>%   mutate(     # Reorder levels of ARM to display reference arm before treatment arm.     ARM = droplevels(fct_relevel(ARM, \"B: Placebo\")),     SEX = droplevels(SEX),     AVALU = as.character(AVALU),     is_event = CNSR == 0   ) labels <- c(   \"ARM\" = adtte_labels[[\"ARM\"]],   \"SEX\" = adtte_labels[[\"SEX\"]],   \"AVALU\" = adtte_labels[[\"AVALU\"]],   \"is_event\" = \"Event Flag\" ) formatters::var_labels(adtte_f)[names(labels)] <- labels  df <- extract_survival_subgroups(   variables = list(     tte = \"AVAL\",     is_event = \"is_event\",     arm = \"ARM\", subgroups = c(\"SEX\", \"BMRKR2\")   ),   data = adtte_f ) df #> $survtime #>           arm  n n_events    median     subgroup    var #> 1  B: Placebo 73       57  727.8043 All Patients    ALL #> 2   A: Drug X 69       44  974.6402 All Patients    ALL #> 3  B: Placebo 40       31  599.1772            F    SEX #> 4   A: Drug X 38       24 1016.2982            F    SEX #> 5  B: Placebo 33       26  888.4916            M    SEX #> 6   A: Drug X 31       20  974.6402            M    SEX #> 7  B: Placebo 24       21  735.4722          LOW BMRKR2 #> 8   A: Drug X 26       15  974.6402          LOW BMRKR2 #> 9  B: Placebo 23       14  731.8352       MEDIUM BMRKR2 #> 10  A: Drug X 26       17  964.2197       MEDIUM BMRKR2 #> 11 B: Placebo 26       22  654.8245         HIGH BMRKR2 #> 12  A: Drug X 17       12 1016.2982         HIGH BMRKR2 #>                       var_label row_type #> 1                  All Patients  content #> 2                  All Patients  content #> 3                           Sex analysis #> 4                           Sex analysis #> 5                           Sex analysis #> 6                           Sex analysis #> 7  Continuous Level Biomarker 2 analysis #> 8  Continuous Level Biomarker 2 analysis #> 9  Continuous Level Biomarker 2 analysis #> 10 Continuous Level Biomarker 2 analysis #> 11 Continuous Level Biomarker 2 analysis #> 12 Continuous Level Biomarker 2 analysis #>  #> $hr #>   arm n_tot n_tot_events        hr       lcl       ucl conf_level       pval #> 1       142          101 0.7108557 0.4779138 1.0573368       0.95 0.09049511 #> 2        78           55 0.5595391 0.3246658 0.9643271       0.95 0.03411759 #> 3        64           46 0.9102874 0.5032732 1.6464678       0.95 0.75582028 #> 4        50           36 0.7617717 0.3854349 1.5055617       0.95 0.43236030 #> 5        49           31 0.7651261 0.3641277 1.6077269       0.95 0.47860004 #> 6        43           34 0.6662356 0.3257413 1.3626456       0.95 0.26285846 #>           pval_label     subgroup    var                    var_label row_type #> 1 p-value (log-rank) All Patients    ALL                 All Patients  content #> 2 p-value (log-rank)            F    SEX                          Sex analysis #> 3 p-value (log-rank)            M    SEX                          Sex analysis #> 4 p-value (log-rank)          LOW BMRKR2 Continuous Level Biomarker 2 analysis #> 5 p-value (log-rank)       MEDIUM BMRKR2 Continuous Level Biomarker 2 analysis #> 6 p-value (log-rank)         HIGH BMRKR2 Continuous Level Biomarker 2 analysis #>  # Internal function - a_survival_subgroups if (FALSE) { a_survival_subgroups(.formats = list(\"n\" = \"xx\", \"median\" = \"xx.xx\")) }   ## Table with default columns. basic_table() %>%   tabulate_survival_subgroups(df, time_unit = adtte_f$AVALU[1]) #> Baseline Risk Factors                               B: Placebo               A: Drug X                                      #>                                Total Events   Events   Median (DAYS)   Events   Median (DAYS)   Hazard Ratio   95% Wald CI  #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> All Patients                       101          57         727.8         44         974.6           0.71       (0.48, 1.06) #> Sex                                                                                                                         #>   F                                 55          31         599.2         24        1016.3           0.56       (0.32, 0.96) #>   M                                 46          26         888.5         20         974.6           0.91       (0.50, 1.65) #> Continuous Level Biomarker 2                                                                                                #>   LOW                               36          21         735.5         15         974.6           0.76       (0.39, 1.51) #>   MEDIUM                            31          14         731.8         17         964.2           0.77       (0.36, 1.61) #>   HIGH                              34          22         654.8         12        1016.3           0.67       (0.33, 1.36)  ## Table with a manually chosen set of columns: adding \"pval\". basic_table() %>%   tabulate_survival_subgroups(     df = df,     vars = c(\"n_tot_events\", \"n_events\", \"median\", \"hr\", \"ci\", \"pval\"),     time_unit = adtte_f$AVALU[1]   ) #> Baseline Risk Factors                               B: Placebo               A: Drug X                                                           #>                                Total Events   Events   Median (DAYS)   Events   Median (DAYS)   Hazard Ratio   95% Wald CI    p-value (log-rank) #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> All Patients                       101          57         727.8         44         974.6           0.71       (0.48, 1.06)         0.0905       #> Sex                                                                                                                                              #>   F                                 55          31         599.2         24        1016.3           0.56       (0.32, 0.96)         0.0341       #>   M                                 46          26         888.5         20         974.6           0.91       (0.50, 1.65)         0.7558       #> Continuous Level Biomarker 2                                                                                                                     #>   LOW                               36          21         735.5         15         974.6           0.76       (0.39, 1.51)         0.4324       #>   MEDIUM                            31          14         731.8         17         964.2           0.77       (0.36, 1.61)         0.4786       #>   HIGH                              34          22         654.8         12        1016.3           0.67       (0.33, 1.36)         0.2629"},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Survival Time Analysis ‚Äî survival_time","title":"Survival Time Analysis ‚Äî survival_time","text":"Summarize median survival time CIs, percentiles survival times, survival time range censored/event patients.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Time Analysis ‚Äî survival_time","text":"","code":"s_surv_time(df, .var, is_event, control = control_surv_time())  a_surv_time(df, .var, is_event, control = control_surv_time())  surv_time(   lyt,   vars,   ...,   var_labels = \"Time to Event\",   table_names = vars,   .stats = c(\"median\", \"median_ci\", \"quantiles\", \"range_censor\", \"range_event\"),   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival Time Analysis ‚Äî survival_time","text":"df (data.frame) data set containing analysis variables. .var (string) single variable name passed rtables requested statistics function. is_event (logical)TRUE event, FALSE time event censored. control (list) parameters comparison details, specified using helper function control_surv_time(). possible parameter options : conf_level (proportion) confidence level interval survival time. conf_type (string) confidence interval type. Options \"plain\" (default), \"log\", \"log-log\", see survival::survfit(). Note option \"none\" supported. quantiles (numeric) vector length two specify quantiles survival time. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . ... additional arguments lower level functions. var_labels (character) character label. table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Survival Time Analysis ‚Äî survival_time","text":"statistics : median median survival time. median_ci confidence interval median time. quantiles survival time two specified quantiles. range_censor survival time range censored observations. range_event survival time range observations events. range survival time range observations.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_time.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Survival Time Analysis ‚Äî survival_time","text":"s_surv_time(): Statistics Function analyzes survival times. range_censor range_event. a_surv_time(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). surv_time(): Analyze Function adds survival times analysis input layout. Note additional formatting arguments can used .","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survival Time Analysis ‚Äî survival_time","text":"","code":"library(dplyr)  adtte_f <- tern_ex_adtte %>%   filter(PARAMCD == \"OS\") %>%   mutate(     AVAL = day2month(AVAL),     is_event = CNSR == 0   ) df <- adtte_f %>% filter(ARMCD == \"ARM A\")  # Internal function - s_surv_time if (FALSE) { s_surv_time(df, .var = \"AVAL\", is_event = \"is_event\") }  # Internal function - a_surv_time if (FALSE) { a_surv_time(df, .var = \"AVAL\", is_event = \"is_event\") }  basic_table() %>%   split_cols_by(var = \"ARMCD\") %>%   add_colcounts() %>%   surv_time(     vars = \"AVAL\",     var_labels = \"Survival Time (Months)\",     is_event = \"is_event\",     control = control_surv_time(conf_level = 0.9, conf_type = \"log-log\")   ) %>%   build_table(df = adtte_f) #>                             ARM A          ARM B          ARM C     #>                             (N=69)         (N=73)         (N=58)    #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> Survival Time (Months)                                              #>   Median                     32.0           23.9           20.8     #>   90% CI                 (22.6, 46.5)   (18.3, 29.2)   (12.9, 25.9) #>   25% and 75%-ile         17.4, 65.3     9.8, 42.0      7.3, 37.1   #>   Range (censored)       0.8 to 63.5    6.2 to 78.9    3.4 to 52.4  #>   Range (event)          0.3 to 155.5   0.1 to 154.1   0.6 to 80.7"},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_timepoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Survival Time Point Analysis ‚Äî survival_timepoint","title":"Survival Time Point Analysis ‚Äî survival_timepoint","text":"Summarize patients' survival rate difference survival rates groups time point.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_timepoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Time Point Analysis ‚Äî survival_timepoint","text":"","code":"s_surv_timepoint(   df,   .var,   time_point,   is_event,   control = control_surv_timepoint() )  a_surv_timepoint(   df,   .var,   time_point,   is_event,   control = control_surv_timepoint() )  s_surv_timepoint_diff(   df,   .var,   .ref_group,   .in_ref_col,   time_point,   control = control_surv_timepoint(),   ... )  a_surv_timepoint_diff(   df,   .var,   .ref_group,   .in_ref_col,   time_point,   control = control_surv_timepoint(),   ... )  surv_timepoint(   lyt,   vars,   ...,   table_names_suffix = \"\",   var_labels = \"Time\",   show_labels = \"visible\",   method = c(\"surv\", \"surv_diff\", \"both\"),   .stats = c(\"pt_at_risk\", \"event_free_rate\", \"rate_ci\", \"rate_diff\", \"rate_diff_ci\",     \"ztest_pval\"),   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_timepoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival Time Point Analysis ‚Äî survival_timepoint","text":"df (data.frame) data set containing analysis variables. .var (string) single variable name passed rtables requested statistics function. time_point (number) survival time point interest. is_event (logical)TRUE event, FALSE time event censored. control (list) parameters comparison details, specified using helper function control_surv_timepoint(). possible parameter options : conf_level (proportion) confidence level interval survival rate. conf_type (string) confidence interval type. Options \"plain\" (default), \"log\", \"log-log\", see survival::survfit(). Note option \"none\" longer supported. time_point (number) survival time point interest. .ref_group (data.frame vector) data corresponding reference group. .in_ref_col (logical)TRUE working reference level, FALSE otherwise. ... additional arguments lower level functions. lyt (layout) input layout analyses added . vars (character) variable names primary analysis variable iterated . table_names_suffix (string) optional suffix table_names used rtables avoid warnings duplicate table names. var_labels (character) character label. show_labels (string) label visibility: one \"default\", \"visible\" \"hidden\". method (string) either surv (survival estimations), surv_diff (difference survival control) . .stats (character) statistics select table. .formats (named character list) formats statistics. .labels (named character) labels statistics (without indent). .indent_mods (named integer) indent modifiers labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_timepoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Survival Time Point Analysis ‚Äî survival_timepoint","text":"statistics : pt_at_risk patients remaining risk. event_free_rate event free rate (%). rate_se standard error event free rate. rate_ci confidence interval event free rate. statistics : rate_diff event free rate difference two groups. rate_diff_ci confidence interval difference. ztest_pval p-value test difference 0.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_timepoint.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Survival Time Point Analysis ‚Äî survival_timepoint","text":"s_surv_timepoint(): Statistics Function analyzes survival rate. a_surv_timepoint(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). s_surv_timepoint_diff(): Statistics Function analyzes difference two survival rates. a_surv_timepoint_diff(): Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). surv_timepoint(): Analyze Function adds survival rate analysis input layout. Note additional formatting arguments can used .","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/survival_timepoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survival Time Point Analysis ‚Äî survival_timepoint","text":"","code":"library(dplyr)  adtte_f <- tern_ex_adtte %>%   filter(PARAMCD == \"OS\") %>%   mutate(     AVAL = day2month(AVAL),     is_event = CNSR == 0   ) df <- adtte_f %>%   filter(ARMCD == \"ARM A\")  # Internal function - s_surv_timepoint if (FALSE) { s_surv_timepoint(df, .var = \"AVAL\", time_point = 7, is_event = \"is_event\") }  # Internal function - a_surv_timepoint if (FALSE) { a_surv_timepoint(df, .var = \"AVAL\", time_point = 7, is_event = \"is_event\") }  df_ref_group <- adtte_f %>%   filter(ARMCD == \"ARM B\")  # Internal function - s_surv_timepoint_diff if (FALSE) { s_surv_timepoint_diff(df, df_ref_group, .in_ref_col = TRUE, .var = \"AVAL\", is_event = \"is_event\") s_surv_timepoint_diff(   df,   df_ref_group,   .in_ref_col = FALSE,   .var = \"AVAL\",   time_point = 7,   is_event = \"is_event\" ) }  # Internal function - a_surv_timepoint_diff if (FALSE) { a_surv_timepoint_diff(   df,   df_ref_group,   .in_ref_col = FALSE,   .var = \"AVAL\",   time_point = 7,   is_event = \"is_event\" ) }  # Survival at given time points. basic_table() %>%   split_cols_by(var = \"ARMCD\", ref_group = \"ARM A\") %>%   add_colcounts() %>%   surv_timepoint(     vars = \"AVAL\",     var_labels = \"Months\",     is_event = \"is_event\",     time_point = 7   ) %>%   build_table(df = adtte_f) #>                                    ARM A            ARM B            ARM C      #>                                    (N=69)           (N=73)           (N=58)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> 7 Months                                                                        #>   Patients remaining at risk         54               57               42       #>   Event Free Rate (%)              84.89            79.43            75.50      #>   95% CI                       (76.24, 93.53)   (70.15, 88.71)   (64.33, 86.67)  # Difference in survival at given time points. basic_table() %>%   split_cols_by(var = \"ARMCD\", ref_group = \"ARM A\") %>%   add_colcounts() %>%   surv_timepoint(     vars = \"AVAL\",     var_labels = \"Months\",     is_event = \"is_event\",     time_point = 9,     method = \"surv_diff\",     .indent_mods = c(\"rate_diff\" = 0L, \"rate_diff_ci\" = 2L, \"ztest_pval\" = 2L)   ) %>%   build_table(df = adtte_f) #>                                   ARM A        ARM B            ARM C      #>                                   (N=69)       (N=73)           (N=58)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> 9 Months                                                                   #>   Difference in Event Free Rate                -9.64            -13.03     #>       95% CI                               (-22.80, 3.52)   (-27.59, 1.53) #>       p-value (Z-test)                         0.1511           0.0794      # Survival and difference in survival at given time points. basic_table() %>%   split_cols_by(var = \"ARMCD\", ref_group = \"ARM A\") %>%   add_colcounts() %>%   surv_timepoint(     vars = \"AVAL\",     var_labels = \"Months\",     is_event = \"is_event\",     time_point = 9,     method = \"both\"   ) %>%   build_table(df = adtte_f) #>                                     ARM A            ARM B            ARM C      #>                                     (N=69)           (N=73)           (N=58)     #> ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #> 9 Months                                                                         #>   Patients remaining at risk          53               53               39       #>   Event Free Rate (%)               84.89            75.25            71.86      #>   95% CI                        (76.24, 93.53)   (65.32, 85.17)   (60.14, 83.57) #> Difference in Event Free Rate                        -9.64            -13.03     #> 95% CI                                           (-22.80, 3.52)   (-27.59, 1.53) #> p-value (Z-test)                                     0.1511           0.0794"},{"path":"https://insightsengineering.github.io/tern/main/reference/tern-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tern Package ‚Äî tern-package","title":"tern Package ‚Äî tern-package","text":"Package create tables, listings graphs analyze clinical trials data.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/tern-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tern Package ‚Äî tern-package","text":"Maintainer: Joe Zhu joe.zhu@roche.com Authors: Daniel Saban√©s Bov√© daniel.sabanes_bove@roche.com Jana Stoilova jana.stoilova@roche.com Heng Wang wang.heng@gene.com Francois Collin Adrian Waddell adrian.waddell@gene.com Pawel Rucki pawel.rucki@roche.com Chendi Liao chendi.liao@roche.com Jennifer Li li.jing@gene.com contributors: F. Hoffmann-La Roche AG [copyright holder, funder]","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/tidy.glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Tidy Method for Binomial GLM Results ‚Äî tidy.glm","title":"Custom Tidy Method for Binomial GLM Results ‚Äî tidy.glm","text":"Helper method (broom::tidy()) prepare data frame glm object binomial family.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/tidy.glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Tidy Method for Binomial GLM Results ‚Äî tidy.glm","text":"","code":"# S3 method for glm tidy(fit_glm, conf_level = 0.95, at = NULL)"},{"path":"https://insightsengineering.github.io/tern/main/reference/tidy.glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Tidy Method for Binomial GLM Results ‚Äî tidy.glm","text":"fit_glm logistic regression model fitted stats::glm() \"binomial\" family. conf_level (proportion) confidence level interval. (NULL numeric) optional values interaction variable. Otherwise median used.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/tidy.glm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom Tidy Method for Binomial GLM Results ‚Äî tidy.glm","text":"","code":"library(dplyr) library(broom)  adrs_f <- tern_ex_adrs %>%   filter(PARAMCD == \"BESRSPI\") %>%   filter(RACE %in% c(\"ASIAN\", \"WHITE\", \"BLACK OR AFRICAN AMERICAN\")) %>%   mutate(     Response = case_when(AVALC %in% c(\"PR\", \"CR\") ~ 1, TRUE ~ 0),     RACE = factor(RACE),     SEX = factor(SEX)   ) formatters::var_labels(adrs_f) <- c(formatters::var_labels(tern_ex_adrs), Response = \"Response\") mod1 <- fit_logistic(   data = adrs_f,   variables = list(     response = \"Response\",     arm = \"ARMCD\",     covariates = c(\"AGE\", \"RACE\")   ) ) #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred mod2 <- fit_logistic(   data = adrs_f,   variables = list(     response = \"Response\",     arm = \"ARMCD\",     covariates = c(\"AGE\", \"RACE\"),     interaction = \"AGE\"   ) ) #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred  df <- tidy(mod1, conf_level = 0.99) df2 <- tidy(mod2, conf_level = 0.99)"},{"path":"https://insightsengineering.github.io/tern/main/reference/tidy.step.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Tidy Method for STEP Results ‚Äî tidy.step","title":"Custom Tidy Method for STEP Results ‚Äî tidy.step","text":"Tidy STEP results tibble format ready plotting.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/tidy.step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Tidy Method for STEP Results ‚Äî tidy.step","text":"","code":"# S3 method for step tidy(x, ...)"},{"path":"https://insightsengineering.github.io/tern/main/reference/tidy.step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Tidy Method for STEP Results ‚Äî tidy.step","text":"x (step matrix) results fit_survival_step(). ... used .","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/tidy.step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom Tidy Method for STEP Results ‚Äî tidy.step","text":"tibble one row per STEP subgroup. estimates CIs HR scale, respectively. Additional attributes carry meta data also used plotting.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/tidy.step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom Tidy Method for STEP Results ‚Äî tidy.step","text":"","code":"library(survival) lung$sex <- factor(lung$sex) vars <- list(   time = \"time\",   event = \"status\",   arm = \"sex\",   biomarker = \"age\" ) step_matrix <- fit_survival_step(   variables = vars,   data = lung,   control = c(control_coxph(), control_step(num_points = 10, degree = 2)) ) broom::tidy(step_matrix) #> # A tibble: 10 √ó 12 #>    `Percentile Center` `Percentile Lower` `Percentile Upper` `Interval Center` #>  *               <dbl>              <dbl>              <dbl>             <dbl> #>  1              0.0909             0                   0.341              50   #>  2              0.182              0                   0.432              54   #>  3              0.273              0.0227              0.523              57   #>  4              0.364              0.114               0.614              59.5 #>  5              0.455              0.205               0.705              62   #>  6              0.545              0.295               0.795              64   #>  7              0.636              0.386               0.886              67   #>  8              0.727              0.477               0.977              69   #>  9              0.818              0.568               1                  71   #> 10              0.909              0.659               1                  74   #> # ‚Ñπ 8 more variables: `Interval Lower` <dbl>, `Interval Upper` <dbl>, n <dbl>, #> #   events <dbl>, `Hazard Ratio` <dbl>, se <dbl>, ci_lower <dbl>, #> #   ci_upper <dbl>"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/tidy_coxreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Tidy Methods for Cox Regression ‚Äî tidy_coxreg","text":"","code":"# S3 method for summary.coxph tidy(x, ...)  # S3 method for coxreg.univar tidy(x, ...)  # S3 method for coxreg.multivar tidy(x, ...)"},{"path":"https://insightsengineering.github.io/tern/main/reference/tidy_coxreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Tidy Methods for Cox Regression ‚Äî tidy_coxreg","text":"x (list) Result Cox regression model fitted fit_coxreg_multivar(). ... additional arguments lower level functions.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/tidy_coxreg.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Custom Tidy Methods for Cox Regression ‚Äî tidy_coxreg","text":"tidy(summary.coxph): Custom tidy method survival::coxph() summary results. Tidy survival::coxph() results data.frame extract model results. tidy(coxreg.univar): Custom tidy method Univariate Cox Regression Tidy result Cox regression model fitted fit_coxreg_univar(). tidy(coxreg.multivar): Custom tidy method Multi-variable Cox Regression Tidy result Cox regression model fitted fit_coxreg_multivar().","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/tidy_coxreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom Tidy Methods for Cox Regression ‚Äî tidy_coxreg","text":"","code":"library(survival) library(broom)  set.seed(1, kind = \"Mersenne-Twister\")  dta_bladder <- with(   data = bladder[bladder$enum < 5, ],   data.frame(     time = stop,     status = event,     armcd = as.factor(rx),     covar1 = as.factor(enum),     covar2 = factor(       sample(as.factor(enum)),       levels = 1:4, labels = c(\"F\", \"F\", \"M\", \"M\")     )   ) ) labels <- c(\"armcd\" = \"ARM\", \"covar1\" = \"A Covariate Label\", \"covar2\" = \"Sex (F/M)\") formatters::var_labels(dta_bladder)[names(labels)] <- labels dta_bladder$age <- sample(20:60, size = nrow(dta_bladder), replace = TRUE)  formula <- \"survival::Surv(time, status) ~ armcd + covar1\" msum <- summary(coxph(stats::as.formula(formula), data = dta_bladder)) tidy(msum) #>       Pr(>|z|) exp(coef) exp(-coef)  lower .95 upper .95   level   n #> 1 1.287954e-02 0.6110123   1.636628 0.41442417 0.9008549  armcd2 340 #> 2 6.407916e-04 0.4460731   2.241785 0.28061816 0.7090818 covar12 340 #> 3 5.272933e-06 0.3075864   3.251119 0.18517346 0.5109230 covar13 340 #> 4 2.125359e-08 0.1808795   5.528541 0.09943722 0.3290258 covar14 340 ## Cox regression: arm + 1 covariate. mod1 <- fit_coxreg_univar(   variables = list(     time = \"time\", event = \"status\", arm = \"armcd\",     covariates = \"covar1\"   ),   data = dta_bladder,   control = control_coxreg(conf_level = 0.91) )  ## Cox regression: arm + 1 covariate + interaction, 2 candidate covariates. mod2 <- fit_coxreg_univar(   variables = list(     time = \"time\", event = \"status\", arm = \"armcd\",     covariates = c(\"covar1\", \"covar2\")   ),   data = dta_bladder,   control = control_coxreg(conf_level = 0.91, interaction = TRUE) )  tidy(mod1) #>            effect   term        term_label level   n        hr       lcl #> ref    Treatment:  armcd  2 vs control (1)     2 340 0.6386426 0.4557586 #> covar1 Covariate: covar1 A Covariate Label     2 340  0.607037 0.4324571 #>              ucl       pval                   ci #> ref    0.8949131 0.02423805 0.4557586, 0.8949131 #> covar1 0.8520935 0.01257339 0.4324571, 0.8520935 tidy(mod2) #>                           effect   term        term_label level   n        hr #> ref                   Treatment:  armcd  2 vs control (1)     2 340 0.6386426 #> covar1.1              Covariate: covar1 A Covariate Label       340           #> covar1.armcd2/covar11 Covariate: covar1                 1     1     0.6284569 #> covar1.armcd2/covar12 Covariate: covar1                 2     2     0.5806499 #> covar1.armcd2/covar13 Covariate: covar1                 3     3     0.5486103 #> covar1.armcd2/covar14 Covariate: covar1                 4     4     0.6910725 #> covar2.1              Covariate: covar2         Sex (F/M)       340           #> covar2.armcd2/covar2F Covariate: covar2                 F     F     0.6678243 #> covar2.armcd2/covar2M Covariate: covar2                 M     M     0.5954021 #>                             lcl       ucl       pval pval_inter #> ref                   0.4557586 0.8949131 0.02423805            #> covar1.1                     NA        NA             0.9883021 #> covar1.armcd2/covar11 0.3450471 1.1446499                       #> covar1.armcd2/covar12 0.2684726 1.2558239                       #> covar1.armcd2/covar13 0.2226814 1.3515868                       #> covar1.armcd2/covar14 0.2308006 2.0692373                       #> covar2.1                     NA        NA             0.7759013 #> covar2.armcd2/covar2F 0.3649842 1.2219413                       #> covar2.armcd2/covar2M 0.3572772 0.9922368                       #>                                         ci #> ref                   0.4557586, 0.8949131 #> covar1.1                                   #> covar1.armcd2/covar11 0.3450471, 1.1446499 #> covar1.armcd2/covar12 0.2684726, 1.2558239 #> covar1.armcd2/covar13 0.2226814, 1.3515868 #> covar1.armcd2/covar14 0.2308006, 2.0692373 #> covar2.1                                   #> covar2.armcd2/covar2F 0.3649842, 1.2219413 #> covar2.armcd2/covar2M 0.3572772, 0.9922368 multivar_model <- fit_coxreg_multivar(   variables = list(     time = \"time\", event = \"status\", arm = \"armcd\",     covariates = c(\"covar1\", \"covar2\")   ),   data = dta_bladder ) broom::tidy(multivar_model) #>                       term         pval                        term_label #> armcd.1              armcd                            ARM (reference = 1) #> armcd.2                ARM   0.01232761                                 2 #> covar1.1            covar1 7.209956e-09 A Covariate Label (reference = 1) #> covar1.2 A Covariate Label  0.001120332                                 2 #> covar1.3 A Covariate Label 6.293725e-06                                 3 #> covar1.4 A Covariate Label 3.013875e-08                                 4 #> covar2.1            covar2                      Sex (F/M) (reference = F) #> covar2.2         Sex (F/M)    0.1910521                                 M #>                 hr        lcl       ucl level                     ci #> armcd.1                    NA        NA  <NA>                        #> armcd.2  0.6062777 0.40970194 0.8971710     2   0.4097019, 0.8971710 #> covar1.1                   NA        NA  <NA>                        #> covar1.2 0.4564763 0.28481052 0.7316115     2   0.2848105, 0.7316115 #> covar1.3 0.3069612 0.18386073 0.5124813     3   0.1838607, 0.5124813 #> covar1.4 0.1817017 0.09939435 0.3321668     4 0.09939435, 0.33216684 #> covar2.1                   NA        NA  <NA>                        #> covar2.2  1.289373 0.88087820 1.8873019     M   0.8808782, 1.8873019"},{"path":"https://insightsengineering.github.io/tern/main/reference/to_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Replicate Entries of a Vector if Required ‚Äî to_n","title":"Replicate Entries of a Vector if Required ‚Äî to_n","text":"Replicate entries vector required. Note fail x length n scalar.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/to_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replicate Entries of a Vector if Required ‚Äî to_n","text":"","code":"to_n(x, n)"},{"path":"https://insightsengineering.github.io/tern/main/reference/to_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replicate Entries of a Vector if Required ‚Äî to_n","text":"x (numeric) vector numbers want analyze. n (count) many entries need.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/to_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replicate Entries of a Vector if Required ‚Äî to_n","text":"Just input x required length already NULL, otherwise scalar replicated version n entries.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/to_string_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Table into Matrix of Strings ‚Äî to_string_matrix","title":"Convert Table into Matrix of Strings ‚Äî to_string_matrix","text":"Helper function use mostly within tests. with_spacesparameter allows test content also indentation table structure. print_txt_to_copy instead facilitate testing development returning well formatted text needs copied pasted expected output.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/to_string_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Table into Matrix of Strings ‚Äî to_string_matrix","text":"","code":"to_string_matrix(x, with_spaces = FALSE, print_txt_to_copy = FALSE)"},{"path":"https://insightsengineering.github.io/tern/main/reference/to_string_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Table into Matrix of Strings ‚Äî to_string_matrix","text":"x rtables table. with_spaces tested table keep indentation relevant spaces? print_txt_to_copy Utility way copy input table directly expected variable instead copying manually.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/to_string_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Table into Matrix of Strings ‚Äî to_string_matrix","text":"matrix strings","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/try_car_anova.html","id":null,"dir":"Reference","previous_headings":"","what":"tryCatch around car::Anova ‚Äî try_car_anova","title":"tryCatch around car::Anova ‚Äî try_car_anova","text":"Captures warnings executing car::Anova.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/try_car_anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tryCatch around car::Anova ‚Äî try_car_anova","text":"","code":"try_car_anova(mod, test.statistic)"},{"path":"https://insightsengineering.github.io/tern/main/reference/try_car_anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tryCatch around car::Anova ‚Äî try_car_anova","text":"mod lm, aov, glm, multinom, polr     mlm, coxph, coxme, lme, mer, merMod, svyglm, svycoxph,     rlm, suitable model object. test.statistic generalized linear model, whether calculate     \"LR\" (likelihood-ratio), \"Wald\", \"F\" tests; Cox     Cox mixed-effects model, whether calculate \"LR\" (partial-likelihood ratio)     \"Wald\" tests; default case linear mixed models fit     lmer, whether calculate Wald \"Chisq\" Kenward-Roger     \"F\" tests Satterthwaite degrees freedom (warning: KR F-tests     can time-consuming).     multivariate linear model, multivariate test statistic compute --- one     \"Pillai\", \"Wilks\", \"Hotelling-Lawley\", \"Roy\",     \"Pillai\" default. summary method Anova.mlm     objects permits specification one multivariate     test statistic, default report four.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/try_car_anova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tryCatch around car::Anova ‚Äî try_car_anova","text":"list item aov result model error_text captured warnings.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/try_car_anova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tryCatch around car::Anova ‚Äî try_car_anova","text":"","code":"# `car::Anova` on cox regression model including strata and expected # a likelihood ratio test triggers a warning as only Wald method is # accepted.  library(survival)  mod <- coxph(   formula = Surv(time = futime, event = fustat) ~ factor(rx) + strata(ecog.ps),   data = ovarian )  # Internal function - try_car_anova if (FALSE) { with_wald <- try_car_anova(mod = mod, test.statistic = \"Wald\") with_lr <- try_car_anova(mod = mod, test.statistic = \"LR\") }"},{"path":"https://insightsengineering.github.io/tern/main/reference/univariate.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate Formula Special Term ‚Äî univariate","title":"Univariate Formula Special Term ‚Äî univariate","text":"special term univariate indicate model fitted individually every variable included univariate.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/univariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate Formula Special Term ‚Äî univariate","text":"","code":"univariate(x)"},{"path":"https://insightsengineering.github.io/tern/main/reference/univariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate Formula Special Term ‚Äî univariate","text":"x vector variable name separated comas.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/univariate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Univariate Formula Special Term ‚Äî univariate","text":"provided alongside pairwise specification, model y ~ ARM + univariate(SEX, AGE, RACE) lead study comparison models y ~ ARM y ~ ARM + SEX y ~ ARM + AGE y ~ ARM + RACE","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/unlist_and_blank_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Blank for Missing Input ‚Äî unlist_and_blank_na","title":"Blank for Missing Input ‚Äî unlist_and_blank_na","text":"Helper function use tabulating model results.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/unlist_and_blank_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blank for Missing Input ‚Äî unlist_and_blank_na","text":"","code":"unlist_and_blank_na(x)"},{"path":"https://insightsengineering.github.io/tern/main/reference/unlist_and_blank_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blank for Missing Input ‚Äî unlist_and_blank_na","text":"x (vector) input cell.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/unlist_and_blank_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blank for Missing Input ‚Äî unlist_and_blank_na","text":"Either empty character vector entries x missing (NA), otherwise unlisted version x","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/update_weights_strat_wilson.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function for the Estimation of Weights for prop_strat_wilson ‚Äî update_weights_strat_wilson","title":"Helper Function for the Estimation of Weights for prop_strat_wilson ‚Äî update_weights_strat_wilson","text":"function wraps iteration procedure allows estimate weights proportional strata. assumes minimize weighted squared length confidence interval.","code":""},{"path":"https://insightsengineering.github.io/tern/main/reference/update_weights_strat_wilson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function for the Estimation of Weights for prop_strat_wilson ‚Äî update_weights_strat_wilson","text":"","code":"update_weights_strat_wilson(   vars,   strata_qnorm,   initial_weights,   n_per_strata,   max_iterations = 50,   conf_level = 0.95,   tol = 0.001 )"},{"path":"https://insightsengineering.github.io/tern/main/reference/update_weights_strat_wilson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function for the Estimation of Weights for prop_strat_wilson ‚Äî update_weights_strat_wilson","text":"vars (numeric) normalized proportions strata. strata_qnorm (numeric) initial estimation identical weights quantiles. initial_weights (numeric) initial weights used calculate strata_qnorm. can optimized future need estimate better initial weights. n_per_strata (numeric) number elements strata. max_iterations (count) maximum number iterations tried. Convergence always checked. conf_level (proportion) confidence level interval. tol (number) tolerance threshold convergence.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/reference/update_weights_strat_wilson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function for the Estimation of Weights for prop_strat_wilson ‚Äî update_weights_strat_wilson","text":"","code":"vs <- c(0.011, 0.013, 0.012, 0.014, 0.017, 0.018) sq <- 0.674 ws <- rep(1 / length(vs), length(vs)) ns <- c(22, 18, 17, 17, 14, 12)  update_weights_strat_wilson(vs, sq, ws, ns, 100, 0.95, 0.001) #> $n_it #> [1] 3 #>  #> $weights #> [1] 0.2067191 0.1757727 0.1896962 0.1636346 0.1357615 0.1284160 #>  #> $diff_v #> [1] 1.458717e-01 1.497223e-03 1.442189e-06 #>"},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"breaking-changes-0-8-1-9011","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"tern 0.8.1.9011","text":"Refactored s_coxreg summarize_coxreg. Added new analysis function a_coxreg.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"bug-fixes-0-8-1-9011","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"tern 0.8.1.9011","text":"Fixed missing label TRTEDTM tern datasets.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"enhancements-0-8-1-9011","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"tern 0.8.1.9011","text":"Added section_div na_level (na_str) summarize_vars. Added median_range numeric variable statistic option summarize_vars.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"miscellaneous-0-8-1-9011","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"tern 0.8.1.9011","text":"Implemented lubridate package date variables tern datasets. Organization .gitignore .Rbuildignore. Removed deprecated footnotes functions related files.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"enhancements-0-8-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"tern 0.8.0","text":"Added summarize_glm_count function analyze count data using linear model. Added legend g_step. Added formatting functions format_fraction_fixed_dp format_count_fraction_fixed_dp fixed single decimal place percentages. Added na_level labelstr arguments summarize_vars_in_cols. Added analyze_num_patients include summary beginning repeat paginating. Added h_row_first_values function general helper function retrieve first values specific rows. Added option remove \"(n)\" suffix unique_count labels s_num_patients. Added options g_km annotate statistics (annot_stats) add corresponding vertical lines (annot_stats_lines).","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"tern 0.8.0","text":"Fixed bug causing incorrect ordering numeric grade levels missing grades present s_count_occurrences_by_grade. Refactored summarize_vars_in_cols work pagination machinery. Fixed bug allow passing conf_level argument emmeans::contrast() s_ancova. Fixed bugs rtables_access.R caused checking specific combinations (also standard values never used) column indices names. Fixed single applicable record bug count_abnormal_by_grade. Fixed bug add_rowcounts caused row count row values count zero. Fixed bug h_col_indices causing error pruning combination columns. Fixed bug test_proportion_diff missing argument var_labels.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"documentation-and-tests-0-8-0","dir":"Changelog","previous_headings":"","what":"Documentation and Tests","title":"tern 0.8.0","text":"Added tests increase code coverage. Created separate documentation files functions different sections pkgdown reference. Created separate .R files logistic regression cox regression helper functions. Fixed table tests using analyze_num_patients generate initial summary repetition paginating. Updated tests use testthat 3rd edition replaced applicable tests snapshot testing. Updated summarize_ancova examples use iris dataset instead scda data. Created vignette saves cached synthetic CDISC dataset files data/ folder generated cached synthetic datasets. Updated examples/tests use datasets data/ folder instead scda datasets. Removed template tests tern. tests internal repo scda.test.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"miscellaneous-0-8-0","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"tern 0.8.0","text":"Renamed summarize_vars_in_cols analyze_vars_in_cols reflect appropriate analyze logic. Removed redundant summary_in_cols helper functions. Exported function format_xx. Replaced deprecated ggplot2 functions/arguments fix warnings. Replaced deprecated function forcats::fct_explicit_na forcats::fct_na_value_to_level. Removed deprecated wrap_text function related files. Started deprecation cycle footnotes functions.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"new-features-0-7-10","dir":"Changelog","previous_headings":"","what":"New Features","title":"tern 0.7.10","text":"Added stratified Newcombe stratified Wilson statistics estimate_proportion estimate_proportion_diff relative tests. Added stat_mean_pval, new summary statistic calculate p-value mean. Added statistic mean_se (mean standard error) summarize_variables related functions. Introduced Rdpack references.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"enhancements-0-7-10","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"tern 0.7.10","text":"Redesign data handling tests removing repetitive data loads library calls. Added DescTools::BinomDiffCI function within tern. Added new parameter summarize_logistic specify pivoted value use analysis. Updated s_coxph_pairwise generate log-rank p-value using original log-rank test instead Cox Proportional-Hazards Model. Implemented nestcolor examples adapting g_km, g_ipp, g_waterfall, g_step, g_lineplot, g_forest. Added parameters interaction_y interaction_item ANCOVA make interaction calculations available. Added new parameter footnotes add footnotes g_km.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"migration-from-assertthat-to-checkmate-0-7-10","dir":"Changelog","previous_headings":"","what":"Migration from assertthat to checkmate","title":"tern 0.7.10","text":"Implemented checkmate::assert_vector, checkmate::assert_set_equal, checkmate::assert_int check vector type, length, values. Replaced standard assertions checkmate following functions: all_elements_in_ref, is_df_with_nlevels_factor, is_df_with_no_na_level, is_proportion_vector, is_quantiles_vector, is_character_or_factor, is_nonnegative_count, is_valid_character, assert_character_or_factor, assert_equal_length has_tabletree_colnames. Modified is_proportion, is_equal_length, is_df_with_no_na_level, is_df_with_nlevels_factor, is_variables, is_df_with_variables, is_df_with_factors, is_valid_factor use assertion logic. Added verbose warnings as_factor_keep_attributes. Made assert_df_with_factors assert_proportion_value internal functions. Renamed assertthat.R test-assertthat.R utils_checkmate.R test-utils_checkmate.R.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"documentation-and-namespace-polishing-0-7-10","dir":"Changelog","previous_headings":"","what":"Documentation and NAMESPACE Polishing","title":"tern 0.7.10","text":"count_abnormal_by_marked (reference abnormal_by_marked), count_abnormal_lab_worsen_by_baseline h_adlb_worsen (reference abnormal_by_worst_grade_worsen_from_baseline), count_abnormal_by_worst_grade (reference abnormal_by_worst_grade), to_string_matrix, tidy.summary.coxph, tidy.step, surv_timepoint, (reference survival_timepoint), surv_time (reference survival_time), coxph_pairwise (reference survival_coxph_pairwise), extract_survival_subgroups tabulate_survival_subgroups (reference survival_duration_subgroups), extract_survival_biomarkers tabulate_survival_biomarkers (reference survival_biomarkers_subgroups), control_summarize_vars, s_summary a_summary (reference summarize_variables) kept S3 method tree. summarize_patients_exposure_in_cols, summarize_num_patients s_num_patients, s_num_patients_content, summarize_num_patients. count_cumulative, count_missed_doses, count_patients_events_in_cols, summarize_colvars, summarize_change, summarize_ancova,.rtable, color_palette, add_footnotes. (statistical function controls) control_coxreg, control_coxph, control_incidence_rate, control_lineplot_vars, control_surv_time, control_surv_timepoint, control_logisitic, control_step. stat_mean_ci, stat_median_ci, split_cols_by_groups, explicit_na, sas_na, extract_rsp_subgroups, tabulate_rsp_subgroups, extract_rsp_biomarkers, tabulate_rsp_biomarkers, keep_rows, keep_content_rows, has_count_in_any_col, has_fraction_in_cols, has_fraction_in_any_col, has_fractions_difference, test_proportion_diff, pairwise, logistic_regression, estimate_incidence_rate, control_incidence_rate (reference incidence_rate), cut_quantile_bins, estimate_multinomial_rsp, decorate_grob_set, extreme_format, fit_rsp_step, fit_survival_step, footnotes, footnotes-set, format_count_fraction, format_fraction_threshold, formatting_functions, format_fraction, combination_function (S4 method), compare_variables (S3 method), kaplan_meier. (chain functions, reference abnormal_by_marked) s_count_abnormal_by_marked, a_count_abnormal_by_marked. (chain functions, reference abnormal_by_worst_grade_worsen_from_baseline) a_count_abnormal_lab_worsen_by_baseline, s_count_abnormal_lab_worsen_by_baseline. (chain functions, reference abnormal_by_worst_grade) s_count_abnormal_by_worst_grade, a_count_abnormal_by_worst_grade. (chain functions, reference survival_timepoint) s_surv_timepoint, s_surv_timepoint_diff, a_surv_timepoint, a_surv_timepoint_diff. (chain functions, reference survival_time) s_surv_time, a_surv_time. (chain functions, reference survival_coxph_pairwise) s_coxph_pairwise, a_coxph_pairwise. (chain functions, reference survival_duration_subgroups) a_survival_subgroups. (chain functions, reference count_cumulative) s_count_cumulative, a_count_cumulative. (chain functions, reference count_missed_doses) s_count_nonmissing, s_count_missed_doses, a_count_missed_doses. (chain functions, reference count_patients_events_in_cols) s_count_patients_and_multiple_events, summarize_patients_events_in_cols. (chain functions, reference incidence_rate) s_incidence_rate, a_incidence_rate. (cox regression helper) cox_regression_inter, decorate_grob_factory, draw_grob, estimate_coef. summary_labels, summary_formats, s_count_patients_sum_exposure, a_change_from_baseline s_change_from_baseline, a_ancova, s_ancova, arrange_grobs, as_factor_keep_attributes, combine_levels, split_text_grob, groups_list_to_df, s_cox_multivariate, is_leaf_table, a_response_subgroups, range_noinf, has_count_in_cols, has_counts_difference, prop_chisq, prop_cmh, prop_schouten, prop_fisher, s_test_proportion_diff, a_test_proportion_diff, fct_discard, fct_explicit_na_if.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"bug-fixes-0-7-10","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"tern 0.7.10","text":"Fixed retrieval method stats::ancova output due version inconsistency. Fixed tests respect new standard print NA coming rtables. Fixed error tests coming changes formatters::var_labels. Fixed prop_diff functions respect success responses (TRUE values). Fixed error coming comparing factors vector characters vector. Fixed empty vector exception cut_quantile_bins. Fixed exception error empty strings present pivoted columns (rtables split functions) Fixed bug s_ancova causing error first level arm factor control arm. Fixed bug s_abnormal_by_worst_grade one PARAM level. Fixed bug prop_diff_wald selecting responders, updated tests accordingly. Fixed bug h_ancova caused error deselecting covariates.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"miscellaneous-0-7-10","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"tern 0.7.10","text":"Added deprecated badge g_mmrm. Removed internal function calls examples (tern:::) added dontrun internal function examples. Removed warnings messages console occurring examples tests. Deprecated functions color_palette h_set_nest_theme favor nestcolor::color_palette nestcolor::theme_nest, respectively. Removed deprecated functions: color_palette, color_palette_core, h_set_nest_theme, s_cox_univariate. Removed deprecated mmrm functions: fit_mmrm, g_mmrm_diagnostic, g_mmrm_lsmeans, .rtable.mmrm, h_mmrm_fixed, h_mmrm_cov, h_mmrm_diagnostic, tidy.mmrm, s_mmrm_lsmeans, s_mmrm_lsmeans_single, summarize_lsmeans. Renamed functions arm study_arm extract extract_by_name. Renamed rtables.R utils_rtables.R. Extracted cox_regression_inter separate file cox_regression. Renamed estimate_incidence_rate.R incidence_rate.R match documentation grouping name. Extracted control_incidence_rate separate file produces separate documentation file. Added @md removed @order incidence_rate.R. Modified examples accordingly. Removed hyperlink prop_schouten function documentation. Exported draw_grob function.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"fix-0-7-8","dir":"Changelog","previous_headings":"","what":"Fix","title":"tern 0.7.8","text":"h_split_by_subgroups documentation warning fix wrong placing example block","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"documentation-and-namespace-polishing-0-7-8","dir":"Changelog","previous_headings":"","what":"Documentation and NAMESPACE polishing","title":"tern 0.7.8","text":"Adopting standard badges @description instead every @descriptionIn function. Corrected accordingly summarize_variables_in_cols Added stable badge g_lineplot, g_step, g_waterfall, cox_regression, score_occurrences, add_rowcounts, odds_ratio, count_occurrences, count_occurrences_by_grade, explicit_na, df_explicit_na, count_patients_with_event, decorate_grob, combine_groups, append_varlabels, univariate, stack_grobs, count_abnormal (reference abnormal), count_abnormal_by_baseline (reference abnormal_by_baseline). (helper functions) h_format_row, h_map_for_count_abnormal (utils functions) make_names, month2day, day2month empty_vector_if_na, aesi_label, n_available, format_xx, arm. count_values_funs, prop_difference, combine_counts. (chain functions) s_count_abnormal, a_count_abnormal. (chain functions) s_count_abnormal_by_baseline, a_count_abnormal_by_baseline, d_count_abnormal_by_baseline. Deprecated s_cox_univariate function now deprecated badge.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"enhancements-0-7-8","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"tern 0.7.8","text":"Enhanced g_lineplot table automatically scale table height return ggplot object. Enhanced g_ipp caption argument adjust position. Enhanced prop_diff, tern function related functions able apply continuity correction Newcombe method. Enhanced summarize_numeric_in_columns summarize_variables allow factor/character summary able summarize number BLQs AVALC ADPC dataset. Updated order summarize variables stats manual order consistency. Added sum option summarize_variables. Use consistent color palette plotting (stream default). Enhanced h_pkparam_sort function argument key_var allow data different column names.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"miscellaneous-0-7-8","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"tern 0.7.8","text":"Updated test-table_aet02.R variant 12. Changed scda data version ‚Äò2022-02-28‚Äô. Added template pkgdown site. Removed package dependencies grDevices, stringr, viridisLite. Renaming summarize_numeric_in_columns summarize_variables_in_columns. Renaming summarize_vars_numeric_in_cols summarize_vars_in_cols. Fixed bug points g_lineplot plot connected missing values. Updated package authors.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"breaking-changes-0-7-7","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tern 0.7.7","text":"Move MMRM separate package tern.mmrm.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"new-features-0-7-7","dir":"Changelog","previous_headings":"","what":"New features","title":"tern 0.7.7","text":"Added h_pkparam_sort order PK PARAM value based order dataset generated d_pkparam(). Added d_pkparam generate PK parameter map sorting.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"enhancements-0-7-7","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"tern 0.7.7","text":"Changed nudge_y argument h_g_ipp dependent data, fixing issue whereby baseline labels offset incorrectly. Enhanced stat_mean_ci s_summary.numeric calculate geometric mean confidence intervals.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"miscellaneous-0-7-7","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"tern 0.7.7","text":"Updated dependencies internal adjustments rtables package refactor. Removed with_label, var_labels, var_labels<- resolve conflict formatters package, new dependency. Added new ‚ÄúIntroduction tern‚Äù ‚Äútern tabulation‚Äù vignettes.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"new-features-0-7-6","dir":"Changelog","previous_headings":"","what":"New features","title":"tern 0.7.6","text":"Added h_map_for_count_abnormal create map used trim_levels_to_map split function calling helper function. supports two methods: one observed mapping, one least low limit zero least one non missing high limit. Added s_summary_numeric_in_cols summarize_vars_numeric_in_cols functions generate summary statistics columns, mainly used PK datasets. Added five statistics s_summary.numeric use s_summary_numeric_in_cols.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"enhancements-0-7-6","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"tern 0.7.6","text":"Enhanced functions tabulate_survival_subgroups tabulate_rsp_subgroups (Survival Duration Best Response analyses) calculate N-s based records considered create model. Enhanced function estimate_proportion related functions able apply continuity correction Wilson method. Refactored count_abnormal_by_marked related statistics formatting functions use efficient layout .spl_context argument used determining denominators trim_levels_to_map split function split_rows_by show desired levels table. breaking change. Refactored count_abnormal_by_worst_grade related statistics formatting functions use efficient layout .spl_context argument used determining denominators trim_levels_to_map split function split_rows_by show desired levels table. breaking change. Refactored count_abnormal function related statistics formatting functions use efficient layout trim_levels_to_map split function split_rows_by show desired levels table. Also updated abnormal argument able consider one level direction. breaking change. Enhanced function estimate_incidence_rate related functions consider week time unit data input.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"bug-fixes-0-7-6","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tern 0.7.6","text":"Fixed bug assertthat functions output wrong data frame names limited length failure message outputs.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"miscellaneous-0-7-6","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"tern 0.7.6","text":"Removed dependency utils.nest using checkmate purrr packages validation moved get_free_cores skip_if_too_deep functions utils.nest tern.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"new-features-0-7-5","dir":"Changelog","previous_headings":"","what":"New features","title":"tern 0.7.5","text":"Added functions estimate continuous biomarker effects across subgroups survival binary response endpoints, used produce corresponding forest plots, see survival_biomarkers_subgroups response_biomarkers_subgroups. Added g_lineplot plot function, including new h_format_row helper function control_lineplot_vars function. Removed g_summary_by. Added new safety helper function h_stack_by_baskets stack events SMQ /CQ basket flag ADAE data set.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"enhancements-0-7-5","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"tern 0.7.5","text":"Added couple new statistics s_summary.numeric. Added names attribute element final list returned s_summary.numeric function. Added summary_formats summary_labels helper functions. Added option also convert logical variables factor variables df_explicit_na. Refactored h_append_grade_groups improve flexibility, robustness clearness, make sure result ordering according order grade_groups. Also, added remove_single argument controls whether elements one-element grade groups output removed. Added var_labels show_labels arguments count_occurrences count_patients_with_flags allow creation title row. Added na_level argument count_abnormal_by_baseline. Updated h_append_grade_groups longer fill-empty grade groups zeros.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"bug-fixes-0-7-5","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"tern 0.7.5","text":"Fixed prop_diff_cmh handle edge case FALSE (TRUE) responses. Enhanced g_mmrm_diagnostic improve error handling data amenable Locally Weighted Scatterplot Smoothing. Plot can now display combination annotation tables number patients risk, median survival time, CoxPH summary. Function return warning instead error arm variable includes single level annot_coxph = TRUE. Lines plot now start time 0 probability 1. Category labels can include equals sign.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"miscellaneous-0-7-5","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"tern 0.7.5","text":"Fixed day2month month2day work NA data. Added parameters stat_mean_ci stat_median_ci may return different outputs. Added functionality h_row_counts handle analysis rows NULL cells. Updated LICENCE README new package references. Added error_on_lint: TRUE .lintr.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"new-features-0-7-4","dir":"Changelog","previous_headings":"","what":"New features","title":"tern 0.7.4","text":"count_abnormal_by_marked tabulates marked laboratory abnormalities. summarize_patients_exposure_in_cols tabulates patient counts sum exposure across patients.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"enhancements-0-7-4","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"tern 0.7.4","text":"Enhanced mmrm related functions fitting models without arm variable. Updated cox_regression work without covariates. Also case interaction model summary, p-values main effect coefficients longer displayed. Descriptive statistics returned summarize_vars now include quantiles. summarize_vars now accepts control function control_summarize_vars specify details confidence level mean median quantile details. control argument replaces conf_level. Added var_labels show_labels arguments count_occurrences_by_grade. Changed indent argument append_varlabels accept non-negative integer represent indent space defined user. Previous calls Boolean indent integer conversion produce warning.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"bug-fixes-0-7-4","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"tern 0.7.4","text":"Corrected tabulate_survival_subgroups related survival forest plot functions use total number events, instead observations, default scaling symbol sizes plot. (user might still use total number observations manually wish .) Helper function h_adsl_adlb_merge_using_worst_flag now impute BTOXGR missing visits.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"miscellaneous-0-7-4","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"tern 0.7.4","text":"Deleted count_abnormal_by_worst_grade_by_baseline related statistic analysis functions simpler design create lab abnormality tables. Switched data examples use scda instead random.cdisc.data package.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"new-features-0-7-3","dir":"Changelog","previous_headings":"","what":"New Features","title":"tern 0.7.3","text":"Added Subgroup Treatment Effect Pattern (STEP) model fitting functions fit_rsp_step fit_survival_step, corresponding tidy method tidy.step well graph function g_step. Added new layout function compare_vars compares variables different types columns produces p-value comparison reference column. Function built top summarize_vars functionality. cut_quantile_bins cuts numeric vector quantile bins. fct_collapse_only collapses levels factor keeps order provided. fct_explicit_na_if inserts explicit missings factor based condition. range_noinf kind wrapper function base::range. returns c(NA, NA) instead c(-Inf, Inf) zero-length data.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"enhancements-0-7-3","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"tern 0.7.3","text":"Cox regression via fit_coxreg_univar fit_coxreg_multivar now also possible without treatment arm. univariate case means fits separate univariate models provided covariates tabulation corresponding effect estimates can later occur. Added fraction result returned s_count_occurrences. contains list numerators denominators one element per occurrence. Updated sum_num_patients count_occurrences result unique count_fraction return (0, 0) input empty. Added new argument groups_lists extract_survival_subgroups, extract_rsp_subgroups associated helper functions allows group factor levels subgroup variables manually defined groups, enhancing flexibility resulting forest graphs. Forest graph function g_forest now extracts default arguments attributes input table produced tabulate_rsp_subgroups tabulate_survival_subgroups user manually anymore. Remove arm variable name arm labels plot legend annotation tables. Show symbol used mark censored cases match order arm variable factor levels legend. Display hazard ratio confidence interval two decimal places. Updated default position hazard ratio table stay left bottom corner x-axis. Use arm value strata name treatment arm variable single level. Updated s_surv_time function use newly created function range_noinf instead base::range. New argument no_fillin_visits added h_adsl_adlb_merge_using_worst_flag specify excluded visits post-baseline worst toxicity grade output. Improved h_adsl_adlb_merge_using_worst_flag include variables shared adsl adlb, along PARAM, PARAMCD, ATOXGR, BTOXGR optionally AVISIT, AVISITN by_visit = TRUE. Prior output contained USUBJID, ARMCD, PARAMCD, ATOXGR, BTOXGR.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"bug-fixes-0-7-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"tern 0.7.3","text":"Fix bug s_surv_timepoint cases zero patients risk. Modified stat_median_ci function passing empty var empty name, row names contain missing values error show.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"miscellaneous-0-7-3","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"tern 0.7.3","text":"Deprecated s_cox_univariate function, use fit_coxreg_univar function instead. Updated default formats hr hr_ci a_coxph_pairwise median s_surv_time align STREAM. Updated pre-processing code files test-table_ttet01.R test-table_dort01.R make sure analysis variable EVNT1 levels factor defined. Improved error message number levels factor variable data frame expected.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tern-072","dir":"Changelog","previous_headings":"","what":"tern 0.7.2","title":"tern 0.7.2","text":"Fixed column label internal test errors.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tern-071","dir":"Changelog","previous_headings":"","what":"tern 0.7.1","title":"tern 0.7.1","text":"New argument position_surv_med added g_km move position annotation table median survival times. Fixed bug g_km related ignored arguments pch size passed helper function h_ggkm. Updated xticks max_time arguments g_km greater functionality. max_time added argument h_xticks allow . Fixed bug prop_diff_cmh led NaN weighted proportion difference estimates missing confidence intervals. change, including patients one treatment arm least one stratum estimation lead numeric results. Fixed bug prop_cmh giving error case least one stratum containing less two observations. New argument n_events added estimate_incidence_rate. New argument denom added count_occurrences. New arguments yval ci_ribbon added g_km. Add new individual patient plot function g_ipp along helpers h_g_ipp h_set_nest_theme. Fixed bug count_patients_with_events, now shows zero counts without percentage. Fixed bug get_mmrm_lsmeans allow MMRM analysis 3000 observations. Updated stat_mean_ci stat_median_ci handle edge cases number elements input series equal 1. cases, NA_real_ now returned, instead NA +/-Inf confidence interval (CI) estimates. Rename n_lim argument stat_mean_ci n_min better reflect desired meaning.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tern-070","dir":"Changelog","previous_headings":"","what":"tern 0.7.0","title":"tern 0.7.0","text":"version tern introduces major rewriting tern due change layout based tabulation rtables. tern now build tables directly anymore, instead provides analysis functions build tables, see examples. * Counting patients abnormal values post-baseline count_abnormal. * Counting patients graded abnormal values count_abnormal_by_worst_grade. * Counting patients abnormal values baseline status count_abnormal_by_baseline. * Counting patients missed doses s_count_missed_doses count_missed_doses. * Counting patients event flags count_patients_with_event count_patients_with_flags. * Summarizing variables summarize_vars (supports numeric, factor, character logical variables). Note factors need NAs converted na_level use. * Summarizing change baseline summarize_change. * Summarizing variables columns summarize_colvars. * Estimating difference responder proportions estimate_proportion_diff. * Estimating difference Odds Ratio estimate_odds_ratio. * Testing difference responder proportions test_proportion_diff. * Estimating responder proportion level factor estimate_multinomial_response. * Fitting tabulating results Cox regressions fit_coxreg_univar, fit_coxreg_multivar summarize_coxreg, respectively. * Pruning occurrence tables (tables counts fractions) flexible rules, see ?prune_occurrences details. * Sorting occurrence tables using different options, see ?score_occurrences details. * Fitting tabulating MMRM models fit_mmrm .rtable summarize_lsmeans, see ?tabulate_mmrm details. * Counting number unique non-unique patients summarize_num_patients. * Counting occurrences count_occurrences. * Counting occurrences grade summarize_occurrences_by_grade count_occurrences_by_grade. * Counting patients events columns summarize_patients_events_in_cols. * Tabulating binary outcome response subgroup extract_rsp_subgroups tabulate_rsp_subgroups. * Tabulating survival duration subgroup extract_survival_subgroups tabulate_survival_subgroups.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tern-069","dir":"Changelog","previous_headings":"","what":"tern 0.6.9","title":"tern 0.6.9","text":"Removing used imports.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tern-068","dir":"Changelog","previous_headings":"","what":"tern 0.6.8","title":"tern 0.6.8","text":"Improved handling missing data aggregation functions: a_mean_sd, a_median, a_n_true_and_freq, a_count, a_q1q3, a_iqr, a_range. New default p-value method s_test_proportion_diff: Chi-Squared Test Schouten Correction. Add new function t_contingency contingency tables. Renamed class splitText dynamicSplitText resolve name conflict package ggpubr. Add rreplace_format tabulation post-processing. Add new tern function t_ancova create ANCOVA tables, well corresponding elementary table function t_el_ancova summary function s_ancova. Add new tern function s_odds_ratio estimate Odds Ratio response categories, well corresponding elementary table function t_el_odds_ratio. Added new CI methods (Agresti-Coull, Jeffreys) s_proportion. Added new CI methods anderson-hauck newcombe s_proportion_diff. Added new p-value methods (Fisher‚Äôs Exact, Chi-Squared Test Schouten Correction) s_test_proportion_diff. binary summary table function t_binary_outcome takes now lists (instead character vectors) specified helper function control_binary_comparison arguments strat_analysis unstrat_analysis. Odds Ratio estimates CIs now removable included default, similarly subsections arm comparison analyses. Also added argument rsp_multinomial. Add new table function t_el_multinomial_proportion. Add new table function t_abn_shift. Add new MMRM analysis function s_mmrm, well corresponding table functions t_mmrm_lsmeans, t_mmrm_cov, t_mmrm_diagnostic, t_mmrm_fixed, plot functions g_mmrm_lsmeans, g_mmrm_diagnostic. results match SAS results (numeric precision). Deprecated old MMRM functions a_mmrm t_mmrm (give deprecation warning still work) remove next release. reason results functions don‚Äôt match SAS results. Fix bug g_km related numbers patients risk table correct numbers integer time--event variable inputs.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tern-067","dir":"Changelog","previous_headings":"","what":"tern 0.6.7","title":"tern 0.6.7","text":"functions row_by argument, inputs longer require use nested_by. Add stat_mean_ci stat_median_ci error bars ggplot2. Add new tern function t_coxreg single interface diverse cox regression types. Add compound table binary endpoint: t_binary_endpoint elementary functions: t_el_proportion, t_el_proportion_diff t_el_test_proportion_diff. supporting summary functions added : s_proportion, s_adj_proportion_diff, s_proportion_diff s_test_proportion_diff. Added new tern function t_events_patyear create event table adjusted person-years. Added new tern function t_abnormality elementary table function t_el_abnormality. Removed grade_levels argument t_events_term_grade_id functions. Post-processing reordering leaves table tree creates different ordering rows required. Creating helper function occur later time. Added prune_zero_rows argument t_events_per_term_grade_id t_max_grade_per_id show rows zeros can clutter visualization Shiny app make slower. Fixed position (N=xx) t_summary_by output summarizing numeric columns parallel compare_in_header. Rename t_coxph t_coxph_pairwise reflect model process, add details documentation. Remove test.nest dependency. Keep column labels splitting data tree.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tern-066","dir":"Changelog","previous_headings":"","what":"tern 0.6.6","title":"tern 0.6.6","text":"Remove test.nest dependency.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tern-065","dir":"Changelog","previous_headings":"","what":"tern 0.6.5","title":"tern 0.6.5","text":"Change default option denominator N t_summary. Fix IQR bug: IQR Q3 minus Q1. Add new function t_logistic multi-variable logistic regression table. Add new function df_explicit_na replace NA explicit values. Added possibility t_tte specify confidence level independent survfit, coxph, ztest, see manual. Fixed bug t_rsp showing p-value, odds ratio CIs strata_data NULL. Added stratified analysis t_forest_rsp t_forest_tte, footnotes g_forest. Added footnotes, footnotes<- add_footnotes<- functions deal footnotes. Added argument conf_int confidence interval level t_el_forest_rps, t_forest_rsp, t_el_forest_tte, t_forest_tte. Added argument col_symbol_size g_forest control relative size symbols used plot. Added s_coxph_pairwise function perform pairwise testing, used t_tte t_coxph. Added methods t_count_true replacing t_summary_true. Updated t_count_unique create analysis subsets, added t_el_count_unique vectors. Fixed bug t_events_term_id table sort order decreasing frequency instead alphabetical. Added function color_palette new nest color palette.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tern-064","dir":"Changelog","previous_headings":"","what":"tern 0.6.4","title":"tern 0.6.4","text":"Refactored renaming functions utils.nest. Added event_type argument t_events_per_term_grade_id. Added one/two-arm t-test functions. Improvements t_summary_by. Internal code refactoring.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tern-063","dir":"Changelog","previous_headings":"","what":"tern 0.6.3","title":"tern 0.6.3","text":"related tree functions see reference trees. Moved label functions rtables. Deleted keys keys<- functions. Exported tabulate_pairwise. get_N, col_N_add_total, check_id. na_as_level. as_factor_keep_attributes. r_by. Disposition elementary table t_el_disposition. t_el_forest_tte, t_el_forest_rsp. Added table_tree argument returns node object. Added f_numeric choose statistics calculate. denominator now also allows omit wanting omit percentages. Renamed row_by. Changed functionality group_data using row_by_list. Removed na_omit_group. Removed indent argument, use indent function rtables. instead","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tern-062","dir":"Changelog","previous_headings":"","what":"tern 0.6.2","title":"tern 0.6.2","text":"Use cached data random.cdisc.data speed testing. Added t_summary.Date method. Added save_join.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tern-061","dir":"Changelog","previous_headings":"","what":"tern 0.6.1","title":"tern 0.6.1","text":"Fixed colors Kaplan-Meyer-Plot Changed width_row.names argument g_forest function width_row_names. Changed censor.show argument g_km function censor_show. Changed col.legend.title argument g_waterfall function col_legend_title. Changed na.rm argument t_count_unique function na_rm. Changed row.name argument t_count_unique function row_name. Changed na.omit.group argument t_forest_rsp function na_omit_group. Changed na.omit.group argument t_forest_tte function na_omit_group. Changed row.name.TRUE row.name.FALSE arguments t_summary.logical row_name_true row_name_false respectively. Rename splotTextGrob split_text_grob. Fix examples. Refactor internal functions code.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tern-060","dir":"Changelog","previous_headings":"","what":"tern 0.6.0","title":"tern 0.6.0","text":"Removed functions addTable, t_summarize_by_visit, t_summarize_variables. Added t_summary_by function. Refactor g_km function, renamed kmGrob kmCurveGrob. Refactor t_events_* family functions. Updated examples.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"new-tlgs-0-5-0-3","dir":"Changelog","previous_headings":"","what":"New TLGs","title":"tern 0.5.0.3","text":"t_summary methods data.frame, numeric, logical, character, factor, Date objects. t_events_per_term_id, t_events_per_term_grade_id: Adverse Events & Concomitant Treatment Tables. t_max_grade_per_id, t_count_unique, t_events_summary elementary tables used Adverse Events & Concomitant Treatment Tables. g_waterfall: Horizontal Waterfall Plot.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"new-helper-functions-0-5-0-3","dir":"Changelog","previous_headings":"","what":"New Helper Functions","title":"tern 0.5.0.3","text":"decorate_grob, decorate_grob_set, decorate_grob_factory, splitTextGrob. stack_grobs, arrange_grobs, draw_grob.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tlg-changes-0-5-0-3","dir":"Changelog","previous_headings":"","what":"TLG changes","title":"tern 0.5.0.3","text":"t_tte now shows two rows ranges event censored times, respectively. g_km works one arm survfit objects. forest plot functions, added formatting display extreme values ‚Äú>999.9‚Äù. t_summarise_variables uses now n instead N denominator calculating percentages factors default. t_rsp now works response values TRUE FALSE.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"deprecated-functions-0-5-0-3","dir":"Changelog","previous_headings":"","what":"Deprecated Functions","title":"tern 0.5.0.3","text":"Deprecated t_summarize_variables t_summary powerful. Replacing t_summarize_by_visit t_summary_by occur upcoming release.","code":""},{"path":"https://insightsengineering.github.io/tern/main/news/index.html","id":"tern-050","dir":"Changelog","previous_headings":"","what":"tern 0.5.0","title":"tern 0.5.0","text":"First version harmonized analysis functions names arguments.","code":""}]
