% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compare_variables.R
\name{compare_variables}
\alias{compare_variables}
\alias{s_compare}
\alias{s_compare.numeric}
\alias{s_compare.factor}
\alias{s_compare.character}
\alias{s_compare.logical}
\alias{a_compare}
\alias{a_compare.numeric}
\alias{a_compare.factor}
\alias{a_compare.character}
\alias{a_compare.logical}
\alias{compare_vars}
\title{Compare Variables Between Groups}
\usage{
s_compare(x, .ref_group, .in_ref_col, ...)

\method{s_compare}{numeric}(x, .ref_group, .in_ref_col, ...)

\method{s_compare}{factor}(
  x,
  .ref_group,
  .in_ref_col,
  denom = "n",
  na.rm = TRUE,
  na_level = "<Missing>",
  ...
)

\method{s_compare}{character}(
  x,
  .ref_group,
  .in_ref_col,
  denom = "n",
  na.rm = TRUE,
  na_level = "<Missing>",
  .var,
  verbose = TRUE,
  ...
)

\method{s_compare}{logical}(x, .ref_group, .in_ref_col, na.rm = TRUE, denom = "n", ...)

a_compare(x, .ref_group, .in_ref_col, ..., .var)

\method{a_compare}{numeric}(x, .ref_group, .in_ref_col, ...)

\method{a_compare}{factor}(
  x,
  .ref_group,
  .in_ref_col,
  denom = "n",
  na.rm = TRUE,
  na_level = "<Missing>",
  ...
)

\method{a_compare}{character}(
  x,
  .ref_group,
  .in_ref_col,
  denom = "n",
  na.rm = TRUE,
  na_level = "<Missing>",
  .var,
  verbose = TRUE,
  ...
)

\method{a_compare}{logical}(x, .ref_group, .in_ref_col, na.rm = TRUE, denom = "n", ...)

compare_vars(
  lyt,
  vars,
  var_labels = vars,
  nested = TRUE,
  ...,
  show_labels = "default",
  table_names = vars,
  .stats = c("n", "mean_sd", "count_fraction", "pval"),
  .formats = NULL,
  .labels = NULL,
  .indent_mods = NULL
)
}
\arguments{
\item{x}{(\code{numeric})\cr vector of numbers we want to analyze.}

\item{.ref_group}{(\code{data.frame} or \code{vector})\cr the data corresponding to the reference group.}

\item{.in_ref_col}{(\code{logical})\cr \code{TRUE} when working with the reference level, \code{FALSE} otherwise.}

\item{...}{arguments passed to \code{s_compare()}.}

\item{denom}{(\code{string})\cr choice of denominator for factor proportions,
can only be \code{n} (number of values in this row and column intersection).}

\item{na.rm}{(\code{flag})\cr whether \code{NA} values should be removed from \code{x} prior to analysis.}

\item{na_level}{(\code{string})\cr used to replace all \code{NA} or empty values in factors with custom \code{string}.}

\item{.var}{(\code{string})\cr single variable name that is passed by \code{rtables} when requested
by a statistics function.}

\item{verbose}{defaults to \code{TRUE}. It prints out warnings and messages. It is mainly used
to print out information about factor casting.}

\item{lyt}{(\code{layout})\cr input layout where analyses will be added to.}

\item{vars}{(\code{character})\cr variable names for the primary analysis variable to be iterated over.}

\item{var_labels}{(\code{character})\cr character for label.}

\item{nested}{(\code{flag})\cr whether this layout instruction be applied within the existing layout structure \emph{if
possible} (\code{TRUE}, the default) or as a new top-level element (\code{FALSE}). Ignored if it would nest a split
underneath analyses, which is not allowed.}

\item{show_labels}{(\code{string})\cr label visibility: one of "default", "visible" and "hidden".}

\item{table_names}{(\code{character})\cr this can be customized in case that the same \code{vars} are analyzed multiple times,
to avoid warnings from \code{rtables}.}

\item{.stats}{(\code{character})\cr statistics to select for the table.}

\item{.formats}{(named \code{character} or \code{list})\cr formats for the statistics.}

\item{.labels}{(named \code{character})\cr labels for the statistics (without indent).}

\item{.indent_mods}{(named \code{integer})\cr indent modifiers for the labels.}
}
\value{
If \code{x} is of class \code{numeric}, returns a list with named items:
\itemize{
\item all items from \code{\link[=s_summary.numeric]{s_summary.numeric()}}.
\item \code{pval}: the p-value.
}

If \code{x} is of class \code{factor} or converted from \code{character}, returns a list with named items:
\itemize{
\item all items from \code{\link[=s_summary.factor]{s_summary.factor()}}.
\item \code{pval}: the p-value.
}

If \code{x} is of class \code{logical}, returns a list with named items:
\itemize{
\item all items from \code{\link[=s_summary.logical]{s_summary.logical()}}.
\item \code{pval}: the p-value.
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

We use the new S3 generic function \code{\link[=s_compare]{s_compare()}} to implement comparisons for
different \code{x} objects. This is used as Statistics Function in combination
with the new Analyze Function \code{\link[=compare_vars]{compare_vars()}}.
}
\section{Functions}{
\itemize{
\item \code{s_compare()}: \code{s_compare} is a S3 generic function to produce
an object description and comparison versus the reference column in the form
of p-values.

\item \code{s_compare(numeric)}: Method for numeric class. This uses the standard t-test
to calculate the p-value.

\item \code{s_compare(factor)}: Method for factor class. This uses the chi-squared test
to calculate the p-value. Note that the \code{denom} for factor proportions can only be \code{n} here
since the usage is for comparing proportions between columns.
Therefore a row-based proportion would not make sense. Also proportion based on \code{N_col} would
be difficult since for the chi-squared test statistic we use the counts. Therefore
missing values should be accounted for explicitly as factor levels.

\item \code{s_compare(character)}: Method for character class. This makes an automatic
conversion to factor (with a warning) and then forwards to the method for factors.

\item \code{s_compare(logical)}: Method for logical class. A chi-squared test
is used. If missing values are not removed, then they are counted as \code{FALSE}.

\item \code{a_compare()}: S3 generic Formatted Analysis function to produce
an object description and comparison versus the reference column in the form
of p-values. It is used as \code{afun} in \code{\link[rtables:analyze]{rtables::analyze()}}.

\item \code{a_compare(numeric)}: Formatted Analysis function method for \code{numeric}.

\item \code{a_compare(factor)}: Formatted Analysis function method for \code{factor}.

\item \code{a_compare(character)}: Formatted Analysis function method for \code{character}.

\item \code{a_compare(logical)}: Formatted Analysis function method for \code{logical}.

\item \code{compare_vars()}: Analyze Function to add a comparison of variables to
\code{rtables} pipelines. The column split needs to have the reference group defined
via \code{ref_group} so that the comparison is well defined.
The ellipsis (\code{...}) conveys arguments to \code{\link[=s_compare]{s_compare()}}.
When factor variables contains \code{NA}, it is expected that \code{NA}
have been conveyed to \code{na_level} appropriately beforehand with
\code{\link[=df_explicit_na]{df_explicit_na()}}.

}}
\note{
Automatic conversion of character to factor does not guarantee that the table
can be generated correctly. In particular for sparse tables this very likely can fail.
It is therefore better to always pre-process the dataset such that factors are manually
created from character variables before passing the dataset to \code{\link[rtables:build_table]{rtables::build_table()}}.
}
\examples{
# `s_compare.numeric`

## Usual case where both this and the reference group vector have more than 1 value.
s_compare(rnorm(10, 5, 1), .ref_group = rnorm(5, -5, 1), .in_ref_col = FALSE)

## If one group has not more than 1 value, then p-value is not calculated.
s_compare(rnorm(10, 5, 1), .ref_group = 1, .in_ref_col = FALSE)

## Empty numeric does not fail, it returns NA-filled items and no p-value.
s_compare(numeric(), .ref_group = numeric(), .in_ref_col = FALSE)
# `s_compare.factor`

## Basic usage:
x <- factor(c("a", "a", "b", "c", "a"))
y <- factor(c("a", "b", "c"))
s_compare(x = x, .ref_group = y, .in_ref_col = FALSE)

## Management of NA values.
x <- explicit_na(factor(c("a", "a", "b", "c", "a", NA, NA)))
y <- explicit_na(factor(c("a", "b", "c", NA)))
s_compare(x = x, .ref_group = y, .in_ref_col = FALSE, na.rm = TRUE)
s_compare(x = x, .ref_group = y, .in_ref_col = FALSE, na.rm = FALSE)
# `s_compare.character`

## Basic usage:
x <- c("a", "a", "b", "c", "a")
y <- c("a", "b", "c")
s_compare(x, .ref_group = y, .in_ref_col = FALSE, .var = "x", verbose = FALSE)

## Note that missing values handling can make a large difference:
x <- c("a", "a", "b", "c", "a", NA)
y <- c("a", "b", "c", rep(NA, 20))
s_compare(x,
  .ref_group = y, .in_ref_col = FALSE,
  .var = "x", verbose = FALSE
)
s_compare(x,
  .ref_group = y, .in_ref_col = FALSE, .var = "x",
  na.rm = FALSE, verbose = FALSE
)

# `s_compare.logical`

## Basic usage:
x <- c(TRUE, FALSE, TRUE, TRUE)
y <- c(FALSE, FALSE, TRUE)
s_compare(x, .ref_group = y, .in_ref_col = FALSE)

## Management of NA values.
x <- c(NA, TRUE, FALSE)
y <- c(NA, NA, NA, NA, FALSE)
s_compare(x, .ref_group = y, .in_ref_col = FALSE, na.rm = TRUE)
s_compare(x, .ref_group = y, .in_ref_col = FALSE, na.rm = FALSE)
# `a_compare.numeric`
a_compare(
  rnorm(10, 5, 1),
  .ref_group = rnorm(20, -5, 1),
  .in_ref_col = FALSE,
  .var = "bla"
)
# `a_compare.factor`
# We need to ungroup `count` and `count_fraction` first so that the `rtables` formatting
# functions can be applied correctly.
afun <- make_afun(
  getS3method("a_compare", "factor"),
  .ungroup_stats = c("count", "count_fraction")
)
x <- factor(c("a", "a", "b", "c", "a"))
y <- factor(c("a", "a", "b", "c"))
afun(x, .ref_group = y, .in_ref_col = FALSE)
# `a_compare.character`
afun <- make_afun(
  getS3method("a_compare", "character"),
  .ungroup_stats = c("count", "count_fraction")
)
x <- c("A", "B", "A", "C")
y <- c("B", "A", "C")
afun(x, .ref_group = y, .in_ref_col = FALSE, .var = "x", verbose = FALSE)
# `a_compare.logical`
afun <- make_afun(
  getS3method("a_compare", "logical")
)
x <- c(TRUE, FALSE, FALSE, TRUE, TRUE)
y <- c(TRUE, FALSE)
afun(x, .ref_group = y, .in_ref_col = FALSE)
# `compare_vars()` in `rtables` pipelines

## Default output within a `rtables` pipeline.
lyt <- basic_table() \%>\%
  split_cols_by("ARMCD", ref_group = "ARM B") \%>\%
  compare_vars(c("AGE", "SEX"))
build_table(lyt, tern_ex_adsl)

## Select and format statistics output.
lyt <- basic_table() \%>\%
  split_cols_by("ARMCD", ref_group = "ARM C") \%>\%
  compare_vars(
    vars = "AGE",
    .stats = c("mean_sd", "pval"),
    .formats = c(mean_sd = "xx.x, xx.x"),
    .labels = c(mean_sd = "Mean, SD")
  )
build_table(lyt, df = tern_ex_adsl)
}
\seealso{
Relevant constructor function \code{\link[=create_afun_compare]{create_afun_compare()}}.

\code{\link[=s_summary]{s_summary()}} which is used internally for the summary part per column.
}
