% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/g_step.R
\name{g_step}
\alias{g_step}
\alias{tidy.step}
\title{Create a STEP Graph}
\usage{
g_step(
  df,
  use_percentile = "Percentile Center" \%in\% names(df),
  est = list(col = "black", lty = 1),
  ci_ribbon = list(fill = "lightblue", alpha = 0.5),
  col = getOption("tern.color")
)

\method{tidy}{step}(x, ...)
}
\arguments{
\item{df}{(\code{tibble})\cr result of \code{\link[=tidy.step]{tidy.step()}}.}

\item{use_percentile}{(\code{flag})\cr whether to use percentiles for the x axis or actual
biomarker values.}

\item{est}{(named \code{list})\cr \code{col} and \code{lty} settings for estimate line.}

\item{ci_ribbon}{(named \code{list} or \code{NULL})\cr \code{fill} and \code{alpha} settings for the confidence interval
ribbon area, or \code{NULL} to not plot a CI ribbon.}

\item{col}{(\code{character})\cr colors.}

\item{x}{(\code{step} matrix)\cr results from \code{\link[=fit_survival_step]{fit_survival_step()}}.}

\item{...}{not used here.}
}
\value{
The \code{ggplot2} object.

A \code{tibble} with one row per STEP subgroup. The estimates and CIs are on the HR or OR scale,
respectively. Additional attributes carry meta data also used for plotting.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

Based on the STEP results, creates a \code{ggplot} graph showing the estimated HR or OR
along the continuous biomarker value subgroups.
}
\section{Methods (by generic)}{
\itemize{
\item \code{tidy}: Custom Tidy Method for STEP Results

Tidy the STEP results into a \code{tibble} to format them ready for plotting.
}}

\examples{
library(survival)
lung$sex <- factor(lung$sex)

# Survival example.
vars <- list(
  time = "time",
  event = "status",
  arm = "sex",
  biomarker = "age"
)

step_matrix <- fit_survival_step(
  variables = vars,
  data = lung,
  control = c(control_coxph(), control_step(num_points = 10, degree = 2))
)
step_data <- broom::tidy(step_matrix)

# Default plot.
g_step(step_data)

# Add the reference 1 horizontal line.
library(ggplot2)
g_step(step_data) +
  ggplot2::geom_hline(ggplot2::aes(yintercept = 1), linetype = 2)

# Use actual values instead of percentiles, different color for estimate and no CI,
# use log scale for y axis.
g_step(
  step_data,
  use_percentile = FALSE,
  est = list(col = "blue", lty = 1),
  ci_ribbon = NULL
) + scale_y_log10()

# Adding another curve based on additional column.
step_data$extra <- exp(step_data$`Percentile Center`)
g_step(step_data) +
  ggplot2::geom_line(ggplot2::aes(y = extra), linetype = 2, color = "green")

# Response example.
vars <- list(
  response = "status",
  arm = "sex",
  biomarker = "age"
)

step_matrix <- fit_rsp_step(
  variables = vars,
  data = lung,
  control = c(
    control_logistic(response_definition = "I(response == 2)"),
    control_step()
  )
)
step_data <- broom::tidy(step_matrix)
g_step(step_data)
library(survival)
lung$sex <- factor(lung$sex)
vars <- list(
  time = "time",
  event = "status",
  arm = "sex",
  biomarker = "age"
)
step_matrix <- fit_survival_step(
  variables = vars,
  data = lung,
  control = c(control_coxph(), control_step(num_points = 10, degree = 2))
)
broom::tidy(step_matrix)
}
\seealso{
\code{\link[=g_step]{g_step()}} which consumes the result from this function.
}
