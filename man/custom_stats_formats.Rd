% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xutils_custom_stats_formats_varying_dp.R
\name{custom_stats_formats}
\alias{custom_stats_formats}
\alias{get_formats_from_stats_custom}
\alias{tern_formats_custom_df}
\alias{get_formats_from_df}
\title{Get statistical methods and formats for custom variants}
\usage{
get_formats_from_stats_custom(
  stats,
  formats_in = NULL,
  fmts_specs = list(fmts_df = tern_formats_custom_df(), fmts_df_var = "default", d = 0)
)

tern_formats_custom_df()

get_formats_from_df(
  fmts_df = tern_formats_custom_df(),
  fmts_df_var = "default",
  stats = NULL
)
}
\arguments{
\item{stats}{Character vector with the names of the stats to define the custom format.}

\item{formats_in}{(named \code{vector})\cr inserted formats to replace defaults. It can be a
character vector from \code{\link[formatters:list_formats]{formatters::list_valid_format_labels()}} or a custom format function.}

\item{fmts_specs}{(named \code{list}) with specifications (
TO EXPAND)}

\item{fmts_df}{dataframe Any dataframe can be used. Expect to have the following columns: \code{stat}, \code{default}, and any other column with custom formatting definitions.}

\item{fmts_df_var}{Column name from the \code{fmts_df} that should be used for the format definitions.}
}
\value{
\itemize{
\item \code{get_formats_from_stats_custom()} returns a 3 component list. The primary one (named .fmt) is a named vector of formats (if present in either
\code{fmts_df} or \code{formats_in}, otherwise \code{NULL}). Values can be taken from
\code{\link[formatters:list_formats]{formatters::list_valid_format_labels()}} or a custom function (e.g. \link{formatting_functions}).
.fmt_char is the character representation.
.fmt_fun is the name of the formatting function applied to the character representation
}

\itemize{
\item The result of \code{tern_formats_custom_df} is a dataframe of available default formats, with each element
named for their corresponding statistic.
xx.d will be translated into xx. for d=0, xx.x for d=1, and xx.xx for d=2
xx.dx will be translated into xx.x for d=0, xx.xx for d=1, and xx.xxx for d=2
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\details{
Currently only available for usage within \code{a_summary}, \code{analyze_vars}, and hope to extend to at least \code{a_ancova} and \code{summarize_ancova}.
Question to Roche: is there an intention to refactor a_ancova and summarize_ancova to not use make_afun, but same approach of in_rows as in a_summary?
}
\section{Functions}{
\itemize{
\item \code{get_formats_from_stats_custom()}: Get formats corresponding to a list of statistics.

\item \code{tern_formats_custom_df()}: Approach for custom formats using d-style formats where d is a parameter for the decimal precision.
The construction of the dataframe can be customized and used as input dataframe in further processing (eg afun = \code{a_summary})

\item \code{get_formats_from_df()}: Approach for custom formats using d-style formats where d is a parameter for the decimal precision.

}}
\note{
These defaults are experimental because we use the names of functions to retrieve the default
statistics. This should be generalized in groups of methods according to more reasonable groupings.

Formats in \code{tern} and \code{rtables} can be functions that take in the table cell value and
return a string. This is well documented in \code{vignette("custom_appearance", package = "rtables")}.
}
\examples{
# Defaults formats
get_formats_from_stats_custom(
stats = c("mean", "sd"),
fmts_df = tern_formats_custom_df(),
fmts_df_var = "variant1",
d = 1)

get_formats_from_stats_custom(stats = c("mean", "sd"))$fmt_char

get_formats_from_stats(stats = c("mean", "sd"))

get_formats_from_stats_custom(
stats = c("mean", "sd"),
fmts_df = tern_formats_custom_df(),
fmts_df_var = "variant2",
d = 2,
formatting_function = format_xx)$fmt_char

get_formats_from_stats_custom(
stats = c("mean", "sd"),
fmts_df = tern_formats_custom_df(),
fmts_df_var = "variant2",
d = 2,
formatting_function = format_xx)$fmt_char


# Addition of customs including xx.d style notation
get_formats_from_stats_custom(
stats = c("mean", "sd"),
formats_in = c("mean" = "xx.dxxxx"),
fmts_df = tern_formats_custom_df(),
fmts_df_var = "variant2",
d = 0)$fmt

get_formats_from_stats_custom(
stats = c("mean_pval", "mean", "sd" ),
formats_in = c("mean" = "xx.dxxxx"),
fmts_specs = list(
fmts_df = tern_formats_custom_df(),
fmts_df_var = "variant2",
d = 0,
formatting_function = format_xx_fixed_dp))$fmt

get_formats_from_stats_custom(
stats = c("mean_pval", "mean", "sd" ),
formats_in = c("mean" = "xx.xxxx"),
fmts_specs = list(
fmts_df = tern_formats_custom_df(),
fmts_df_var = "default"
))$fmt
get_formats_from_stats_custom(
stats = c("mean_pval", "mean", "sd" ),
formats_in = c("mean" = "xx.xxxx"),
fmts_specs = list(
fmts_df = tern_formats_custom_df(),
fmts_df_var = "default"
))$fmt_fun

get_formats_from_stats_custom(
stats = c("mean_pval", "mean", "sd" ),
formats_in = c("mean" = "xx.xxxx"),
fmts_specs = list(
fmts_df = tern_formats_custom_df(),
fmts_df_var = "default"
))$fmt_fun

# example using analyze_vars on continuous data
dt2 <- data.frame("VAR" = c(0.001, 0.2, 0.0011000, 3, 4, 0.002, 0.004, 0.006), decimal = c(rep(2, 4), rep(1, 4)), by = c(rep("by1", 4), rep("by2", 4)))
our_fmt_specs_variant2 <-  list(
fmts_df = tern_formats_custom_df(),
fmts_df_var = "variant2",
formatting_function = "format_xx_fixed_dp",
d = "decimal",
d_cap = 0)
basic_table() \%>\%
  split_rows_by("by") \%>\%
  analyze_vars(
    vars = "VAR",
    .stats = c("n", "mean", "mean_sd", "range"),
    fmt_specs = our_fmt_specs_variant2
  ) \%>\%
  build_table(dt2)


our_custom_fmts <- tern_formats_custom_df()


# Defaults formats

get_formats_from_df(
stats = c("mean", "sd"),
fmts_df = tern_formats_custom_df(),
fmts_df_var = "variant1")
#' get_formats_from_df(
stats = c("mean", "sd"),
fmts_df = tern_formats_custom_df(),
fmts_df_var = "variant2")

get_formats_from_df(
fmts_df = tern_formats_custom_df(),
fmts_df_var = "variant2")

}
\seealso{
\link{default_stats_formats_labels}

Other formatting functions: 
\code{\link{extreme_format}},
\code{\link{format_auto}()},
\code{\link{format_count_fraction}()},
\code{\link{format_count_fraction_fixed_dp}()},
\code{\link{format_count_fraction_lt10}()},
\code{\link{format_extreme_values}()},
\code{\link{format_extreme_values_ci}()},
\code{\link{format_fraction}()},
\code{\link{format_fraction_fixed_dp}()},
\code{\link{format_fraction_threshold}()},
\code{\link{format_sigfig}()},
\code{\link{format_xx}()},
\code{\link{formatting_functions}}
}
\concept{formatting functions}
