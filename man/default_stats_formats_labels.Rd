% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_default_stats_formats_labels.R
\docType{data}
\name{default_stats_formats_labels}
\alias{default_stats_formats_labels}
\alias{get_stats}
\alias{get_format_from_stats}
\alias{get_label_from_stats}
\alias{tern_default_formats}
\alias{tern_default_labels}
\title{Defaults for statistical method names and their associated formats & labels}
\format{
An object of class \code{list} of length 34.

An object of class \code{character} of length 31.
}
\usage{
get_stats(method_groups, type = NULL, stats_in = NULL, add_pval = FALSE)

get_format_from_stats(stats, formats_in = NULL)

get_label_from_stats(stats, labels_in = NULL)

tern_default_formats

tern_default_labels
}
\arguments{
\item{method_groups}{(\code{character})\cr indicates the group of statistical methods that
we need the defaults from. A character vector can be used to collect more than one group of statistical
methods.}

\item{type}{(\code{character})\cr type of data and result desired. Some stats defaults (and their formats
and labels), differ if you need to analyze different type of values. See Details for available options.}

\item{stats_in}{(\code{character})\cr desired stats to be picked out from the selected method group.}

\item{add_pval}{(\code{flag})\cr should \code{"pval"} or \code{"pval_counts"} (for type \code{"counts"}) be added
to the statistical methods?}

\item{stats}{(\code{character})\cr statistical methods to get defaults formats or labels for.}

\item{formats_in}{(named \code{vector}) \cr inserted formats to replace defaults. It can be a
character vector from \code{\link[formatters:list_formats]{formatters::list_valid_format_labels()}} or a custom format function.}

\item{labels_in}{(named \code{vector}) \cr inserted labels to replace defaults.}
}
\value{
\itemize{
\item \code{get_stats()} returns a character vector with all default statistical methods.
}

\itemize{
\item \code{get_format_from_stats()} returns a named list of formats, they being a value from
\code{\link[formatters:list_formats]{formatters::list_valid_format_labels()}} or a custom function (e.g. \link{formatting_functions}).
}

\itemize{
\item \code{get_label_from_stats()} returns a named character vector of default labels (if present
otherwise \code{NULL}).
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Utility functions to get valid statistic methods for different method groups
(\code{.stats}) and their associated formats (\code{.formats}) and labels (\code{.labels}). This utility
is used across \code{tern}, but some of its working principles can be seen in \code{\link[=analyze_vars]{analyze_vars()}}.
See notes to understand why this is experimental.
}
\details{
Current choices for \code{type} are \code{counts} and \code{numeric} for \code{\link[=analyze_vars]{analyze_vars()}} and affect \code{get_stats()}.
}
\section{Functions}{
\itemize{
\item \code{get_stats()}: Get defaults statistical methods for different
groups of methods.

\item \code{get_format_from_stats()}: Get formats from vector of statistical methods. If not
present \code{NULL} is returned.

\item \code{get_label_from_stats()}: Get labels from vector of statistical methods.

\item \code{tern_default_formats}: Named list of default formats for \code{tern}.

\item \code{tern_default_labels}: \code{character} vector that contains default labels
for \code{tern}.

}}
\note{
These defaults are experimental because we use the names of functions to retrieve the default statistics. This
should be generalized in groups of methods according to more reasonable groupings.

Formats in \code{tern} and \code{rtables} can be functions that take in the table cell value and
return a string. This is well documented in \code{vignette("custom_appearance", package = "rtables")}.
}
\examples{
# Default is numeric
num_stats <- get_stats("analyze_vars")

# Other type
cnt_stats <- get_stats("analyze_vars", type = "counts")

# Weirdly taking the pval from count_occurrences
only_pval <- get_stats("count_occurrences", add_pval = TRUE, stats_in = "pval")

# All count_occurrences
all_cnt_occ <- get_stats("count_occurrences")

# Multiple
get_stats(c("count_occurrences", "analyze_vars"))
get_stats(c("count_occurrences", "analyze_vars"), type = c("numeric", "counts"))

# Defaults formats
get_format_from_stats(num_stats)
get_format_from_stats(cnt_stats)
get_format_from_stats(only_pval)
get_format_from_stats(all_cnt_occ)

# Addition of customs
get_format_from_stats(all_cnt_occ, formats_in = c("fraction" = c("xx")))
get_format_from_stats(all_cnt_occ, formats_in = list("fraction" = c("xx.xx", "xx")))

# Defaults labels
get_label_from_stats(num_stats)
get_label_from_stats(cnt_stats)
get_label_from_stats(only_pval)
get_label_from_stats(all_cnt_occ)

# Addition of customs
get_label_from_stats(all_cnt_occ, labels_in = c("fraction" = "Fraction"))
get_label_from_stats(all_cnt_occ, labels_in = list("fraction" = c("Some more fractions")))

}
\seealso{
\link{formatting_functions}
}
\keyword{datasets}
