% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summarize_num_patients.R
\name{summarize_num_patients}
\alias{summarize_num_patients}
\alias{s_num_patients}
\alias{s_num_patients_content}
\alias{analyze_num_patients}
\title{Number of patients}
\usage{
s_num_patients(
  x,
  labelstr,
  .N_col,
  count_by = NULL,
  unique_count_suffix = TRUE
)

s_num_patients_content(
  df,
  labelstr = "",
  .N_col,
  .var,
  required = NULL,
  count_by = NULL,
  unique_count_suffix = TRUE
)

summarize_num_patients(
  lyt,
  var,
  .stats = NULL,
  .formats = NULL,
  .labels = c(unique = "Number of patients with at least one event", nonunique =
    "Number of events"),
  indent_mod = 0L,
  ...
)

analyze_num_patients(
  lyt,
  vars,
  .stats = NULL,
  .formats = NULL,
  .labels = c(unique = "Number of patients with at least one event", nonunique =
    "Number of events"),
  show_labels = c("default", "visible", "hidden"),
  indent_mod = 0L,
  ...
)
}
\arguments{
\item{x}{(\code{character} or \code{factor})\cr vector of patient IDs.}

\item{labelstr}{(\code{character})\cr label of the level of the parent split currently being summarized
(must be present as second argument in Content Row Functions).}

\item{.N_col}{(\code{count})\cr row-wise N (row group count) for the group of observations being analyzed
(i.e. with no column-based subsetting) that is passed by \code{rtables}.}

\item{count_by}{(\code{character} or \code{factor})\cr optional vector to be combined with \code{x} when counting
\code{nonunique} records.}

\item{unique_count_suffix}{(\code{logical})\cr should \code{"(n)"} suffix be added to \code{unique_count} labels.
Defaults to \code{TRUE}.}

\item{df}{(\code{data.frame})\cr data set containing all analysis variables.}

\item{.var, var}{(\code{string})\cr single variable name that is passed by \code{rtables} when requested
by a statistics function.}

\item{required}{(\code{character} or \code{NULL})\cr optional name of a variable that is required to be non-missing.}

\item{lyt}{(\code{layout})\cr input layout where analyses will be added to.}

\item{.stats}{(\code{character})\cr statistics to select for the table.}

\item{.formats}{(named \code{character} or \code{list})\cr formats for the statistics.}

\item{.labels}{(named \code{character})\cr labels for the statistics (without indent).}

\item{indent_mod}{(\code{count})\cr it can be negative. Modifier for the default indent position for the
structure created by this function(subtable, content table, or row) and
all of that structure's children. Defaults to 0, which corresponds to the
unmodified default behavior.}

\item{...}{additional arguments for the lower level functions.}

\item{vars}{(\code{character})\cr variable names for the primary analysis variable to be iterated over.}

\item{show_labels}{(\code{string})\cr label visibility: one of "default", "visible" and "hidden".}
}
\value{
A list with:
\describe{
\item{unique}{vector of count and percentage.}
\item{nonunique}{vector of count.}
\item{unique_count}{count.}
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

Count the number of unique and non-unique patients in a column (variable).
}
\details{
In general, functions that starts with \verb{analyze*} are expected to
work like \code{\link[rtables:analyze]{rtables::analyze()}}, while functions that starts with \verb{summarize*}
are based upon \code{\link[rtables:summarize_row_groups]{rtables::summarize_row_groups()}}. The latter provides a
value for each dividing split in the row and column space, but, being it
bound to the fundamental splits, it is repeated by design in every page
when pagination is involved.
}
\section{Functions}{
\itemize{
\item \code{s_num_patients()}: Statistics function which counts the number of
unique patients, the corresponding percentage taken with respect to the
total number of patients, and the number of non-unique patients.

\item \code{s_num_patients_content()}: Counts the number of unique patients in a column
(variable), the corresponding percentage taken with respect to the total
number of patients, and the number of non-unique patients in the column.
Function serves as a wrapper that carries over both expected arguments \code{df}
and \code{labelstr} in \code{cfun} of \code{\link[=summarize_row_groups]{summarize_row_groups()}}.

\item \code{summarize_num_patients()}: Layout creating function which adds content rows using the statistics
function \code{\link[=s_num_patients_content]{s_num_patients_content()}} and desired format.

\item \code{analyze_num_patients()}: Identically to \code{\link[=summarize_num_patients]{summarize_num_patients()}},
This function creates a layout which adds content rows using the statistics
function \code{\link[=s_num_patients_content]{s_num_patients_content()}} and desired format. Differently from its
counterpart, this function does not impose the produced rows to be repeated.

}}
\examples{
# Use the statistics function to count number of unique and nonunique patients.
s_num_patients(x = as.character(c(1, 1, 1, 2, 4, NA)), labelstr = "", .N_col = 6L)
s_num_patients(
  x = as.character(c(1, 1, 1, 2, 4, NA)),
  labelstr = "",
  .N_col = 6L,
  count_by = as.character(c(1, 1, 2, 1, 1, 1))
)

# Count number of unique and non-unique patients.
df <- data.frame(
  USUBJID = as.character(c(1, 2, 1, 4, NA)),
  EVENT = as.character(c(10, 15, 10, 17, 8))
)
s_num_patients_content(df, .N_col = 5, .var = "USUBJID")

df_by_event <- data.frame(
  USUBJID = as.character(c(1, 2, 1, 4, NA)),
  EVENT = as.character(c(10, 15, 10, 17, 8))
)
s_num_patients_content(df_by_event, .N_col = 5, .var = "USUBJID")
s_num_patients_content(df_by_event, .N_col = 5, .var = "USUBJID", count_by = "EVENT")
df_tmp <- data.frame(
  USUBJID = as.character(c(1, 2, 1, 4, NA, 6, 6, 8, 9)),
  ARM = c("A", "A", "A", "A", "A", "B", "B", "B", "B"),
  AGE = c(10, 15, 10, 17, 8, 11, 11, 19, 17)
)
tbl <- basic_table() \%>\%
  split_cols_by("ARM") \%>\%
  add_colcounts() \%>\%
  analyze_num_patients("USUBJID", .stats = c("unique")) \%>\%
  build_table(df_tmp)
tbl

}
