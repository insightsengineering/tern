% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tabulate_rbmi.R
\name{tabulate_rbmi}
\alias{tabulate_rbmi}
\alias{h_tidy_pool}
\alias{tidy.pool}
\alias{s_rbmi_lsmeans}
\alias{a_rbmi_lsmeans}
\alias{summarize_rbmi}
\title{Tabulation of RBMI Results}
\usage{
h_tidy_pool(x)

\method{tidy}{pool}(x)

s_rbmi_lsmeans(df, .in_ref_col, show_relative = c("reduction", "increase"))

a_rbmi_lsmeans(df, .in_ref_col, show_relative = c("reduction", "increase"))

summarize_rbmi(
  lyt,
  ...,
  table_names = "rbmi_summary",
  .stats = NULL,
  .formats = NULL,
  .indent_mods = NULL,
  .labels = NULL
)
}
\arguments{
\item{x}{(\code{list})}
}
\description{
These functions can be used to produce tables from a fitted RBMI produced with
\code{\link[=fit_mmrm]{fit_mmrm()}}.
}
\details{
Helper function to produce data frame with results of rbmi::pool
for a single visit

Helper method (for \code{\link[broom:reexports]{broom::tidy()}}) to prepare a data frame from an
\code{pool} rbmi object containing the LS means and contrasts and multiple visits

Statistics function which is extracting estimates from a tidied rbmi::pool
data frame.

Formatted Analysis function which can be further customized by calling
\code{\link[rtables:make_afun]{rtables::make_afun()}} on it. It is used as \code{afun} in \code{\link[rtables:analyze]{rtables::analyze()}}.

Analyze function for tabulating LS means estimates from tidied
rbmi \code{pool} results.
}
\section{Functions}{
\itemize{
\item \code{h_tidy_pool}: Code is adapted from https://github.com/insightsengineering/tern/blob/main/R/tabulate_mmrm.R

\item \code{tidy.pool}: 

\item \code{s_rbmi_lsmeans}: 

\item \code{a_rbmi_lsmeans}: 

\item \code{summarize_rbmi}: 
}}

\examples{

library(rtables)
library(dplyr)
library(broom)
library(rbmi)

path <- "~/NEST/rbmi_rds-export"
pool_obj <- readRDS(file.path(path, "pool_obj.RDS"))

h_tidy_pool(pool_obj$pars[1:3])
df <- tidy(pool_obj)
df

s_rbmi_lsmeans(df[2, ], .in_ref_col = FALSE)

afun <- make_afun(a_rbmi_lsmeans)
afun(df[2, ], .in_ref_col = FALSE)

basic_table() \%>\%
  split_cols_by("group", ref_group = levels(df$group)[1]) \%>\%
  split_rows_by("visit", split_label = "Visit", label_pos = "topleft") \%>\%
  summarize_rbmi() \%>\%
  build_table(df)

}
